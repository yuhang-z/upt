
utp_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f30  08005f30  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f38  08005f38  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08005f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  200000f8  08006038  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  08006038  00020920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f75  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a74  00000000  00000000  0003609d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  00038b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  00039ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028394  00000000  00000000  0003b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000111a7  00000000  00000000  00063484  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7135  00000000  00000000  0007462b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016b760  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  0016b7dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e6c 	.word	0x08005e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	08005e6c 	.word	0x08005e6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	2003      	movs	r0, #3
 800058c:	f000 f95e 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f80d 	bl	80005b0 <HAL_InitTick>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e001      	b.n	80005a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a2:	f004 fe59 	bl	8005258 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005bc:	4b17      	ldr	r3, [pc, #92]	; (800061c <HAL_InitTick+0x6c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d023      	beq.n	800060c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <HAL_InitTick+0x70>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <HAL_InitTick+0x6c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f96b 	bl	80008b6 <HAL_SYSTICK_Config>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d10f      	bne.n	8000606 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b0f      	cmp	r3, #15
 80005ea:	d809      	bhi.n	8000600 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ec:	2200      	movs	r2, #0
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005f4:	f000 f935 	bl	8000862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f8:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <HAL_InitTick+0x74>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	e007      	b.n	8000610 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000600:	2301      	movs	r3, #1
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	e004      	b.n	8000610 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	e001      	b.n	8000610 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060c:	2301      	movs	r3, #1
 800060e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000004 	.word	0x20000004
 8000620:	20000090 	.word	0x20000090
 8000624:	20000000 	.word	0x20000000

08000628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x20>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_IncTick+0x24>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	20000654 	.word	0x20000654

08000650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_GetTick+0x14>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000654 	.word	0x20000654

08000668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000670:	f7ff ffee 	bl	8000650 <HAL_GetTick>
 8000674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000680:	d005      	beq.n	800068e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_Delay+0x40>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068e:	bf00      	nop
 8000690:	f7ff ffde 	bl	8000650 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8f7      	bhi.n	8000690 <HAL_Delay+0x28>
  {
  }
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000004 	.word	0x20000004

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <__NVIC_EnableIRQ+0x38>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff29 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff3e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff31 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008de:	e17f      	b.n	8000be0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	2101      	movs	r1, #1
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 8171 	beq.w	8000bda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d00b      	beq.n	8000918 <HAL_GPIO_Init+0x48>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d007      	beq.n	8000918 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090c:	2b11      	cmp	r3, #17
 800090e:	d003      	beq.n	8000918 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b12      	cmp	r3, #18
 8000916:	d130      	bne.n	800097a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2203      	movs	r2, #3
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800094e:	2201      	movs	r2, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	f003 0201 	and.w	r2, r3, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	2b03      	cmp	r3, #3
 8000984:	d118      	bne.n	80009b8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800098c:	2201      	movs	r2, #1
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	f003 0201 	and.w	r2, r3, #1
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2203      	movs	r2, #3
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0x128>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b12      	cmp	r3, #18
 80009f6:	d123      	bne.n	8000a40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	08da      	lsrs	r2, r3, #3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3208      	adds	r2, #8
 8000a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	691a      	ldr	r2, [r3, #16]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	08da      	lsrs	r2, r3, #3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3208      	adds	r2, #8
 8000a3a:	6939      	ldr	r1, [r7, #16]
 8000a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0203 	and.w	r2, r3, #3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 80ac 	beq.w	8000bda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b5e      	ldr	r3, [pc, #376]	; (8000bfc <HAL_GPIO_Init+0x32c>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	4a5d      	ldr	r2, [pc, #372]	; (8000bfc <HAL_GPIO_Init+0x32c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8e:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <HAL_GPIO_Init+0x32c>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a9a:	4a59      	ldr	r2, [pc, #356]	; (8000c00 <HAL_GPIO_Init+0x330>)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f003 0303 	and.w	r3, r3, #3
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ac4:	d025      	beq.n	8000b12 <HAL_GPIO_Init+0x242>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <HAL_GPIO_Init+0x334>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d01f      	beq.n	8000b0e <HAL_GPIO_Init+0x23e>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <HAL_GPIO_Init+0x338>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d019      	beq.n	8000b0a <HAL_GPIO_Init+0x23a>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4c      	ldr	r2, [pc, #304]	; (8000c0c <HAL_GPIO_Init+0x33c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_Init+0x236>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4b      	ldr	r2, [pc, #300]	; (8000c10 <HAL_GPIO_Init+0x340>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d00d      	beq.n	8000b02 <HAL_GPIO_Init+0x232>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4a      	ldr	r2, [pc, #296]	; (8000c14 <HAL_GPIO_Init+0x344>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d007      	beq.n	8000afe <HAL_GPIO_Init+0x22e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a49      	ldr	r2, [pc, #292]	; (8000c18 <HAL_GPIO_Init+0x348>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_GPIO_Init+0x22a>
 8000af6:	2306      	movs	r3, #6
 8000af8:	e00c      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000afa:	2307      	movs	r3, #7
 8000afc:	e00a      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000afe:	2305      	movs	r3, #5
 8000b00:	e008      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b02:	2304      	movs	r3, #4
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e004      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	e002      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b12:	2300      	movs	r3, #0
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	f002 0203 	and.w	r2, r2, #3
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	4093      	lsls	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b24:	4936      	ldr	r1, [pc, #216]	; (8000c00 <HAL_GPIO_Init+0x330>)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b32:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b56:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b80:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bd4:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f47f ae78 	bne.w	80008e0 <HAL_GPIO_Init+0x10>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000800 	.word	0x48000800
 8000c0c:	48000c00 	.word	0x48000c00
 8000c10:	48001000 	.word	0x48001000
 8000c14:	48001400 	.word	0x48001400
 8000c18:	48001800 	.word	0x48001800
 8000c1c:	40010400 	.word	0x40010400

08000c20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000c2e:	e0cd      	b.n	8000dcc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000c30:	2201      	movs	r2, #1
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 80c0 	beq.w	8000dc6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000c46:	4a68      	ldr	r2, [pc, #416]	; (8000de8 <HAL_GPIO_DeInit+0x1c8>)
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c52:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c6e:	d025      	beq.n	8000cbc <HAL_GPIO_DeInit+0x9c>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a5e      	ldr	r2, [pc, #376]	; (8000dec <HAL_GPIO_DeInit+0x1cc>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d01f      	beq.n	8000cb8 <HAL_GPIO_DeInit+0x98>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a5d      	ldr	r2, [pc, #372]	; (8000df0 <HAL_GPIO_DeInit+0x1d0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d019      	beq.n	8000cb4 <HAL_GPIO_DeInit+0x94>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a5c      	ldr	r2, [pc, #368]	; (8000df4 <HAL_GPIO_DeInit+0x1d4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d013      	beq.n	8000cb0 <HAL_GPIO_DeInit+0x90>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a5b      	ldr	r2, [pc, #364]	; (8000df8 <HAL_GPIO_DeInit+0x1d8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d00d      	beq.n	8000cac <HAL_GPIO_DeInit+0x8c>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a5a      	ldr	r2, [pc, #360]	; (8000dfc <HAL_GPIO_DeInit+0x1dc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d007      	beq.n	8000ca8 <HAL_GPIO_DeInit+0x88>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a59      	ldr	r2, [pc, #356]	; (8000e00 <HAL_GPIO_DeInit+0x1e0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d101      	bne.n	8000ca4 <HAL_GPIO_DeInit+0x84>
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	e00c      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	e00a      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000ca8:	2305      	movs	r3, #5
 8000caa:	e008      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cac:	2304      	movs	r3, #4
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e004      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	4093      	lsls	r3, r2
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d132      	bne.n	8000d34 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000cce:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	494b      	ldr	r1, [pc, #300]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000cdc:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4947      	ldr	r1, [pc, #284]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000cea:	4b46      	ldr	r3, [pc, #280]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4944      	ldr	r1, [pc, #272]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000cf8:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4940      	ldr	r1, [pc, #256]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000d16:	4a34      	ldr	r2, [pc, #208]	; (8000de8 <HAL_GPIO_DeInit+0x1c8>)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43da      	mvns	r2, r3
 8000d26:	4830      	ldr	r0, [pc, #192]	; (8000de8 <HAL_GPIO_DeInit+0x1c8>)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	08da      	lsrs	r2, r3, #3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3208      	adds	r2, #8
 8000d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	08d2      	lsrs	r2, r2, #3
 8000d68:	4019      	ands	r1, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2103      	movs	r1, #3
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	401a      	ands	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	401a      	ands	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2103      	movs	r1, #3
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	401a      	ands	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db6:	2101      	movs	r1, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f af2b 	bne.w	8000c30 <HAL_GPIO_DeInit+0x10>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	371c      	adds	r7, #28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40010000 	.word	0x40010000
 8000dec:	48000400 	.word	0x48000400
 8000df0:	48000800 	.word	0x48000800
 8000df4:	48000c00 	.word	0x48000c00
 8000df8:	48001000 	.word	0x48001000
 8000dfc:	48001400 	.word	0x48001400
 8000e00:	48001800 	.word	0x48001800
 8000e04:	40010400 	.word	0x40010400

08000e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e081      	b.n	8000f1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d106      	bne.n	8000e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f004 fa36 	bl	80052a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2224      	movs	r2, #36	; 0x24
 8000e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d107      	bne.n	8000e82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	e006      	b.n	8000e90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d104      	bne.n	8000ea2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ea0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ec4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	ea42 0103 	orr.w	r1, r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	021a      	lsls	r2, r3, #8
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69d9      	ldr	r1, [r3, #28]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1a      	ldr	r2, [r3, #32]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0201 	orr.w	r2, r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2220      	movs	r2, #32
 8000f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e021      	b.n	8000f7c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0201 	bic.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f004 f9e9 	bl	8005328 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	4611      	mov	r1, r2
 8000f90:	461a      	mov	r2, r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	817b      	strh	r3, [r7, #10]
 8000f96:	460b      	mov	r3, r1
 8000f98:	813b      	strh	r3, [r7, #8]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b20      	cmp	r3, #32
 8000fa8:	f040 80f9 	bne.w	800119e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <HAL_I2C_Mem_Write+0x34>
 8000fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0ed      	b.n	80011a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_I2C_Mem_Write+0x4e>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e0e6      	b.n	80011a0 <HAL_I2C_Mem_Write+0x21c>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fda:	f7ff fb39 	bl	8000650 <HAL_GetTick>
 8000fde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2319      	movs	r3, #25
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f000 fac3 	bl	8001578 <I2C_WaitOnFlagUntilTimeout>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e0d1      	b.n	80011a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2221      	movs	r2, #33	; 0x21
 8001000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2240      	movs	r2, #64	; 0x40
 8001008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6a3a      	ldr	r2, [r7, #32]
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800101c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001024:	88f8      	ldrh	r0, [r7, #6]
 8001026:	893a      	ldrh	r2, [r7, #8]
 8001028:	8979      	ldrh	r1, [r7, #10]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	4603      	mov	r3, r0
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 f9d3 	bl	80013e0 <I2C_RequestMemoryWrite>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0a9      	b.n	80011a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001050:	b29b      	uxth	r3, r3
 8001052:	2bff      	cmp	r3, #255	; 0xff
 8001054:	d90e      	bls.n	8001074 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	22ff      	movs	r2, #255	; 0xff
 800105a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001060:	b2da      	uxtb	r2, r3
 8001062:	8979      	ldrh	r1, [r7, #10]
 8001064:	2300      	movs	r3, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 fba5 	bl	80017bc <I2C_TransferConfig>
 8001072:	e00f      	b.n	8001094 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001078:	b29a      	uxth	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001082:	b2da      	uxtb	r2, r3
 8001084:	8979      	ldrh	r1, [r7, #10]
 8001086:	2300      	movs	r3, #0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 fb94 	bl	80017bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 faad 	bl	80015f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e07b      	b.n	80011a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	3b01      	subs	r3, #1
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d0:	3b01      	subs	r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010dc:	b29b      	uxth	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d034      	beq.n	800114c <HAL_I2C_Mem_Write+0x1c8>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d130      	bne.n	800114c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f0:	2200      	movs	r2, #0
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 fa3f 	bl	8001578 <I2C_WaitOnFlagUntilTimeout>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e04d      	b.n	80011a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001108:	b29b      	uxth	r3, r3
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d90e      	bls.n	800112c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001118:	b2da      	uxtb	r2, r3
 800111a:	8979      	ldrh	r1, [r7, #10]
 800111c:	2300      	movs	r3, #0
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 fb49 	bl	80017bc <I2C_TransferConfig>
 800112a:	e00f      	b.n	800114c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001130:	b29a      	uxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113a:	b2da      	uxtb	r2, r3
 800113c:	8979      	ldrh	r1, [r7, #10]
 800113e:	2300      	movs	r3, #0
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f000 fb38 	bl	80017bc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001150:	b29b      	uxth	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d19e      	bne.n	8001094 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 fa8c 	bl	8001678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e01a      	b.n	80011a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2220      	movs	r2, #32
 8001170:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6859      	ldr	r1, [r3, #4]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_I2C_Mem_Write+0x224>)
 800117e:	400b      	ands	r3, r1
 8001180:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2220      	movs	r2, #32
 8001186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800119e:	2302      	movs	r3, #2
  }
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	fe00e800 	.word	0xfe00e800

080011ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	4608      	mov	r0, r1
 80011b6:	4611      	mov	r1, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	817b      	strh	r3, [r7, #10]
 80011be:	460b      	mov	r3, r1
 80011c0:	813b      	strh	r3, [r7, #8]
 80011c2:	4613      	mov	r3, r2
 80011c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b20      	cmp	r3, #32
 80011d0:	f040 80fd 	bne.w	80013ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <HAL_I2C_Mem_Read+0x34>
 80011da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0f1      	b.n	80013d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_I2C_Mem_Read+0x4e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e0ea      	b.n	80013d0 <HAL_I2C_Mem_Read+0x224>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001202:	f7ff fa25 	bl	8000650 <HAL_GetTick>
 8001206:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2319      	movs	r3, #25
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f9af 	bl	8001578 <I2C_WaitOnFlagUntilTimeout>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0d5      	b.n	80013d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2222      	movs	r2, #34	; 0x22
 8001228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2240      	movs	r2, #64	; 0x40
 8001230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6a3a      	ldr	r2, [r7, #32]
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800124c:	88f8      	ldrh	r0, [r7, #6]
 800124e:	893a      	ldrh	r2, [r7, #8]
 8001250:	8979      	ldrh	r1, [r7, #10]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4603      	mov	r3, r0
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f913 	bl	8001488 <I2C_RequestMemoryRead>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0ad      	b.n	80013d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001278:	b29b      	uxth	r3, r3
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	d90e      	bls.n	800129c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001288:	b2da      	uxtb	r2, r3
 800128a:	8979      	ldrh	r1, [r7, #10]
 800128c:	4b52      	ldr	r3, [pc, #328]	; (80013d8 <HAL_I2C_Mem_Read+0x22c>)
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 fa91 	bl	80017bc <I2C_TransferConfig>
 800129a:	e00f      	b.n	80012bc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	8979      	ldrh	r1, [r7, #10]
 80012ae:	4b4a      	ldr	r3, [pc, #296]	; (80013d8 <HAL_I2C_Mem_Read+0x22c>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fa80 	bl	80017bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c2:	2200      	movs	r2, #0
 80012c4:	2104      	movs	r1, #4
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 f956 	bl	8001578 <I2C_WaitOnFlagUntilTimeout>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e07c      	b.n	80013d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3b01      	subs	r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d034      	beq.n	800137c <HAL_I2C_Mem_Read+0x1d0>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001316:	2b00      	cmp	r3, #0
 8001318:	d130      	bne.n	800137c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	2200      	movs	r2, #0
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 f927 	bl	8001578 <I2C_WaitOnFlagUntilTimeout>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e04d      	b.n	80013d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001338:	b29b      	uxth	r3, r3
 800133a:	2bff      	cmp	r3, #255	; 0xff
 800133c:	d90e      	bls.n	800135c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	22ff      	movs	r2, #255	; 0xff
 8001342:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001348:	b2da      	uxtb	r2, r3
 800134a:	8979      	ldrh	r1, [r7, #10]
 800134c:	2300      	movs	r3, #0
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f000 fa31 	bl	80017bc <I2C_TransferConfig>
 800135a:	e00f      	b.n	800137c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001360:	b29a      	uxth	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136a:	b2da      	uxtb	r2, r3
 800136c:	8979      	ldrh	r1, [r7, #10]
 800136e:	2300      	movs	r3, #0
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 fa20 	bl	80017bc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001380:	b29b      	uxth	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d19a      	bne.n	80012bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 f974 	bl	8001678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e01a      	b.n	80013d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2220      	movs	r2, #32
 80013a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6859      	ldr	r1, [r3, #4]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_I2C_Mem_Read+0x230>)
 80013ae:	400b      	ands	r3, r1
 80013b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2220      	movs	r2, #32
 80013b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80013ce:	2302      	movs	r3, #2
  }
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	80002400 	.word	0x80002400
 80013dc:	fe00e800 	.word	0xfe00e800

080013e0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	4608      	mov	r0, r1
 80013ea:	4611      	mov	r1, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	4603      	mov	r3, r0
 80013f0:	817b      	strh	r3, [r7, #10]
 80013f2:	460b      	mov	r3, r1
 80013f4:	813b      	strh	r3, [r7, #8]
 80013f6:	4613      	mov	r3, r2
 80013f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	8979      	ldrh	r1, [r7, #10]
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <I2C_RequestMemoryWrite+0xa4>)
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f9d7 	bl	80017bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	69b9      	ldr	r1, [r7, #24]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 f8f0 	bl	80015f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e02c      	b.n	800147c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001428:	893b      	ldrh	r3, [r7, #8]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
 8001432:	e015      	b.n	8001460 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001434:	893b      	ldrh	r3, [r7, #8]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	b29b      	uxth	r3, r3
 800143a:	b2da      	uxtb	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	69b9      	ldr	r1, [r7, #24]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f8d6 	bl	80015f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e012      	b.n	800147c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001456:	893b      	ldrh	r3, [r7, #8]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2200      	movs	r2, #0
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 f884 	bl	8001578 <I2C_WaitOnFlagUntilTimeout>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	80002000 	.word	0x80002000

08001488 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af02      	add	r7, sp, #8
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	4608      	mov	r0, r1
 8001492:	4611      	mov	r1, r2
 8001494:	461a      	mov	r2, r3
 8001496:	4603      	mov	r3, r0
 8001498:	817b      	strh	r3, [r7, #10]
 800149a:	460b      	mov	r3, r1
 800149c:	813b      	strh	r3, [r7, #8]
 800149e:	4613      	mov	r3, r2
 80014a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	8979      	ldrh	r1, [r7, #10]
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <I2C_RequestMemoryRead+0xa4>)
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2300      	movs	r3, #0
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 f984 	bl	80017bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	69b9      	ldr	r1, [r7, #24]
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f000 f89d 	bl	80015f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e02c      	b.n	8001522 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014ce:	893b      	ldrh	r3, [r7, #8]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
 80014d8:	e015      	b.n	8001506 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014da:	893b      	ldrh	r3, [r7, #8]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	69b9      	ldr	r1, [r7, #24]
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 f883 	bl	80015f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e012      	b.n	8001522 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014fc:	893b      	ldrh	r3, [r7, #8]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2200      	movs	r2, #0
 800150e:	2140      	movs	r1, #64	; 0x40
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 f831 	bl	8001578 <I2C_WaitOnFlagUntilTimeout>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	80002000 	.word	0x80002000

08001530 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b02      	cmp	r3, #2
 8001544:	d103      	bne.n	800154e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b01      	cmp	r3, #1
 800155a:	d007      	beq.n	800156c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	619a      	str	r2, [r3, #24]
  }
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001588:	e022      	b.n	80015d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001590:	d01e      	beq.n	80015d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001592:	f7ff f85d 	bl	8000650 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d302      	bcc.n	80015a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d113      	bne.n	80015d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	f043 0220 	orr.w	r2, r3, #32
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e00f      	b.n	80015f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	4013      	ands	r3, r2
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	429a      	cmp	r2, r3
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d0cd      	beq.n	800158a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001604:	e02c      	b.n	8001660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 f870 	bl	80016f0 <I2C_IsAcknowledgeFailed>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e02a      	b.n	8001670 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001620:	d01e      	beq.n	8001660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001622:	f7ff f815 	bl	8000650 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	429a      	cmp	r2, r3
 8001630:	d302      	bcc.n	8001638 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d113      	bne.n	8001660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	f043 0220 	orr.w	r2, r3, #32
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2220      	movs	r2, #32
 8001648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e007      	b.n	8001670 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b02      	cmp	r3, #2
 800166c:	d1cb      	bne.n	8001606 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001684:	e028      	b.n	80016d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f830 	bl	80016f0 <I2C_IsAcknowledgeFailed>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e026      	b.n	80016e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800169a:	f7fe ffd9 	bl	8000650 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d302      	bcc.n	80016b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d113      	bne.n	80016d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	f043 0220 	orr.w	r2, r3, #32
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2220      	movs	r2, #32
 80016c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e007      	b.n	80016e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d1cf      	bne.n	8001686 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	2b10      	cmp	r3, #16
 8001708:	d151      	bne.n	80017ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800170a:	e022      	b.n	8001752 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001712:	d01e      	beq.n	8001752 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001714:	f7fe ff9c 	bl	8000650 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	429a      	cmp	r2, r3
 8001722:	d302      	bcc.n	800172a <I2C_IsAcknowledgeFailed+0x3a>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d113      	bne.n	8001752 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f043 0220 	orr.w	r2, r3, #32
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2220      	movs	r2, #32
 800173a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e02e      	b.n	80017b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b20      	cmp	r3, #32
 800175e:	d1d5      	bne.n	800170c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2210      	movs	r2, #16
 8001766:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2220      	movs	r2, #32
 800176e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff fedd 	bl	8001530 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001782:	400b      	ands	r3, r1
 8001784:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f043 0204 	orr.w	r2, r3, #4
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2220      	movs	r2, #32
 8001796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	fe00e800 	.word	0xfe00e800

080017bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	817b      	strh	r3, [r7, #10]
 80017ca:	4613      	mov	r3, r2
 80017cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	0d5b      	lsrs	r3, r3, #21
 80017d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <I2C_TransferConfig+0x58>)
 80017de:	430b      	orrs	r3, r1
 80017e0:	43db      	mvns	r3, r3
 80017e2:	ea02 0103 	and.w	r1, r2, r3
 80017e6:	897b      	ldrh	r3, [r7, #10]
 80017e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017ec:	7a7b      	ldrb	r3, [r7, #9]
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	03ff63ff 	.word	0x03ff63ff

08001818 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b20      	cmp	r3, #32
 800182c:	d138      	bne.n	80018a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001838:	2302      	movs	r3, #2
 800183a:	e032      	b.n	80018a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2224      	movs	r2, #36	; 0x24
 8001848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800186a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	e000      	b.n	80018a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018a0:	2302      	movs	r3, #2
  }
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	d139      	bne.n	8001938 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e033      	b.n	800193a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2224      	movs	r2, #36	; 0x24
 80018de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001900:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2220      	movs	r2, #32
 8001928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e000      	b.n	800193a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001938:	2302      	movs	r3, #2
  }
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_PWREx_GetVoltageRange+0x18>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40007000 	.word	0x40007000

08001964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001972:	d130      	bne.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800197c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001980:	d038      	beq.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800198a:	4a1e      	ldr	r2, [pc, #120]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001990:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2232      	movs	r2, #50	; 0x32
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	4a1b      	ldr	r2, [pc, #108]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	0c9b      	lsrs	r3, r3, #18
 80019a4:	3301      	adds	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019a8:	e002      	b.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019bc:	d102      	bne.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f2      	bne.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d0:	d110      	bne.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e00f      	b.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e2:	d007      	beq.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ec:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40007000 	.word	0x40007000
 8001a08:	20000090 	.word	0x20000090
 8001a0c:	431bde83 	.word	0x431bde83

08001a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e3d4      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a22:	4ba1      	ldr	r3, [pc, #644]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a2c:	4b9e      	ldr	r3, [pc, #632]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 80e4 	beq.w	8001c0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_RCC_OscConfig+0x4a>
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	f040 808b 	bne.w	8001b68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	f040 8087 	bne.w	8001b68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a5a:	4b93      	ldr	r3, [pc, #588]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_RCC_OscConfig+0x62>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e3ac      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1a      	ldr	r2, [r3, #32]
 8001a76:	4b8c      	ldr	r3, [pc, #560]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_RCC_OscConfig+0x7c>
 8001a82:	4b89      	ldr	r3, [pc, #548]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a8a:	e005      	b.n	8001a98 <HAL_RCC_OscConfig+0x88>
 8001a8c:	4b86      	ldr	r3, [pc, #536]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d223      	bcs.n	8001ae4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fd3f 	bl	8002524 <RCC_SetFlashLatencyFromMSIRange>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e38d      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab0:	4b7d      	ldr	r3, [pc, #500]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a7c      	ldr	r2, [pc, #496]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4977      	ldr	r1, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ace:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	4972      	ldr	r1, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
 8001ae2:	e025      	b.n	8001b30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae4:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a6f      	ldr	r2, [pc, #444]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001aea:	f043 0308 	orr.w	r3, r3, #8
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b6d      	ldr	r3, [pc, #436]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	496a      	ldr	r1, [pc, #424]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b02:	4b69      	ldr	r3, [pc, #420]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	4965      	ldr	r1, [pc, #404]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fcff 	bl	8002524 <RCC_SetFlashLatencyFromMSIRange>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e34d      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b30:	f000 fc36 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8001b34:	4601      	mov	r1, r0
 8001b36:	4b5c      	ldr	r3, [pc, #368]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	4a5a      	ldr	r2, [pc, #360]	; (8001cac <HAL_RCC_OscConfig+0x29c>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	fa21 f303 	lsr.w	r3, r1, r3
 8001b4c:	4a58      	ldr	r2, [pc, #352]	; (8001cb0 <HAL_RCC_OscConfig+0x2a0>)
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b50:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_RCC_OscConfig+0x2a4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fd2b 	bl	80005b0 <HAL_InitTick>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d052      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	e331      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d032      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b70:	4b4d      	ldr	r3, [pc, #308]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b7c:	f7fe fd68 	bl	8000650 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b84:	f7fe fd64 	bl	8000650 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e31a      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b96:	4b44      	ldr	r3, [pc, #272]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba2:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a40      	ldr	r2, [pc, #256]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	493b      	ldr	r1, [pc, #236]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	4936      	ldr	r1, [pc, #216]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e01a      	b.n	8001c0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a33      	ldr	r2, [pc, #204]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001be2:	f7fe fd35 	bl	8000650 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bea:	f7fe fd31 	bl	8000650 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e2e7      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x1da>
 8001c08:	e000      	b.n	8001c0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d074      	beq.n	8001d02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x21a>
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d10e      	bne.n	8001c42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d10b      	bne.n	8001c42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d064      	beq.n	8001d00 <HAL_RCC_OscConfig+0x2f0>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d160      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e2c4      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x24a>
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e01d      	b.n	8001c96 <HAL_RCC_OscConfig+0x286>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x26e>
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x286>
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <HAL_RCC_OscConfig+0x298>)
 8001c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01c      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7fe fcd7 	bl	8000650 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca4:	e011      	b.n	8001cca <HAL_RCC_OscConfig+0x2ba>
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08005eb4 	.word	0x08005eb4
 8001cb0:	20000090 	.word	0x20000090
 8001cb4:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7fe fcca 	bl	8000650 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e280      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cca:	4baf      	ldr	r3, [pc, #700]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x2a8>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fcba 	bl	8000650 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7fe fcb6 	bl	8000650 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e26c      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cf2:	4ba5      	ldr	r3, [pc, #660]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2d0>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d060      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_OscConfig+0x310>
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d119      	bne.n	8001d4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d116      	bne.n	8001d4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d20:	4b99      	ldr	r3, [pc, #612]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_OscConfig+0x328>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e249      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4b93      	ldr	r3, [pc, #588]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	4990      	ldr	r1, [pc, #576]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d4c:	e040      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d023      	beq.n	8001d9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d56:	4b8c      	ldr	r3, [pc, #560]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a8b      	ldr	r2, [pc, #556]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7fe fc75 	bl	8000650 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6a:	f7fe fc71 	bl	8000650 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e227      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7c:	4b82      	ldr	r3, [pc, #520]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b7f      	ldr	r3, [pc, #508]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	497c      	ldr	r1, [pc, #496]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
 8001d9c:	e018      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9e:	4b7a      	ldr	r3, [pc, #488]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a79      	ldr	r2, [pc, #484]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7fe fc51 	bl	8000650 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db2:	f7fe fc4d 	bl	8000650 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e203      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc4:	4b70      	ldr	r3, [pc, #448]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d03c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01c      	beq.n	8001e1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de4:	4b68      	ldr	r3, [pc, #416]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dea:	4a67      	ldr	r2, [pc, #412]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7fe fc2c 	bl	8000650 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7fe fc28 	bl	8000650 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1de      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e0e:	4b5e      	ldr	r3, [pc, #376]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0ef      	beq.n	8001dfc <HAL_RCC_OscConfig+0x3ec>
 8001e1c:	e01b      	b.n	8001e56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001e26:	f023 0301 	bic.w	r3, r3, #1
 8001e2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7fe fc0f 	bl	8000650 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e36:	f7fe fc0b 	bl	8000650 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e1c1      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e48:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1ef      	bne.n	8001e36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80a6 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e68:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10d      	bne.n	8001e90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	4a43      	ldr	r2, [pc, #268]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e80:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e90:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_RCC_OscConfig+0x57c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d118      	bne.n	8001ece <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCC_OscConfig+0x57c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a3a      	ldr	r2, [pc, #232]	; (8001f8c <HAL_RCC_OscConfig+0x57c>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea8:	f7fe fbd2 	bl	8000650 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb0:	f7fe fbce 	bl	8000650 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e184      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec2:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HAL_RCC_OscConfig+0x57c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d108      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4d8>
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001edc:	4a2a      	ldr	r2, [pc, #168]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee6:	e024      	b.n	8001f32 <HAL_RCC_OscConfig+0x522>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d110      	bne.n	8001f12 <HAL_RCC_OscConfig+0x502>
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	4a24      	ldr	r2, [pc, #144]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	4a20      	ldr	r2, [pc, #128]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f10:	e00f      	b.n	8001f32 <HAL_RCC_OscConfig+0x522>
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f18:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	f023 0304 	bic.w	r3, r3, #4
 8001f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fb89 	bl	8000650 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe fb85 	bl	8000650 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e139      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x578>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ed      	beq.n	8001f42 <HAL_RCC_OscConfig+0x532>
 8001f66:	e01a      	b.n	8001f9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7fe fb72 	bl	8000650 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7fe fb6e 	bl	8000650 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d906      	bls.n	8001f90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e122      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f90:	4b90      	ldr	r3, [pc, #576]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1e8      	bne.n	8001f70 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f9e:	7ffb      	ldrb	r3, [r7, #31]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa4:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	4a8a      	ldr	r2, [pc, #552]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8001faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8108 	beq.w	80021ca <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	f040 80d0 	bne.w	8002164 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fc4:	4b83      	ldr	r3, [pc, #524]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d130      	bne.n	800203a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d127      	bne.n	800203a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d11f      	bne.n	800203a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002004:	2a07      	cmp	r2, #7
 8002006:	bf14      	ite	ne
 8002008:	2201      	movne	r2, #1
 800200a:	2200      	moveq	r2, #0
 800200c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800200e:	4293      	cmp	r3, r2
 8002010:	d113      	bne.n	800203a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	3b01      	subs	r3, #1
 8002020:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d109      	bne.n	800203a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	3b01      	subs	r3, #1
 8002034:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d06e      	beq.n	8002118 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b0c      	cmp	r3, #12
 800203e:	d069      	beq.n	8002114 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002040:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d105      	bne.n	8002058 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800204c:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b7      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800205c:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a5c      	ldr	r2, [pc, #368]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002066:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002068:	f7fe faf2 	bl	8000650 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7fe faee 	bl	8000650 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e0a4      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002082:	4b54      	ldr	r3, [pc, #336]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208e:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <HAL_RCC_OscConfig+0x7c8>)
 8002094:	4013      	ands	r3, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800209e:	3a01      	subs	r2, #1
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	4311      	orrs	r1, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020a8:	0212      	lsls	r2, r2, #8
 80020aa:	4311      	orrs	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020b0:	0852      	lsrs	r2, r2, #1
 80020b2:	3a01      	subs	r2, #1
 80020b4:	0552      	lsls	r2, r2, #21
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020bc:	0852      	lsrs	r2, r2, #1
 80020be:	3a01      	subs	r2, #1
 80020c0:	0652      	lsls	r2, r2, #25
 80020c2:	4311      	orrs	r1, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020c8:	0912      	lsrs	r2, r2, #4
 80020ca:	0452      	lsls	r2, r2, #17
 80020cc:	430a      	orrs	r2, r1
 80020ce:	4941      	ldr	r1, [pc, #260]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020d4:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 80020da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020e0:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 80020e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020ec:	f7fe fab0 	bl	8000650 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7fe faac 	bl	8000650 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e062      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002112:	e05a      	b.n	80021ca <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e059      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d152      	bne.n	80021ca <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002124:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 800212a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800213c:	f7fe fa88 	bl	8000650 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe fa84 	bl	8000650 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e03a      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x734>
 8002162:	e032      	b.n	80021ca <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2b0c      	cmp	r3, #12
 8002168:	d02d      	beq.n	80021c6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a19      	ldr	r2, [pc, #100]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002170:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002174:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d105      	bne.n	800218e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002188:	f023 0303 	bic.w	r3, r3, #3
 800218c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 8002194:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7fe fa57 	bl	8000650 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe fa53 	bl	8000650 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e009      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_OscConfig+0x7c4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x796>
 80021c4:	e001      	b.n	80021ca <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	f99d808c 	.word	0xf99d808c

080021dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0c8      	b.n	8002382 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f0:	4b66      	ldr	r3, [pc, #408]	; (800238c <HAL_RCC_ClockConfig+0x1b0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d910      	bls.n	8002220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b63      	ldr	r3, [pc, #396]	; (800238c <HAL_RCC_ClockConfig+0x1b0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	4961      	ldr	r1, [pc, #388]	; (800238c <HAL_RCC_ClockConfig+0x1b0>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b5f      	ldr	r3, [pc, #380]	; (800238c <HAL_RCC_ClockConfig+0x1b0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0b0      	b.n	8002382 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d04c      	beq.n	80022c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d107      	bne.n	8002244 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002234:	4b56      	ldr	r3, [pc, #344]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d121      	bne.n	8002284 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e09e      	b.n	8002382 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d107      	bne.n	800225c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224c:	4b50      	ldr	r3, [pc, #320]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d115      	bne.n	8002284 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e092      	b.n	8002382 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002264:	4b4a      	ldr	r3, [pc, #296]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e086      	b.n	8002382 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002274:	4b46      	ldr	r3, [pc, #280]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e07e      	b.n	8002382 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002284:	4b42      	ldr	r3, [pc, #264]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 0203 	bic.w	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	493f      	ldr	r1, [pc, #252]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002296:	f7fe f9db 	bl	8000650 <HAL_GetTick>
 800229a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229e:	f7fe f9d7 	bl	8000650 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e066      	b.n	8002382 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 020c 	and.w	r2, r3, #12
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d1eb      	bne.n	800229e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	492c      	ldr	r1, [pc, #176]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_RCC_ClockConfig+0x1b0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d210      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_RCC_ClockConfig+0x1b0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0207 	bic.w	r2, r3, #7
 80022fa:	4924      	ldr	r1, [pc, #144]	; (800238c <HAL_RCC_ClockConfig+0x1b0>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <HAL_RCC_ClockConfig+0x1b0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e036      	b.n	8002382 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4918      	ldr	r1, [pc, #96]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4910      	ldr	r1, [pc, #64]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002352:	f000 f825 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002356:	4601      	mov	r1, r0
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_RCC_ClockConfig+0x1b4>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	fa21 f303 	lsr.w	r3, r1, r3
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f91a 	bl	80005b0 <HAL_InitTick>
 800237c:	4603      	mov	r3, r0
 800237e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002380:	7afb      	ldrb	r3, [r7, #11]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40022000 	.word	0x40022000
 8002390:	40021000 	.word	0x40021000
 8002394:	08005eb4 	.word	0x08005eb4
 8002398:	20000090 	.word	0x20000090
 800239c:	20000000 	.word	0x20000000

080023a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b8:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x34>
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d121      	bne.n	8002412 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d11e      	bne.n	8002412 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023d4:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80023e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	e005      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023f0:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023fc:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10d      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d102      	bne.n	800241e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	e004      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d101      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002426:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d133      	bne.n	8002496 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d002      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0xa4>
 800243e:	2b03      	cmp	r3, #3
 8002440:	d003      	beq.n	800244a <HAL_RCC_GetSysClockFreq+0xaa>
 8002442:	e005      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002446:	617b      	str	r3, [r7, #20]
      break;
 8002448:	e005      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800244c:	617b      	str	r3, [r7, #20]
      break;
 800244e:	e002      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	617b      	str	r3, [r7, #20]
      break;
 8002454:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	3301      	adds	r3, #1
 8002462:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	fb02 f203 	mul.w	r2, r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x104>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0e5b      	lsrs	r3, r3, #25
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	3301      	adds	r3, #1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002496:	69bb      	ldr	r3, [r7, #24]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3724      	adds	r7, #36	; 0x24
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08005ecc 	.word	0x08005ecc
 80024ac:	00f42400 	.word	0x00f42400
 80024b0:	007a1200 	.word	0x007a1200

080024b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000090 	.word	0x20000090

080024cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024d0:	f7ff fff0 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024d4:	4601      	mov	r1, r0
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	08005ec4 	.word	0x08005ec4

080024f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024fc:	f7ff ffda 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 8002500:	4601      	mov	r1, r0
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0adb      	lsrs	r3, r3, #11
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x28>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	08005ec4 	.word	0x08005ec4

08002524 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002530:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800253c:	f7ff fa04 	bl	8001948 <HAL_PWREx_GetVoltageRange>
 8002540:	6178      	str	r0, [r7, #20]
 8002542:	e014      	b.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	4a24      	ldr	r2, [pc, #144]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	6593      	str	r3, [r2, #88]	; 0x58
 8002550:	4b22      	ldr	r3, [pc, #136]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800255c:	f7ff f9f4 	bl	8001948 <HAL_PWREx_GetVoltageRange>
 8002560:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002574:	d10b      	bne.n	800258e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d919      	bls.n	80025b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2ba0      	cmp	r3, #160	; 0xa0
 8002580:	d902      	bls.n	8002588 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002582:	2302      	movs	r3, #2
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	e013      	b.n	80025b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002588:	2301      	movs	r3, #1
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	e010      	b.n	80025b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b80      	cmp	r3, #128	; 0x80
 8002592:	d902      	bls.n	800259a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002594:	2303      	movs	r3, #3
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	e00a      	b.n	80025b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d102      	bne.n	80025a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025a0:	2302      	movs	r3, #2
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	e004      	b.n	80025b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b70      	cmp	r3, #112	; 0x70
 80025aa:	d101      	bne.n	80025b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025ac:	2301      	movs	r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 0207 	bic.w	r2, r3, #7
 80025b8:	4909      	ldr	r1, [pc, #36]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40022000 	.word	0x40022000

080025e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025ec:	2300      	movs	r3, #0
 80025ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025f0:	2300      	movs	r3, #0
 80025f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d03f      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002608:	d01c      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800260a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260e:	d802      	bhi.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00e      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002614:	e01f      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002616:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800261a:	d003      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800261c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002620:	d01c      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002622:	e018      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002624:	4b85      	ldr	r3, [pc, #532]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a84      	ldr	r2, [pc, #528]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002630:	e015      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fab9 	bl	8002bb0 <RCCEx_PLLSAI1_Config>
 800263e:	4603      	mov	r3, r0
 8002640:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002642:	e00c      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3320      	adds	r3, #32
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fba0 	bl	8002d90 <RCCEx_PLLSAI2_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002654:	e003      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	74fb      	strb	r3, [r7, #19]
      break;
 800265a:	e000      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800265c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10b      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002664:	4b75      	ldr	r3, [pc, #468]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002672:	4972      	ldr	r1, [pc, #456]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800267a:	e001      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d03f      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002694:	d01c      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269a:	d802      	bhi.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00e      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xda>
 80026a0:	e01f      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80026a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026a6:	d003      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80026a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026ac:	d01c      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80026ae:	e018      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026b0:	4b62      	ldr	r3, [pc, #392]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a61      	ldr	r2, [pc, #388]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026bc:	e015      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fa73 	bl	8002bb0 <RCCEx_PLLSAI1_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ce:	e00c      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3320      	adds	r3, #32
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fb5a 	bl	8002d90 <RCCEx_PLLSAI2_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026e0:	e003      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	74fb      	strb	r3, [r7, #19]
      break;
 80026e6:	e000      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80026e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026f0:	4b52      	ldr	r3, [pc, #328]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026fe:	494f      	ldr	r1, [pc, #316]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002706:	e001      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a0 	beq.w	800285a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00d      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	4a40      	ldr	r2, [pc, #256]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273e:	6593      	str	r3, [r2, #88]	; 0x58
 8002740:	4b3e      	ldr	r3, [pc, #248]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274c:	2301      	movs	r3, #1
 800274e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002750:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800275c:	f7fd ff78 	bl	8000650 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002762:	e009      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fd ff74 	bl	8000650 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	74fb      	strb	r3, [r7, #19]
        break;
 8002776:	e005      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002778:	4b31      	ldr	r3, [pc, #196]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d15c      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002794:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01f      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d019      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a8:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027d4:	4a19      	ldr	r2, [pc, #100]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fd ff33 	bl	8000650 <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ec:	e00b      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fd ff2f 	bl	8000650 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d902      	bls.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	74fb      	strb	r3, [r7, #19]
            break;
 8002804:	e006      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ec      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800282a:	4904      	ldr	r1, [pc, #16]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002832:	e009      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	74bb      	strb	r3, [r7, #18]
 8002838:	e006      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002848:	7c7b      	ldrb	r3, [r7, #17]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b9e      	ldr	r3, [pc, #632]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	4a9d      	ldr	r2, [pc, #628]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002866:	4b98      	ldr	r3, [pc, #608]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f023 0203 	bic.w	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	4994      	ldr	r1, [pc, #592]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002888:	4b8f      	ldr	r3, [pc, #572]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 020c 	bic.w	r2, r3, #12
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	498c      	ldr	r1, [pc, #560]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028aa:	4b87      	ldr	r3, [pc, #540]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	4983      	ldr	r1, [pc, #524]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028cc:	4b7e      	ldr	r3, [pc, #504]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	497b      	ldr	r1, [pc, #492]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ee:	4b76      	ldr	r3, [pc, #472]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fc:	4972      	ldr	r1, [pc, #456]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002910:	4b6d      	ldr	r3, [pc, #436]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	496a      	ldr	r1, [pc, #424]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002932:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	4961      	ldr	r1, [pc, #388]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002954:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	4959      	ldr	r1, [pc, #356]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002976:	4b54      	ldr	r3, [pc, #336]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002984:	4950      	ldr	r1, [pc, #320]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002998:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	4948      	ldr	r1, [pc, #288]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ba:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	493f      	ldr	r1, [pc, #252]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d028      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029dc:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ea:	4937      	ldr	r1, [pc, #220]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029fa:	d106      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fc:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a31      	ldr	r2, [pc, #196]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a06:	60d3      	str	r3, [r2, #12]
 8002a08:	e011      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f8c8 	bl	8002bb0 <RCCEx_PLLSAI1_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d028      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a3a:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	491f      	ldr	r1, [pc, #124]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a58:	d106      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a64:	60d3      	str	r3, [r2, #12]
 8002a66:	e011      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2101      	movs	r1, #1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 f899 	bl	8002bb0 <RCCEx_PLLSAI1_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a82:	7cfb      	ldrb	r3, [r7, #19]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d02b      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa6:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d109      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a02      	ldr	r2, [pc, #8]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
 8002ac4:	e014      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f867 	bl	8002bb0 <RCCEx_PLLSAI1_Config>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02f      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0a:	4928      	ldr	r1, [pc, #160]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b1a:	d10d      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	2102      	movs	r1, #2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f844 	bl	8002bb0 <RCCEx_PLLSAI1_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d014      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	74bb      	strb	r3, [r7, #18]
 8002b36:	e011      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3320      	adds	r3, #32
 8002b46:	2102      	movs	r1, #2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f921 	bl	8002d90 <RCCEx_PLLSAI2_Config>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b52:	7cfb      	ldrb	r3, [r7, #19]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b58:	7cfb      	ldrb	r3, [r7, #19]
 8002b5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b76:	490d      	ldr	r1, [pc, #52]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b9a:	4904      	ldr	r1, [pc, #16]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ba2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000

08002bb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bbe:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d018      	beq.n	8002bfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bca:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0203 	and.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d10d      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
       ||
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002be2:	4b6a      	ldr	r3, [pc, #424]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
       ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d044      	beq.n	8002c80 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	e041      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d00c      	beq.n	8002c1e <RCCEx_PLLSAI1_Config+0x6e>
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d013      	beq.n	8002c30 <RCCEx_PLLSAI1_Config+0x80>
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d120      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c0c:	4b5f      	ldr	r3, [pc, #380]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d11d      	bne.n	8002c54 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1c:	e01a      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c1e:	4b5b      	ldr	r3, [pc, #364]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2e:	e013      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c30:	4b56      	ldr	r3, [pc, #344]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10f      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c4c:	e006      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      break;
 8002c52:	e004      	b.n	8002c5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c54:	bf00      	nop
 8002c56:	e002      	b.n	8002c5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c58:	bf00      	nop
 8002c5a:	e000      	b.n	8002c5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c5c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10d      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c64:	4b49      	ldr	r3, [pc, #292]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	4944      	ldr	r1, [pc, #272]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d17d      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a40      	ldr	r2, [pc, #256]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c92:	f7fd fcdd 	bl	8000650 <HAL_GetTick>
 8002c96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c98:	e009      	b.n	8002cae <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c9a:	f7fd fcd9 	bl	8000650 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d902      	bls.n	8002cae <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	73fb      	strb	r3, [r7, #15]
        break;
 8002cac:	e005      	b.n	8002cba <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ef      	bne.n	8002c9a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d160      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d111      	bne.n	8002cea <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc6:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6892      	ldr	r2, [r2, #8]
 8002cd6:	0211      	lsls	r1, r2, #8
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68d2      	ldr	r2, [r2, #12]
 8002cdc:	0912      	lsrs	r2, r2, #4
 8002cde:	0452      	lsls	r2, r2, #17
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	492a      	ldr	r1, [pc, #168]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	610b      	str	r3, [r1, #16]
 8002ce8:	e027      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d112      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf0:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6892      	ldr	r2, [r2, #8]
 8002d00:	0211      	lsls	r1, r2, #8
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6912      	ldr	r2, [r2, #16]
 8002d06:	0852      	lsrs	r2, r2, #1
 8002d08:	3a01      	subs	r2, #1
 8002d0a:	0552      	lsls	r2, r2, #21
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	491f      	ldr	r1, [pc, #124]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	610b      	str	r3, [r1, #16]
 8002d14:	e011      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6892      	ldr	r2, [r2, #8]
 8002d26:	0211      	lsls	r1, r2, #8
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6952      	ldr	r2, [r2, #20]
 8002d2c:	0852      	lsrs	r2, r2, #1
 8002d2e:	3a01      	subs	r2, #1
 8002d30:	0652      	lsls	r2, r2, #25
 8002d32:	430a      	orrs	r2, r1
 8002d34:	4915      	ldr	r1, [pc, #84]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7fd fc83 	bl	8000650 <HAL_GetTick>
 8002d4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d4c:	e009      	b.n	8002d62 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d4e:	f7fd fc7f 	bl	8000650 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d902      	bls.n	8002d62 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	73fb      	strb	r3, [r7, #15]
          break;
 8002d60:	e005      	b.n	8002d6e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0ef      	beq.n	8002d4e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d106      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	4903      	ldr	r1, [pc, #12]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000

08002d90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d9e:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d018      	beq.n	8002ddc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0203 	and.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d10d      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dc2:	4b5f      	ldr	r3, [pc, #380]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
       ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d044      	beq.n	8002e60 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
 8002dda:	e041      	b.n	8002e60 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d00c      	beq.n	8002dfe <RCCEx_PLLSAI2_Config+0x6e>
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d013      	beq.n	8002e10 <RCCEx_PLLSAI2_Config+0x80>
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d120      	bne.n	8002e2e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dec:	4b54      	ldr	r3, [pc, #336]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11d      	bne.n	8002e34 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfc:	e01a      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dfe:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d116      	bne.n	8002e38 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0e:	e013      	b.n	8002e38 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e10:	4b4b      	ldr	r3, [pc, #300]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10f      	bne.n	8002e3c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e1c:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e2c:	e006      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
      break;
 8002e32:	e004      	b.n	8002e3e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e34:	bf00      	nop
 8002e36:	e002      	b.n	8002e3e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e38:	bf00      	nop
 8002e3a:	e000      	b.n	8002e3e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e3c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10d      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e44:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6819      	ldr	r1, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	4939      	ldr	r1, [pc, #228]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d167      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e66:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e72:	f7fd fbed 	bl	8000650 <HAL_GetTick>
 8002e76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e78:	e009      	b.n	8002e8e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e7a:	f7fd fbe9 	bl	8000650 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d902      	bls.n	8002e8e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	73fb      	strb	r3, [r7, #15]
        break;
 8002e8c:	e005      	b.n	8002e9a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ef      	bne.n	8002e7a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d14a      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d111      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6892      	ldr	r2, [r2, #8]
 8002eb6:	0211      	lsls	r1, r2, #8
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68d2      	ldr	r2, [r2, #12]
 8002ebc:	0912      	lsrs	r2, r2, #4
 8002ebe:	0452      	lsls	r2, r2, #17
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	491f      	ldr	r1, [pc, #124]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	614b      	str	r3, [r1, #20]
 8002ec8:	e011      	b.n	8002eee <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ed2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	0211      	lsls	r1, r2, #8
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6912      	ldr	r2, [r2, #16]
 8002ee0:	0852      	lsrs	r2, r2, #1
 8002ee2:	3a01      	subs	r2, #1
 8002ee4:	0652      	lsls	r2, r2, #25
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	4915      	ldr	r1, [pc, #84]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fd fba9 	bl	8000650 <HAL_GetTick>
 8002efe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f00:	e009      	b.n	8002f16 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f02:	f7fd fba5 	bl	8000650 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d902      	bls.n	8002f16 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	73fb      	strb	r3, [r7, #15]
          break;
 8002f14:	e005      	b.n	8002f22 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0ef      	beq.n	8002f02 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	4903      	ldr	r1, [pc, #12]	; (8002f40 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000

08002f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e049      	b.n	8002fea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f002 fa00 	bl	8005370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f000 faa6 	bl	80034d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d001      	beq.n	800300c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e04f      	b.n	80030ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01d      	beq.n	800306a <HAL_TIM_Base_Start_IT+0x76>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003036:	d018      	beq.n	800306a <HAL_TIM_Base_Start_IT+0x76>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_TIM_Base_Start_IT+0xc8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_TIM_Base_Start_IT+0x76>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_TIM_Base_Start_IT+0x76>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_TIM_Base_Start_IT+0x76>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_TIM_Base_Start_IT+0x76>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a19      	ldr	r2, [pc, #100]	; (80030cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d115      	bne.n	8003096 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003072:	4013      	ands	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b06      	cmp	r3, #6
 800307a:	d015      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0xb4>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003082:	d011      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003094:	e008      	b.n	80030a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e000      	b.n	80030aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800
 80030c4:	40000c00 	.word	0x40000c00
 80030c8:	40013400 	.word	0x40013400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	00010007 	.word	0x00010007

080030d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d122      	bne.n	8003130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d11b      	bne.n	8003130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0202 	mvn.w	r2, #2
 8003100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f9be 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f9b0 	bl	8003484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f9c1 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d122      	bne.n	8003184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0204 	mvn.w	r2, #4
 8003154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2202      	movs	r2, #2
 800315a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f994 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f986 	bl	8003484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f997 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b08      	cmp	r3, #8
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b08      	cmp	r3, #8
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0208 	mvn.w	r2, #8
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2204      	movs	r2, #4
 80031ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f96a 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f95c 	bl	8003484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f96d 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0210 	mvn.w	r2, #16
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2208      	movs	r2, #8
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f940 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f932 	bl	8003484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f943 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10e      	bne.n	8003258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0201 	mvn.w	r2, #1
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f001 fd54 	bl	8004d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b80      	cmp	r3, #128	; 0x80
 8003264:	d10e      	bne.n	8003284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d107      	bne.n	8003284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 faee 	bl	8003860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003292:	d10e      	bne.n	80032b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329e:	2b80      	cmp	r3, #128	; 0x80
 80032a0:	d107      	bne.n	80032b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fae1 	bl	8003874 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d10e      	bne.n	80032de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d107      	bne.n	80032de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8f1 	bl	80034c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d10e      	bne.n	800330a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d107      	bne.n	800330a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f06f 0220 	mvn.w	r2, #32
 8003302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 faa1 	bl	800384c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_TIM_ConfigClockSource+0x18>
 8003326:	2302      	movs	r3, #2
 8003328:	e0a8      	b.n	800347c <HAL_TIM_ConfigClockSource+0x16a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800334c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003354:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	d067      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x124>
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d80b      	bhi.n	8003382 <HAL_TIM_ConfigClockSource+0x70>
 800336a:	2b10      	cmp	r3, #16
 800336c:	d073      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x144>
 800336e:	2b10      	cmp	r3, #16
 8003370:	d802      	bhi.n	8003378 <HAL_TIM_ConfigClockSource+0x66>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d06f      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003376:	e078      	b.n	800346a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003378:	2b20      	cmp	r3, #32
 800337a:	d06c      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x144>
 800337c:	2b30      	cmp	r3, #48	; 0x30
 800337e:	d06a      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003380:	e073      	b.n	800346a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003382:	2b70      	cmp	r3, #112	; 0x70
 8003384:	d00d      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x90>
 8003386:	2b70      	cmp	r3, #112	; 0x70
 8003388:	d804      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x82>
 800338a:	2b50      	cmp	r3, #80	; 0x50
 800338c:	d033      	beq.n	80033f6 <HAL_TIM_ConfigClockSource+0xe4>
 800338e:	2b60      	cmp	r3, #96	; 0x60
 8003390:	d041      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003392:	e06a      	b.n	800346a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	d066      	beq.n	8003468 <HAL_TIM_ConfigClockSource+0x156>
 800339a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339e:	d017      	beq.n	80033d0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80033a0:	e063      	b.n	800346a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f000 f9a3 	bl	80036fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	609a      	str	r2, [r3, #8]
      break;
 80033ce:	e04c      	b.n	800346a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f000 f98c 	bl	80036fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033f2:	609a      	str	r2, [r3, #8]
      break;
 80033f4:	e039      	b.n	800346a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	461a      	mov	r2, r3
 8003404:	f000 f900 	bl	8003608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2150      	movs	r1, #80	; 0x50
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f959 	bl	80036c6 <TIM_ITRx_SetConfig>
      break;
 8003414:	e029      	b.n	800346a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	461a      	mov	r2, r3
 8003424:	f000 f91f 	bl	8003666 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2160      	movs	r1, #96	; 0x60
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f949 	bl	80036c6 <TIM_ITRx_SetConfig>
      break;
 8003434:	e019      	b.n	800346a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	461a      	mov	r2, r3
 8003444:	f000 f8e0 	bl	8003608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2140      	movs	r1, #64	; 0x40
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f939 	bl	80036c6 <TIM_ITRx_SetConfig>
      break;
 8003454:	e009      	b.n	800346a <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f000 f930 	bl	80036c6 <TIM_ITRx_SetConfig>
        break;
 8003466:	e000      	b.n	800346a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003468:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a40      	ldr	r2, [pc, #256]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f2:	d00f      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3d      	ldr	r2, [pc, #244]	; (80035ec <TIM_Base_SetConfig+0x118>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00b      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3c      	ldr	r2, [pc, #240]	; (80035f0 <TIM_Base_SetConfig+0x11c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d007      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <TIM_Base_SetConfig+0x120>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3a      	ldr	r2, [pc, #232]	; (80035f8 <TIM_Base_SetConfig+0x124>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d108      	bne.n	8003526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2f      	ldr	r2, [pc, #188]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01f      	beq.n	800356e <TIM_Base_SetConfig+0x9a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003534:	d01b      	beq.n	800356e <TIM_Base_SetConfig+0x9a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <TIM_Base_SetConfig+0x118>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d017      	beq.n	800356e <TIM_Base_SetConfig+0x9a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <TIM_Base_SetConfig+0x11c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <TIM_Base_SetConfig+0x9a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <TIM_Base_SetConfig+0x120>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00f      	beq.n	800356e <TIM_Base_SetConfig+0x9a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <TIM_Base_SetConfig+0x124>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00b      	beq.n	800356e <TIM_Base_SetConfig+0x9a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a28      	ldr	r2, [pc, #160]	; (80035fc <TIM_Base_SetConfig+0x128>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <TIM_Base_SetConfig+0x9a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <TIM_Base_SetConfig+0x12c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_Base_SetConfig+0x9a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a26      	ldr	r2, [pc, #152]	; (8003604 <TIM_Base_SetConfig+0x130>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d108      	bne.n	8003580 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00f      	beq.n	80035cc <TIM_Base_SetConfig+0xf8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <TIM_Base_SetConfig+0x124>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00b      	beq.n	80035cc <TIM_Base_SetConfig+0xf8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a11      	ldr	r2, [pc, #68]	; (80035fc <TIM_Base_SetConfig+0x128>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d007      	beq.n	80035cc <TIM_Base_SetConfig+0xf8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a10      	ldr	r2, [pc, #64]	; (8003600 <TIM_Base_SetConfig+0x12c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0xf8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0f      	ldr	r2, [pc, #60]	; (8003604 <TIM_Base_SetConfig+0x130>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d103      	bne.n	80035d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	615a      	str	r2, [r3, #20]
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800
 80035f4:	40000c00 	.word	0x40000c00
 80035f8:	40013400 	.word	0x40013400
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800

08003608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f023 0201 	bic.w	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f023 030a 	bic.w	r3, r3, #10
 8003644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	621a      	str	r2, [r3, #32]
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003666:	b480      	push	{r7}
 8003668:	b087      	sub	sp, #28
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f023 0210 	bic.w	r2, r3, #16
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003690:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	031b      	lsls	r3, r3, #12
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b085      	sub	sp, #20
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f043 0307 	orr.w	r3, r3, #7
 80036e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	609a      	str	r2, [r3, #8]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	021a      	lsls	r2, r3, #8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	431a      	orrs	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4313      	orrs	r3, r2
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	609a      	str	r2, [r3, #8]
}
 8003730:	bf00      	nop
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003750:	2302      	movs	r3, #2
 8003752:	e068      	b.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2e      	ldr	r2, [pc, #184]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2d      	ldr	r2, [pc, #180]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800378e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01d      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c6:	d018      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1b      	ldr	r2, [pc, #108]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1a      	ldr	r2, [pc, #104]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00e      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a18      	ldr	r2, [pc, #96]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d009      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a14      	ldr	r2, [pc, #80]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10c      	bne.n	8003814 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	4313      	orrs	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40013400 	.word	0x40013400
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40014000 	.word	0x40014000

0800384c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e040      	b.n	800391c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f001 fd84 	bl	80053b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8c0 	bl	8003a4c <UART_SetConfig>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e022      	b.n	800391c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fb3e 	bl	8003f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fbc5 	bl	80040a4 <UART_CheckIdleState>
 800391a:	4603      	mov	r3, r0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	2b20      	cmp	r3, #32
 800393a:	f040 8081 	bne.w	8003a40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_UART_Transmit+0x26>
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e079      	b.n	8003a42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_UART_Transmit+0x38>
 8003958:	2302      	movs	r3, #2
 800395a:	e072      	b.n	8003a42 <HAL_UART_Transmit+0x11e>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2221      	movs	r2, #33	; 0x21
 800396e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003970:	f7fc fe6e 	bl	8000650 <HAL_GetTick>
 8003974:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	88fa      	ldrh	r2, [r7, #6]
 800397a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	88fa      	ldrh	r2, [r7, #6]
 8003982:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398e:	d108      	bne.n	80039a2 <HAL_UART_Transmit+0x7e>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	e003      	b.n	80039aa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80039b2:	e02d      	b.n	8003a10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2200      	movs	r2, #0
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fbb5 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e039      	b.n	8003a42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	881a      	ldrh	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e0:	b292      	uxth	r2, r2
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	3302      	adds	r3, #2
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	e008      	b.n	80039fe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b292      	uxth	r2, r2
 80039f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3301      	adds	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1cb      	bne.n	80039b4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2200      	movs	r2, #0
 8003a24:	2140      	movs	r1, #64	; 0x40
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fb81 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e005      	b.n	8003a42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a4c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003a50:	b088      	sub	sp, #32
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4bac      	ldr	r3, [pc, #688]	; (8003d2c <UART_SetConfig+0x2e0>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	69f9      	ldr	r1, [r7, #28]
 8003a82:	430b      	orrs	r3, r1
 8003a84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4aa2      	ldr	r2, [pc, #648]	; (8003d30 <UART_SetConfig+0x2e4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a99      	ldr	r2, [pc, #612]	; (8003d34 <UART_SetConfig+0x2e8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d121      	bne.n	8003b18 <UART_SetConfig+0xcc>
 8003ad4:	4b98      	ldr	r3, [pc, #608]	; (8003d38 <UART_SetConfig+0x2ec>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d816      	bhi.n	8003b10 <UART_SetConfig+0xc4>
 8003ae2:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <UART_SetConfig+0x9c>)
 8003ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae8:	08003af9 	.word	0x08003af9
 8003aec:	08003b05 	.word	0x08003b05
 8003af0:	08003aff 	.word	0x08003aff
 8003af4:	08003b0b 	.word	0x08003b0b
 8003af8:	2301      	movs	r3, #1
 8003afa:	76fb      	strb	r3, [r7, #27]
 8003afc:	e0e8      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003afe:	2302      	movs	r3, #2
 8003b00:	76fb      	strb	r3, [r7, #27]
 8003b02:	e0e5      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003b04:	2304      	movs	r3, #4
 8003b06:	76fb      	strb	r3, [r7, #27]
 8003b08:	e0e2      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	76fb      	strb	r3, [r7, #27]
 8003b0e:	e0df      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003b10:	2310      	movs	r3, #16
 8003b12:	76fb      	strb	r3, [r7, #27]
 8003b14:	bf00      	nop
 8003b16:	e0db      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a87      	ldr	r2, [pc, #540]	; (8003d3c <UART_SetConfig+0x2f0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d134      	bne.n	8003b8c <UART_SetConfig+0x140>
 8003b22:	4b85      	ldr	r3, [pc, #532]	; (8003d38 <UART_SetConfig+0x2ec>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d829      	bhi.n	8003b84 <UART_SetConfig+0x138>
 8003b30:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <UART_SetConfig+0xec>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003b85 	.word	0x08003b85
 8003b40:	08003b85 	.word	0x08003b85
 8003b44:	08003b85 	.word	0x08003b85
 8003b48:	08003b79 	.word	0x08003b79
 8003b4c:	08003b85 	.word	0x08003b85
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003b85 	.word	0x08003b85
 8003b58:	08003b73 	.word	0x08003b73
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b85 	.word	0x08003b85
 8003b64:	08003b85 	.word	0x08003b85
 8003b68:	08003b7f 	.word	0x08003b7f
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	76fb      	strb	r3, [r7, #27]
 8003b70:	e0ae      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003b72:	2302      	movs	r3, #2
 8003b74:	76fb      	strb	r3, [r7, #27]
 8003b76:	e0ab      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	e0a8      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003b7e:	2308      	movs	r3, #8
 8003b80:	76fb      	strb	r3, [r7, #27]
 8003b82:	e0a5      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003b84:	2310      	movs	r3, #16
 8003b86:	76fb      	strb	r3, [r7, #27]
 8003b88:	bf00      	nop
 8003b8a:	e0a1      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6b      	ldr	r2, [pc, #428]	; (8003d40 <UART_SetConfig+0x2f4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d120      	bne.n	8003bd8 <UART_SetConfig+0x18c>
 8003b96:	4b68      	ldr	r3, [pc, #416]	; (8003d38 <UART_SetConfig+0x2ec>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d00f      	beq.n	8003bc4 <UART_SetConfig+0x178>
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d802      	bhi.n	8003bae <UART_SetConfig+0x162>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <UART_SetConfig+0x16c>
 8003bac:	e010      	b.n	8003bd0 <UART_SetConfig+0x184>
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d005      	beq.n	8003bbe <UART_SetConfig+0x172>
 8003bb2:	2b30      	cmp	r3, #48	; 0x30
 8003bb4:	d009      	beq.n	8003bca <UART_SetConfig+0x17e>
 8003bb6:	e00b      	b.n	8003bd0 <UART_SetConfig+0x184>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	76fb      	strb	r3, [r7, #27]
 8003bbc:	e088      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	76fb      	strb	r3, [r7, #27]
 8003bc2:	e085      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	76fb      	strb	r3, [r7, #27]
 8003bc8:	e082      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	76fb      	strb	r3, [r7, #27]
 8003bce:	e07f      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	76fb      	strb	r3, [r7, #27]
 8003bd4:	bf00      	nop
 8003bd6:	e07b      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a59      	ldr	r2, [pc, #356]	; (8003d44 <UART_SetConfig+0x2f8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d120      	bne.n	8003c24 <UART_SetConfig+0x1d8>
 8003be2:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <UART_SetConfig+0x2ec>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d00f      	beq.n	8003c10 <UART_SetConfig+0x1c4>
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d802      	bhi.n	8003bfa <UART_SetConfig+0x1ae>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <UART_SetConfig+0x1b8>
 8003bf8:	e010      	b.n	8003c1c <UART_SetConfig+0x1d0>
 8003bfa:	2b80      	cmp	r3, #128	; 0x80
 8003bfc:	d005      	beq.n	8003c0a <UART_SetConfig+0x1be>
 8003bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8003c00:	d009      	beq.n	8003c16 <UART_SetConfig+0x1ca>
 8003c02:	e00b      	b.n	8003c1c <UART_SetConfig+0x1d0>
 8003c04:	2300      	movs	r3, #0
 8003c06:	76fb      	strb	r3, [r7, #27]
 8003c08:	e062      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	76fb      	strb	r3, [r7, #27]
 8003c0e:	e05f      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003c10:	2304      	movs	r3, #4
 8003c12:	76fb      	strb	r3, [r7, #27]
 8003c14:	e05c      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003c16:	2308      	movs	r3, #8
 8003c18:	76fb      	strb	r3, [r7, #27]
 8003c1a:	e059      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	76fb      	strb	r3, [r7, #27]
 8003c20:	bf00      	nop
 8003c22:	e055      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a47      	ldr	r2, [pc, #284]	; (8003d48 <UART_SetConfig+0x2fc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d124      	bne.n	8003c78 <UART_SetConfig+0x22c>
 8003c2e:	4b42      	ldr	r3, [pc, #264]	; (8003d38 <UART_SetConfig+0x2ec>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3c:	d012      	beq.n	8003c64 <UART_SetConfig+0x218>
 8003c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c42:	d802      	bhi.n	8003c4a <UART_SetConfig+0x1fe>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <UART_SetConfig+0x20c>
 8003c48:	e012      	b.n	8003c70 <UART_SetConfig+0x224>
 8003c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4e:	d006      	beq.n	8003c5e <UART_SetConfig+0x212>
 8003c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c54:	d009      	beq.n	8003c6a <UART_SetConfig+0x21e>
 8003c56:	e00b      	b.n	8003c70 <UART_SetConfig+0x224>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	76fb      	strb	r3, [r7, #27]
 8003c5c:	e038      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	76fb      	strb	r3, [r7, #27]
 8003c62:	e035      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003c64:	2304      	movs	r3, #4
 8003c66:	76fb      	strb	r3, [r7, #27]
 8003c68:	e032      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	76fb      	strb	r3, [r7, #27]
 8003c6e:	e02f      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003c70:	2310      	movs	r3, #16
 8003c72:	76fb      	strb	r3, [r7, #27]
 8003c74:	bf00      	nop
 8003c76:	e02b      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2c      	ldr	r2, [pc, #176]	; (8003d30 <UART_SetConfig+0x2e4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d124      	bne.n	8003ccc <UART_SetConfig+0x280>
 8003c82:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <UART_SetConfig+0x2ec>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c90:	d012      	beq.n	8003cb8 <UART_SetConfig+0x26c>
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c96:	d802      	bhi.n	8003c9e <UART_SetConfig+0x252>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <UART_SetConfig+0x260>
 8003c9c:	e012      	b.n	8003cc4 <UART_SetConfig+0x278>
 8003c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca2:	d006      	beq.n	8003cb2 <UART_SetConfig+0x266>
 8003ca4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ca8:	d009      	beq.n	8003cbe <UART_SetConfig+0x272>
 8003caa:	e00b      	b.n	8003cc4 <UART_SetConfig+0x278>
 8003cac:	2300      	movs	r3, #0
 8003cae:	76fb      	strb	r3, [r7, #27]
 8003cb0:	e00e      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	76fb      	strb	r3, [r7, #27]
 8003cb6:	e00b      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	76fb      	strb	r3, [r7, #27]
 8003cbc:	e008      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	76fb      	strb	r3, [r7, #27]
 8003cc2:	e005      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	76fb      	strb	r3, [r7, #27]
 8003cc8:	bf00      	nop
 8003cca:	e001      	b.n	8003cd0 <UART_SetConfig+0x284>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <UART_SetConfig+0x2e4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	f040 8087 	bne.w	8003dea <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cdc:	7efb      	ldrb	r3, [r7, #27]
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d836      	bhi.n	8003d50 <UART_SetConfig+0x304>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <UART_SetConfig+0x29c>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d51 	.word	0x08003d51
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d51 	.word	0x08003d51
 8003cf8:	08003d1b 	.word	0x08003d1b
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	08003d51 	.word	0x08003d51
 8003d08:	08003d23 	.word	0x08003d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f7fe fbde 	bl	80024cc <HAL_RCC_GetPCLK1Freq>
 8003d10:	6178      	str	r0, [r7, #20]
        break;
 8003d12:	e022      	b.n	8003d5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <UART_SetConfig+0x300>)
 8003d16:	617b      	str	r3, [r7, #20]
        break;
 8003d18:	e01f      	b.n	8003d5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7fe fb41 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003d1e:	6178      	str	r0, [r7, #20]
        break;
 8003d20:	e01b      	b.n	8003d5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d26:	617b      	str	r3, [r7, #20]
        break;
 8003d28:	e017      	b.n	8003d5a <UART_SetConfig+0x30e>
 8003d2a:	bf00      	nop
 8003d2c:	efff69f3 	.word	0xefff69f3
 8003d30:	40008000 	.word	0x40008000
 8003d34:	40013800 	.word	0x40013800
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40004400 	.word	0x40004400
 8003d40:	40004800 	.word	0x40004800
 8003d44:	40004c00 	.word	0x40004c00
 8003d48:	40005000 	.word	0x40005000
 8003d4c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	76bb      	strb	r3, [r7, #26]
        break;
 8003d58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80f1 	beq.w	8003f44 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4413      	add	r3, r2
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d305      	bcc.n	8003d7e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d902      	bls.n	8003d84 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	76bb      	strb	r3, [r7, #26]
 8003d82:	e0df      	b.n	8003f44 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4619      	mov	r1, r3
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	f04f 0400 	mov.w	r4, #0
 8003d94:	0214      	lsls	r4, r2, #8
 8003d96:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d9a:	020b      	lsls	r3, r1, #8
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6852      	ldr	r2, [r2, #4]
 8003da0:	0852      	lsrs	r2, r2, #1
 8003da2:	4611      	mov	r1, r2
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	eb13 0b01 	adds.w	fp, r3, r1
 8003dac:	eb44 0c02 	adc.w	ip, r4, r2
 8003db0:	4658      	mov	r0, fp
 8003db2:	4661      	mov	r1, ip
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f04f 0400 	mov.w	r4, #0
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	f7fc fa5e 	bl	8000280 <__aeabi_uldivmod>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd0:	d308      	bcc.n	8003de4 <UART_SetConfig+0x398>
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd8:	d204      	bcs.n	8003de4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	e0af      	b.n	8003f44 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	76bb      	strb	r3, [r7, #26]
 8003de8:	e0ac      	b.n	8003f44 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df2:	d15b      	bne.n	8003eac <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003df4:	7efb      	ldrb	r3, [r7, #27]
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d827      	bhi.n	8003e4a <UART_SetConfig+0x3fe>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x3b4>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e2d 	.word	0x08003e2d
 8003e08:	08003e35 	.word	0x08003e35
 8003e0c:	08003e4b 	.word	0x08003e4b
 8003e10:	08003e3b 	.word	0x08003e3b
 8003e14:	08003e4b 	.word	0x08003e4b
 8003e18:	08003e4b 	.word	0x08003e4b
 8003e1c:	08003e4b 	.word	0x08003e4b
 8003e20:	08003e43 	.word	0x08003e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7fe fb52 	bl	80024cc <HAL_RCC_GetPCLK1Freq>
 8003e28:	6178      	str	r0, [r7, #20]
        break;
 8003e2a:	e013      	b.n	8003e54 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7fe fb64 	bl	80024f8 <HAL_RCC_GetPCLK2Freq>
 8003e30:	6178      	str	r0, [r7, #20]
        break;
 8003e32:	e00f      	b.n	8003e54 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e34:	4b49      	ldr	r3, [pc, #292]	; (8003f5c <UART_SetConfig+0x510>)
 8003e36:	617b      	str	r3, [r7, #20]
        break;
 8003e38:	e00c      	b.n	8003e54 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3a:	f7fe fab1 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003e3e:	6178      	str	r0, [r7, #20]
        break;
 8003e40:	e008      	b.n	8003e54 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e46:	617b      	str	r3, [r7, #20]
        break;
 8003e48:	e004      	b.n	8003e54 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	76bb      	strb	r3, [r7, #26]
        break;
 8003e52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d074      	beq.n	8003f44 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	005a      	lsls	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b0f      	cmp	r3, #15
 8003e76:	d916      	bls.n	8003ea6 <UART_SetConfig+0x45a>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7e:	d212      	bcs.n	8003ea6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f023 030f 	bic.w	r3, r3, #15
 8003e88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	89fb      	ldrh	r3, [r7, #14]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	89fa      	ldrh	r2, [r7, #14]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	e04e      	b.n	8003f44 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	76bb      	strb	r3, [r7, #26]
 8003eaa:	e04b      	b.n	8003f44 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eac:	7efb      	ldrb	r3, [r7, #27]
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d827      	bhi.n	8003f02 <UART_SetConfig+0x4b6>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <UART_SetConfig+0x46c>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003edd 	.word	0x08003edd
 8003ebc:	08003ee5 	.word	0x08003ee5
 8003ec0:	08003eed 	.word	0x08003eed
 8003ec4:	08003f03 	.word	0x08003f03
 8003ec8:	08003ef3 	.word	0x08003ef3
 8003ecc:	08003f03 	.word	0x08003f03
 8003ed0:	08003f03 	.word	0x08003f03
 8003ed4:	08003f03 	.word	0x08003f03
 8003ed8:	08003efb 	.word	0x08003efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003edc:	f7fe faf6 	bl	80024cc <HAL_RCC_GetPCLK1Freq>
 8003ee0:	6178      	str	r0, [r7, #20]
        break;
 8003ee2:	e013      	b.n	8003f0c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ee4:	f7fe fb08 	bl	80024f8 <HAL_RCC_GetPCLK2Freq>
 8003ee8:	6178      	str	r0, [r7, #20]
        break;
 8003eea:	e00f      	b.n	8003f0c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <UART_SetConfig+0x510>)
 8003eee:	617b      	str	r3, [r7, #20]
        break;
 8003ef0:	e00c      	b.n	8003f0c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ef2:	f7fe fa55 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003ef6:	6178      	str	r0, [r7, #20]
        break;
 8003ef8:	e008      	b.n	8003f0c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003efe:	617b      	str	r3, [r7, #20]
        break;
 8003f00:	e004      	b.n	8003f0c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	76bb      	strb	r3, [r7, #26]
        break;
 8003f0a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d018      	beq.n	8003f44 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	085a      	lsrs	r2, r3, #1
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	441a      	add	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b0f      	cmp	r3, #15
 8003f2c:	d908      	bls.n	8003f40 <UART_SetConfig+0x4f4>
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d204      	bcs.n	8003f40 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	e001      	b.n	8003f44 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f50:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f5c:	00f42400 	.word	0x00f42400

08003f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01a      	beq.n	8004076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405e:	d10a      	bne.n	8004076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
  }
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040b2:	f7fc facd 	bl	8000650 <HAL_GetTick>
 80040b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d10e      	bne.n	80040e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f82a 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e020      	b.n	8004126 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d10e      	bne.n	8004110 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f814 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e00a      	b.n	8004126 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	4613      	mov	r3, r2
 800413c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	e05d      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004146:	d059      	beq.n	80041fc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004148:	f7fc fa82 	bl	8000650 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <UART_WaitOnFlagUntilTimeout+0x30>
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11b      	bne.n	8004196 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800416c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e042      	b.n	800421c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d02b      	beq.n	80041fc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b2:	d123      	bne.n	80041fc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e00f      	b.n	800421c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4013      	ands	r3, r2
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	429a      	cmp	r2, r3
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	429a      	cmp	r2, r3
 8004218:	d092      	beq.n	8004140 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HTS221_H_Init>:
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2120      	movs	r1, #32
 8004234:	4618      	mov	r0, r3
 8004236:	f000 feff 	bl	8005038 <SENSOR_IO_Read>
 800423a:	4603      	mov	r3, r0
 800423c:	73fb      	strb	r3, [r7, #15]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	73fb      	strb	r3, [r7, #15]
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	f023 0303 	bic.w	r3, r3, #3
 8004254:	73fb      	strb	r3, [r7, #15]
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004264:	73fb      	strb	r3, [r7, #15]
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	7bfa      	ldrb	r2, [r7, #15]
 800426c:	2120      	movs	r1, #32
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fec8 	bl	8005004 <SENSOR_IO_Write>
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HTS221_H_ReadID>:
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	80fb      	strh	r3, [r7, #6]
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
 800428a:	f000 feb1 	bl	8004ff0 <SENSOR_IO_Init>
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	210f      	movs	r1, #15
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fecf 	bl	8005038 <SENSOR_IO_Read>
 800429a:	4603      	mov	r3, r0
 800429c:	73fb      	strb	r3, [r7, #15]
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HTS221_H_ReadHumidity>:
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	80fb      	strh	r3, [r7, #6]
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	b2d8      	uxtb	r0, r3
 80042b6:	f107 020c 	add.w	r2, r7, #12
 80042ba:	2302      	movs	r3, #2
 80042bc:	21b0      	movs	r1, #176	; 0xb0
 80042be:	f000 fed9 	bl	8005074 <SENSOR_IO_ReadMultiple>
 80042c2:	7b3b      	ldrb	r3, [r7, #12]
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	83fb      	strh	r3, [r7, #30]
 80042ca:	7b7b      	ldrb	r3, [r7, #13]
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	83bb      	strh	r3, [r7, #28]
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	b2d8      	uxtb	r0, r3
 80042d6:	f107 020c 	add.w	r2, r7, #12
 80042da:	2302      	movs	r3, #2
 80042dc:	21b6      	movs	r1, #182	; 0xb6
 80042de:	f000 fec9 	bl	8005074 <SENSOR_IO_ReadMultiple>
 80042e2:	7b7b      	ldrb	r3, [r7, #13]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	b21a      	sxth	r2, r3
 80042e8:	7b3b      	ldrb	r3, [r7, #12]
 80042ea:	b21b      	sxth	r3, r3
 80042ec:	4313      	orrs	r3, r2
 80042ee:	837b      	strh	r3, [r7, #26]
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	b2d8      	uxtb	r0, r3
 80042f4:	f107 020c 	add.w	r2, r7, #12
 80042f8:	2302      	movs	r3, #2
 80042fa:	21ba      	movs	r1, #186	; 0xba
 80042fc:	f000 feba 	bl	8005074 <SENSOR_IO_ReadMultiple>
 8004300:	7b7b      	ldrb	r3, [r7, #13]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	b21a      	sxth	r2, r3
 8004306:	7b3b      	ldrb	r3, [r7, #12]
 8004308:	b21b      	sxth	r3, r3
 800430a:	4313      	orrs	r3, r2
 800430c:	833b      	strh	r3, [r7, #24]
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	b2d8      	uxtb	r0, r3
 8004312:	f107 020c 	add.w	r2, r7, #12
 8004316:	2302      	movs	r3, #2
 8004318:	21a8      	movs	r1, #168	; 0xa8
 800431a:	f000 feab 	bl	8005074 <SENSOR_IO_ReadMultiple>
 800431e:	7b7b      	ldrb	r3, [r7, #13]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	b21a      	sxth	r2, r3
 8004324:	7b3b      	ldrb	r3, [r7, #12]
 8004326:	b21b      	sxth	r3, r3
 8004328:	4313      	orrs	r3, r2
 800432a:	82fb      	strh	r3, [r7, #22]
 800432c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004330:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800433e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004342:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004350:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004354:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004358:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800437a:	edc7 7a04 	vstr	s15, [r7, #16]
 800437e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004382:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800438a:	edc7 7a04 	vstr	s15, [r7, #16]
 800438e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004392:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80043d8 <HTS221_H_ReadHumidity+0x130>
 8004396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439e:	dd01      	ble.n	80043a4 <HTS221_H_ReadHumidity+0xfc>
 80043a0:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <HTS221_H_ReadHumidity+0x134>)
 80043a2:	e00a      	b.n	80043ba <HTS221_H_ReadHumidity+0x112>
 80043a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80043a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b0:	d502      	bpl.n	80043b8 <HTS221_H_ReadHumidity+0x110>
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e000      	b.n	80043ba <HTS221_H_ReadHumidity+0x112>
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80043c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80043c8:	eef0 7a66 	vmov.f32	s15, s13
 80043cc:	eeb0 0a67 	vmov.f32	s0, s15
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	447a0000 	.word	0x447a0000
 80043dc:	447a0000 	.word	0x447a0000

080043e0 <HTS221_T_Init>:
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	6039      	str	r1, [r7, #0]
 80043ea:	80fb      	strh	r3, [r7, #6]
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2120      	movs	r1, #32
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fe20 	bl	8005038 <SENSOR_IO_Read>
 80043f8:	4603      	mov	r3, r0
 80043fa:	73fb      	strb	r3, [r7, #15]
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	f023 0304 	bic.w	r3, r3, #4
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	f043 0304 	orr.w	r3, r3, #4
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	f023 0303 	bic.w	r3, r3, #3
 8004412:	73fb      	strb	r3, [r7, #15]
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004422:	73fb      	strb	r3, [r7, #15]
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	7bfa      	ldrb	r2, [r7, #15]
 800442a:	2120      	movs	r1, #32
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fde9 	bl	8005004 <SENSOR_IO_Write>
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HTS221_T_ReadTemp>:
 800443a:	b580      	push	{r7, lr}
 800443c:	b088      	sub	sp, #32
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	80fb      	strh	r3, [r7, #6]
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	b2d8      	uxtb	r0, r3
 8004448:	f107 0208 	add.w	r2, r7, #8
 800444c:	2302      	movs	r3, #2
 800444e:	21b2      	movs	r1, #178	; 0xb2
 8004450:	f000 fe10 	bl	8005074 <SENSOR_IO_ReadMultiple>
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2135      	movs	r1, #53	; 0x35
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fdec 	bl	8005038 <SENSOR_IO_Read>
 8004460:	4603      	mov	r3, r0
 8004462:	77fb      	strb	r3, [r7, #31]
 8004464:	7ffb      	ldrb	r3, [r7, #31]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	b21b      	sxth	r3, r3
 800446a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446e:	b21a      	sxth	r2, r3
 8004470:	7a3b      	ldrb	r3, [r7, #8]
 8004472:	b21b      	sxth	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	83bb      	strh	r3, [r7, #28]
 8004478:	7ffb      	ldrb	r3, [r7, #31]
 800447a:	019b      	lsls	r3, r3, #6
 800447c:	b21b      	sxth	r3, r3
 800447e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004482:	b21a      	sxth	r2, r3
 8004484:	7a7b      	ldrb	r3, [r7, #9]
 8004486:	b21b      	sxth	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	837b      	strh	r3, [r7, #26]
 800448c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004490:	10db      	asrs	r3, r3, #3
 8004492:	833b      	strh	r3, [r7, #24]
 8004494:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004498:	10db      	asrs	r3, r3, #3
 800449a:	82fb      	strh	r3, [r7, #22]
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	b2d8      	uxtb	r0, r3
 80044a0:	f107 0208 	add.w	r2, r7, #8
 80044a4:	2304      	movs	r3, #4
 80044a6:	21bc      	movs	r1, #188	; 0xbc
 80044a8:	f000 fde4 	bl	8005074 <SENSOR_IO_ReadMultiple>
 80044ac:	7a7b      	ldrb	r3, [r7, #9]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	b21a      	sxth	r2, r3
 80044b2:	7a3b      	ldrb	r3, [r7, #8]
 80044b4:	b21b      	sxth	r3, r3
 80044b6:	4313      	orrs	r3, r2
 80044b8:	82bb      	strh	r3, [r7, #20]
 80044ba:	7afb      	ldrb	r3, [r7, #11]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	b21a      	sxth	r2, r3
 80044c0:	7abb      	ldrb	r3, [r7, #10]
 80044c2:	b21b      	sxth	r3, r3
 80044c4:	4313      	orrs	r3, r2
 80044c6:	827b      	strh	r3, [r7, #18]
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	b2d8      	uxtb	r0, r3
 80044cc:	f107 0208 	add.w	r2, r7, #8
 80044d0:	2302      	movs	r3, #2
 80044d2:	21aa      	movs	r1, #170	; 0xaa
 80044d4:	f000 fdce 	bl	8005074 <SENSOR_IO_ReadMultiple>
 80044d8:	7a7b      	ldrb	r3, [r7, #9]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	b21a      	sxth	r2, r3
 80044de:	7a3b      	ldrb	r3, [r7, #8]
 80044e0:	b21b      	sxth	r3, r3
 80044e2:	4313      	orrs	r3, r2
 80044e4:	823b      	strh	r3, [r7, #16]
 80044e6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80044ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800450e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004512:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004524:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004528:	ee07 3a90 	vmov	s15, r3
 800452c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004534:	edc7 7a03 	vstr	s15, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eeb0 0a67 	vmov.f32	s0, s15
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <LSM6DSL_AccInit>:
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	80fb      	strh	r3, [r7, #6]
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]
 8004556:	2110      	movs	r1, #16
 8004558:	20d4      	movs	r0, #212	; 0xd4
 800455a:	f000 fd6d 	bl	8005038 <SENSOR_IO_Read>
 800455e:	4603      	mov	r3, r0
 8004560:	73bb      	strb	r3, [r7, #14]
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	73fb      	strb	r3, [r7, #15]
 8004566:	7bbb      	ldrb	r3, [r7, #14]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	73bb      	strb	r3, [r7, #14]
 800456e:	7bba      	ldrb	r2, [r7, #14]
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	4313      	orrs	r3, r2
 8004574:	73bb      	strb	r3, [r7, #14]
 8004576:	7bbb      	ldrb	r3, [r7, #14]
 8004578:	461a      	mov	r2, r3
 800457a:	2110      	movs	r1, #16
 800457c:	20d4      	movs	r0, #212	; 0xd4
 800457e:	f000 fd41 	bl	8005004 <SENSOR_IO_Write>
 8004582:	2112      	movs	r1, #18
 8004584:	20d4      	movs	r0, #212	; 0xd4
 8004586:	f000 fd57 	bl	8005038 <SENSOR_IO_Read>
 800458a:	4603      	mov	r3, r0
 800458c:	73bb      	strb	r3, [r7, #14]
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	b29b      	uxth	r3, r3
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	7bbb      	ldrb	r3, [r7, #14]
 8004598:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800459c:	73bb      	strb	r3, [r7, #14]
 800459e:	7bba      	ldrb	r2, [r7, #14]
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	73bb      	strb	r3, [r7, #14]
 80045a6:	7bbb      	ldrb	r3, [r7, #14]
 80045a8:	461a      	mov	r2, r3
 80045aa:	2112      	movs	r1, #18
 80045ac:	20d4      	movs	r0, #212	; 0xd4
 80045ae:	f000 fd29 	bl	8005004 <SENSOR_IO_Write>
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <LSM6DSL_AccDeInit>:
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	2300      	movs	r3, #0
 80045c2:	71fb      	strb	r3, [r7, #7]
 80045c4:	2110      	movs	r1, #16
 80045c6:	20d4      	movs	r0, #212	; 0xd4
 80045c8:	f000 fd36 	bl	8005038 <SENSOR_IO_Read>
 80045cc:	4603      	mov	r3, r0
 80045ce:	71fb      	strb	r3, [r7, #7]
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	71fb      	strb	r3, [r7, #7]
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	461a      	mov	r2, r3
 80045dc:	2110      	movs	r1, #16
 80045de:	20d4      	movs	r0, #212	; 0xd4
 80045e0:	f000 fd10 	bl	8005004 <SENSOR_IO_Write>
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <LSM6DSL_AccReadID>:
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	f000 fcfe 	bl	8004ff0 <SENSOR_IO_Init>
 80045f4:	210f      	movs	r1, #15
 80045f6:	20d4      	movs	r0, #212	; 0xd4
 80045f8:	f000 fd1e 	bl	8005038 <SENSOR_IO_Read>
 80045fc:	4603      	mov	r3, r0
 80045fe:	4618      	mov	r0, r3
 8004600:	bd80      	pop	{r7, pc}

08004602 <LSM6DSL_AccLowPower>:
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	4603      	mov	r3, r0
 800460a:	80fb      	strh	r3, [r7, #6]
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	2115      	movs	r1, #21
 8004612:	20d4      	movs	r0, #212	; 0xd4
 8004614:	f000 fd10 	bl	8005038 <SENSOR_IO_Read>
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	f023 0310 	bic.w	r3, r3, #16
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <LSM6DSL_AccLowPower+0x30>
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	f043 0310 	orr.w	r3, r3, #16
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	461a      	mov	r2, r3
 8004636:	2115      	movs	r1, #21
 8004638:	20d4      	movs	r0, #212	; 0xd4
 800463a:	f000 fce3 	bl	8005004 <SENSOR_IO_Write>
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <LSM6DSL_AccReadXYZ>:
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	2300      	movs	r3, #0
 8004652:	75fb      	strb	r3, [r7, #23]
 8004654:	2300      	movs	r3, #0
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	2110      	movs	r1, #16
 8004660:	20d4      	movs	r0, #212	; 0xd4
 8004662:	f000 fce9 	bl	8005038 <SENSOR_IO_Read>
 8004666:	4603      	mov	r3, r0
 8004668:	75fb      	strb	r3, [r7, #23]
 800466a:	f107 0208 	add.w	r2, r7, #8
 800466e:	2306      	movs	r3, #6
 8004670:	2128      	movs	r1, #40	; 0x28
 8004672:	20d4      	movs	r0, #212	; 0xd4
 8004674:	f000 fcfe 	bl	8005074 <SENSOR_IO_ReadMultiple>
 8004678:	2300      	movs	r3, #0
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e01f      	b.n	80046be <LSM6DSL_AccReadXYZ+0x76>
 800467e:	7ffb      	ldrb	r3, [r7, #31]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	3301      	adds	r3, #1
 8004684:	f107 0220 	add.w	r2, r7, #32
 8004688:	4413      	add	r3, r2
 800468a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800468e:	b29b      	uxth	r3, r3
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	b29a      	uxth	r2, r3
 8004694:	7ffb      	ldrb	r3, [r7, #31]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	f107 0120 	add.w	r1, r7, #32
 800469c:	440b      	add	r3, r1
 800469e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	4413      	add	r3, r2
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	7ffb      	ldrb	r3, [r7, #31]
 80046aa:	b212      	sxth	r2, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	f107 0120 	add.w	r1, r7, #32
 80046b2:	440b      	add	r3, r1
 80046b4:	f823 2c10 	strh.w	r2, [r3, #-16]
 80046b8:	7ffb      	ldrb	r3, [r7, #31]
 80046ba:	3301      	adds	r3, #1
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	7ffb      	ldrb	r3, [r7, #31]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d9dc      	bls.n	800467e <LSM6DSL_AccReadXYZ+0x36>
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b0c      	cmp	r3, #12
 80046cc:	d828      	bhi.n	8004720 <LSM6DSL_AccReadXYZ+0xd8>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <LSM6DSL_AccReadXYZ+0x8c>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	08004709 	.word	0x08004709
 80046d8:	08004721 	.word	0x08004721
 80046dc:	08004721 	.word	0x08004721
 80046e0:	08004721 	.word	0x08004721
 80046e4:	0800471b 	.word	0x0800471b
 80046e8:	08004721 	.word	0x08004721
 80046ec:	08004721 	.word	0x08004721
 80046f0:	08004721 	.word	0x08004721
 80046f4:	0800470f 	.word	0x0800470f
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004721 	.word	0x08004721
 8004704:	08004715 	.word	0x08004715
 8004708:	4b18      	ldr	r3, [pc, #96]	; (800476c <LSM6DSL_AccReadXYZ+0x124>)
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e008      	b.n	8004720 <LSM6DSL_AccReadXYZ+0xd8>
 800470e:	4b18      	ldr	r3, [pc, #96]	; (8004770 <LSM6DSL_AccReadXYZ+0x128>)
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e005      	b.n	8004720 <LSM6DSL_AccReadXYZ+0xd8>
 8004714:	4b17      	ldr	r3, [pc, #92]	; (8004774 <LSM6DSL_AccReadXYZ+0x12c>)
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	e002      	b.n	8004720 <LSM6DSL_AccReadXYZ+0xd8>
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <LSM6DSL_AccReadXYZ+0x130>)
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	bf00      	nop
 8004720:	2300      	movs	r3, #0
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e01b      	b.n	800475e <LSM6DSL_AccReadXYZ+0x116>
 8004726:	7ffb      	ldrb	r3, [r7, #31]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	f107 0220 	add.w	r2, r7, #32
 800472e:	4413      	add	r3, r2
 8004730:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004734:	ee07 3a90 	vmov	s15, r3
 8004738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800473c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004744:	7ffb      	ldrb	r3, [r7, #31]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004750:	ee17 2a90 	vmov	r2, s15
 8004754:	b212      	sxth	r2, r2
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	7ffb      	ldrb	r3, [r7, #31]
 800475a:	3301      	adds	r3, #1
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	7ffb      	ldrb	r3, [r7, #31]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d9e0      	bls.n	8004726 <LSM6DSL_AccReadXYZ+0xde>
 8004764:	bf00      	nop
 8004766:	3720      	adds	r7, #32
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	3d79db23 	.word	0x3d79db23
 8004770:	3df9db23 	.word	0x3df9db23
 8004774:	3e79db23 	.word	0x3e79db23
 8004778:	3ef9db23 	.word	0x3ef9db23

0800477c <LSM6DSL_GyroInit>:
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	80fb      	strh	r3, [r7, #6]
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
 800478a:	2111      	movs	r1, #17
 800478c:	20d4      	movs	r0, #212	; 0xd4
 800478e:	f000 fc53 	bl	8005038 <SENSOR_IO_Read>
 8004792:	4603      	mov	r3, r0
 8004794:	73bb      	strb	r3, [r7, #14]
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	73fb      	strb	r3, [r7, #15]
 800479a:	7bbb      	ldrb	r3, [r7, #14]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	73bb      	strb	r3, [r7, #14]
 80047a2:	7bba      	ldrb	r2, [r7, #14]
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	73bb      	strb	r3, [r7, #14]
 80047aa:	7bbb      	ldrb	r3, [r7, #14]
 80047ac:	461a      	mov	r2, r3
 80047ae:	2111      	movs	r1, #17
 80047b0:	20d4      	movs	r0, #212	; 0xd4
 80047b2:	f000 fc27 	bl	8005004 <SENSOR_IO_Write>
 80047b6:	2112      	movs	r1, #18
 80047b8:	20d4      	movs	r0, #212	; 0xd4
 80047ba:	f000 fc3d 	bl	8005038 <SENSOR_IO_Read>
 80047be:	4603      	mov	r3, r0
 80047c0:	73bb      	strb	r3, [r7, #14]
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	73fb      	strb	r3, [r7, #15]
 80047ca:	7bbb      	ldrb	r3, [r7, #14]
 80047cc:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80047d0:	73bb      	strb	r3, [r7, #14]
 80047d2:	7bba      	ldrb	r2, [r7, #14]
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	73bb      	strb	r3, [r7, #14]
 80047da:	7bbb      	ldrb	r3, [r7, #14]
 80047dc:	461a      	mov	r2, r3
 80047de:	2112      	movs	r1, #18
 80047e0:	20d4      	movs	r0, #212	; 0xd4
 80047e2:	f000 fc0f 	bl	8005004 <SENSOR_IO_Write>
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <LSM6DSL_GyroDeInit>:
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	2300      	movs	r3, #0
 80047f6:	71fb      	strb	r3, [r7, #7]
 80047f8:	2111      	movs	r1, #17
 80047fa:	20d4      	movs	r0, #212	; 0xd4
 80047fc:	f000 fc1c 	bl	8005038 <SENSOR_IO_Read>
 8004800:	4603      	mov	r3, r0
 8004802:	71fb      	strb	r3, [r7, #7]
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	71fb      	strb	r3, [r7, #7]
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	461a      	mov	r2, r3
 8004810:	2111      	movs	r1, #17
 8004812:	20d4      	movs	r0, #212	; 0xd4
 8004814:	f000 fbf6 	bl	8005004 <SENSOR_IO_Write>
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <LSM6DSL_GyroReadID>:
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
 8004824:	f000 fbe4 	bl	8004ff0 <SENSOR_IO_Init>
 8004828:	210f      	movs	r1, #15
 800482a:	20d4      	movs	r0, #212	; 0xd4
 800482c:	f000 fc04 	bl	8005038 <SENSOR_IO_Read>
 8004830:	4603      	mov	r3, r0
 8004832:	4618      	mov	r0, r3
 8004834:	bd80      	pop	{r7, pc}

08004836 <LSM6DSL_GyroLowPower>:
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	4603      	mov	r3, r0
 800483e:	80fb      	strh	r3, [r7, #6]
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	2116      	movs	r1, #22
 8004846:	20d4      	movs	r0, #212	; 0xd4
 8004848:	f000 fbf6 	bl	8005038 <SENSOR_IO_Read>
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <LSM6DSL_GyroLowPower+0x30>
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004864:	73fb      	strb	r3, [r7, #15]
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	461a      	mov	r2, r3
 800486a:	2116      	movs	r1, #22
 800486c:	20d4      	movs	r0, #212	; 0xd4
 800486e:	f000 fbc9 	bl	8005004 <SENSOR_IO_Write>
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <LSM6DSL_GyroReadXYZAngRate>:
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	2300      	movs	r3, #0
 8004886:	75fb      	strb	r3, [r7, #23]
 8004888:	2300      	movs	r3, #0
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	2111      	movs	r1, #17
 8004894:	20d4      	movs	r0, #212	; 0xd4
 8004896:	f000 fbcf 	bl	8005038 <SENSOR_IO_Read>
 800489a:	4603      	mov	r3, r0
 800489c:	75fb      	strb	r3, [r7, #23]
 800489e:	f107 0208 	add.w	r2, r7, #8
 80048a2:	2306      	movs	r3, #6
 80048a4:	2122      	movs	r1, #34	; 0x22
 80048a6:	20d4      	movs	r0, #212	; 0xd4
 80048a8:	f000 fbe4 	bl	8005074 <SENSOR_IO_ReadMultiple>
 80048ac:	2300      	movs	r3, #0
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e01f      	b.n	80048f2 <LSM6DSL_GyroReadXYZAngRate+0x76>
 80048b2:	7ffb      	ldrb	r3, [r7, #31]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	3301      	adds	r3, #1
 80048b8:	f107 0220 	add.w	r2, r7, #32
 80048bc:	4413      	add	r3, r2
 80048be:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	7ffb      	ldrb	r3, [r7, #31]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	f107 0120 	add.w	r1, r7, #32
 80048d0:	440b      	add	r3, r1
 80048d2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	4413      	add	r3, r2
 80048da:	b29a      	uxth	r2, r3
 80048dc:	7ffb      	ldrb	r3, [r7, #31]
 80048de:	b212      	sxth	r2, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	f107 0120 	add.w	r1, r7, #32
 80048e6:	440b      	add	r3, r1
 80048e8:	f823 2c10 	strh.w	r2, [r3, #-16]
 80048ec:	7ffb      	ldrb	r3, [r7, #31]
 80048ee:	3301      	adds	r3, #1
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	7ffb      	ldrb	r3, [r7, #31]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d9dc      	bls.n	80048b2 <LSM6DSL_GyroReadXYZAngRate+0x36>
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d828      	bhi.n	8004954 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8004902:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	0800493d 	.word	0x0800493d
 800490c:	08004955 	.word	0x08004955
 8004910:	08004955 	.word	0x08004955
 8004914:	08004955 	.word	0x08004955
 8004918:	08004943 	.word	0x08004943
 800491c:	08004955 	.word	0x08004955
 8004920:	08004955 	.word	0x08004955
 8004924:	08004955 	.word	0x08004955
 8004928:	08004949 	.word	0x08004949
 800492c:	08004955 	.word	0x08004955
 8004930:	08004955 	.word	0x08004955
 8004934:	08004955 	.word	0x08004955
 8004938:	0800494f 	.word	0x0800494f
 800493c:	4b16      	ldr	r3, [pc, #88]	; (8004998 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	e008      	b.n	8004954 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8004942:	4b16      	ldr	r3, [pc, #88]	; (800499c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	e005      	b.n	8004954 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	e002      	b.n	8004954 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 800494e:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	bf00      	nop
 8004954:	2300      	movs	r3, #0
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e017      	b.n	800498a <LSM6DSL_GyroReadXYZAngRate+0x10e>
 800495a:	7ffb      	ldrb	r3, [r7, #31]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	f107 0220 	add.w	r2, r7, #32
 8004962:	4413      	add	r3, r2
 8004964:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004970:	7ffb      	ldrb	r3, [r7, #31]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	edd7 7a06 	vldr	s15, [r7, #24]
 800497c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004980:	edc3 7a00 	vstr	s15, [r3]
 8004984:	7ffb      	ldrb	r3, [r7, #31]
 8004986:	3301      	adds	r3, #1
 8004988:	77fb      	strb	r3, [r7, #31]
 800498a:	7ffb      	ldrb	r3, [r7, #31]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d9e4      	bls.n	800495a <LSM6DSL_GyroReadXYZAngRate+0xde>
 8004990:	bf00      	nop
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	410c0000 	.word	0x410c0000
 800499c:	418c0000 	.word	0x418c0000
 80049a0:	420c0000 	.word	0x420c0000
 80049a4:	428c0000 	.word	0x428c0000

080049a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80049ac:	f7fb fde8 	bl	8000580 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80049b0:	f000 f842 	bl	8004a38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80049b4:	f000 f978 	bl	8004ca8 <MX_GPIO_Init>
	MX_I2C1_Init();
 80049b8:	f000 f8b8 	bl	8004b2c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80049bc:	f000 f944 	bl	8004c48 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80049c0:	f000 f8f4 	bl	8004bac <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	//I2C Sensor Initialization
	BSP_ACCELERO_Init();
 80049c4:	f000 fb74 	bl	80050b0 <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 80049c8:	f000 fc2a 	bl	8005220 <BSP_TSENSOR_Init>
	BSP_GYRO_Init();
 80049cc:	f000 fbc6 	bl	800515c <BSP_GYRO_Init>
	BSP_HSENSOR_Init();
 80049d0:	f000 fc06 	bl	80051e0 <BSP_HSENSOR_Init>

	// Start the timer
	HAL_TIM_Base_Start_IT(&htim2);
 80049d4:	4812      	ldr	r0, [pc, #72]	; (8004a20 <main+0x78>)
 80049d6:	f7fe fb0d 	bl	8002ff4 <HAL_TIM_Base_Start_IT>
	  BSP_GYRO_GetXYZ(gyroscopeReading);
	  sprintf(gyroscopeStr, "Gyroscope: %.2d %.2d %.2d \n", (int)gyroscopeReading[0], (int)gyroscopeReading[1], (int)gyroscopeReading[2]);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)gyroscopeStr, sizeof(gyroscopeStr), 100);

		 */
		if(((uint8_t)acceleroReading[1]-10)>3){
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <main+0x7c>)
 80049dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	3b0a      	subs	r3, #10
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	dd0d      	ble.n	8004a04 <main+0x5c>
			integral_y += ((uint8_t)acceleroReading[1]-acc_y_ref);
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <main+0x7c>)
 80049ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <main+0x80>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <main+0x84>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	4413      	add	r3, r2
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <main+0x84>)
 8004a02:	701a      	strb	r2, [r3, #0]
		}

		num_pushups = integral_y/80;
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <main+0x84>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <main+0x88>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	099b      	lsrs	r3, r3, #6
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <main+0x8c>)
 8004a14:	701a      	strb	r2, [r3, #0]

		HAL_Delay(200);
 8004a16:	20c8      	movs	r0, #200	; 0xc8
 8004a18:	f7fb fe26 	bl	8000668 <HAL_Delay>
		if(((uint8_t)acceleroReading[1]-10)>3){
 8004a1c:	e7dd      	b.n	80049da <main+0x32>
 8004a1e:	bf00      	nop
 8004a20:	200007c4 	.word	0x200007c4
 8004a24:	20000114 	.word	0x20000114
 8004a28:	2000008c 	.word	0x2000008c
 8004a2c:	20000635 	.word	0x20000635
 8004a30:	cccccccd 	.word	0xcccccccd
 8004a34:	20000634 	.word	0x20000634

08004a38 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b0b8      	sub	sp, #224	; 0xe0
 8004a3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a42:	2244      	movs	r2, #68	; 0x44
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fdf2 	bl	8005630 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	2288      	movs	r2, #136	; 0x88
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fde4 	bl	8005630 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004a68:	2310      	movs	r3, #16
 8004a6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004a7a:	2360      	movs	r3, #96	; 0x60
 8004a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a80:	2302      	movs	r3, #2
 8004a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 40;
 8004a92:	2328      	movs	r3, #40	; 0x28
 8004a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004a98:	2307      	movs	r3, #7
 8004a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004aaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc ffae 	bl	8001a10 <HAL_RCC_OscConfig>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <SystemClock_Config+0x86>
	{
		Error_Handler();
 8004aba:	f000 f9a1 	bl	8004e00 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004abe:	230f      	movs	r3, #15
 8004ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004adc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004ae0:	2104      	movs	r1, #4
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fd fb7a 	bl	80021dc <HAL_RCC_ClockConfig>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <SystemClock_Config+0xba>
	{
		Error_Handler();
 8004aee:	f000 f987 	bl	8004e00 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8004af2:	2341      	movs	r3, #65	; 0x41
 8004af4:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004af6:	2300      	movs	r3, #0
 8004af8:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004afa:	2300      	movs	r3, #0
 8004afc:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004afe:	463b      	mov	r3, r7
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fd fd6f 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <SystemClock_Config+0xd8>
	{
		Error_Handler();
 8004b0c:	f000 f978 	bl	8004e00 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004b10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004b14:	f7fc ff26 	bl	8001964 <HAL_PWREx_ControlVoltageScaling>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <SystemClock_Config+0xea>
	{
		Error_Handler();
 8004b1e:	f000 f96f 	bl	8004e00 <Error_Handler>
	}
}
 8004b22:	bf00      	nop
 8004b24:	37e0      	adds	r7, #224	; 0xe0
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b32:	4a1c      	ldr	r2, [pc, #112]	; (8004ba4 <MX_I2C1_Init+0x78>)
 8004b34:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 8004b36:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b38:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <MX_I2C1_Init+0x7c>)
 8004b3a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8004b3c:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b42:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b48:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b66:	480e      	ldr	r0, [pc, #56]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b68:	f7fc f94e 	bl	8000e08 <HAL_I2C_Init>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8004b72:	f000 f945 	bl	8004e00 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b76:	2100      	movs	r1, #0
 8004b78:	4809      	ldr	r0, [pc, #36]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b7a:	f7fc fe4d 	bl	8001818 <HAL_I2CEx_ConfigAnalogFilter>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8004b84:	f000 f93c 	bl	8004e00 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4805      	ldr	r0, [pc, #20]	; (8004ba0 <MX_I2C1_Init+0x74>)
 8004b8c:	f7fc fe8f 	bl	80018ae <HAL_I2CEx_ConfigDigitalFilter>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8004b96:	f000 f933 	bl	8004e00 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	2000066c 	.word	0x2000066c
 8004ba4:	40005400 	.word	0x40005400
 8004ba8:	10909cec 	.word	0x10909cec

08004bac <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bb2:	f107 0310 	add.w	r3, r7, #16
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	609a      	str	r2, [r3, #8]
 8004bbe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bc0:	1d3b      	adds	r3, r7, #4
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8004bca:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <MX_TIM2_Init+0x98>)
 8004bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bd0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 40000;
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <MX_TIM2_Init+0x98>)
 8004bd4:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004bd8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <MX_TIM2_Init+0x98>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100;
 8004be0:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <MX_TIM2_Init+0x98>)
 8004be2:	2264      	movs	r2, #100	; 0x64
 8004be4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004be6:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <MX_TIM2_Init+0x98>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bec:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <MX_TIM2_Init+0x98>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004bf2:	4814      	ldr	r0, [pc, #80]	; (8004c44 <MX_TIM2_Init+0x98>)
 8004bf4:	f7fe f9a6 	bl	8002f44 <HAL_TIM_Base_Init>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8004bfe:	f000 f8ff 	bl	8004e00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c06:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c08:	f107 0310 	add.w	r3, r7, #16
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	480d      	ldr	r0, [pc, #52]	; (8004c44 <MX_TIM2_Init+0x98>)
 8004c10:	f7fe fb7f 	bl	8003312 <HAL_TIM_ConfigClockSource>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8004c1a:	f000 f8f1 	bl	8004e00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c26:	1d3b      	adds	r3, r7, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4806      	ldr	r0, [pc, #24]	; (8004c44 <MX_TIM2_Init+0x98>)
 8004c2c:	f7fe fd86 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8004c36:	f000 f8e3 	bl	8004e00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8004c3a:	bf00      	nop
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200007c4 	.word	0x200007c4

08004c48 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <MX_USART1_UART_Init+0x5c>)
 8004c50:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c58:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004c66:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c6e:	220c      	movs	r2, #12
 8004c70:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c72:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c78:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c84:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c8a:	4805      	ldr	r0, [pc, #20]	; (8004ca0 <MX_USART1_UART_Init+0x58>)
 8004c8c:	f7fe fdfc 	bl	8003888 <HAL_UART_Init>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8004c96:	f000 f8b3 	bl	8004e00 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	2000071c 	.word	0x2000071c
 8004ca4:	40013800 	.word	0x40013800

08004ca8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cae:	1d3b      	adds	r3, r7, #4
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
 8004cba:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <MX_GPIO_Init+0x4c>)
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <MX_GPIO_Init+0x4c>)
 8004cc2:	f043 0302 	orr.w	r3, r3, #2
 8004cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <MX_GPIO_Init+0x4c>)
 8004cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8004cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cd8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cda:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <MX_GPIO_Init+0x50>)
 8004cdc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4805      	ldr	r0, [pc, #20]	; (8004cfc <MX_GPIO_Init+0x54>)
 8004ce8:	f7fb fdf2 	bl	80008d0 <HAL_GPIO_Init>

}
 8004cec:	bf00      	nop
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	10110000 	.word	0x10110000
 8004cfc:	48000400 	.word	0x48000400

08004d00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	readAccelerometer();
 8004d08:	f000 f804 	bl	8004d14 <readAccelerometer>
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <readAccelerometer>:

void readAccelerometer() {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
	//read
	BSP_ACCELERO_AccGetXYZ(acceleration);
 8004d18:	482c      	ldr	r0, [pc, #176]	; (8004dcc <readAccelerometer+0xb8>)
 8004d1a:	f000 fa07 	bl	800512c <BSP_ACCELERO_AccGetXYZ>
	//for UART transmit
	sprintf(AxBuff, "Acc X is:%d ", (int) acceleration[0]);
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <readAccelerometer+0xb8>)
 8004d20:	461a      	mov	r2, r3
 8004d22:	492b      	ldr	r1, [pc, #172]	; (8004dd0 <readAccelerometer+0xbc>)
 8004d24:	482b      	ldr	r0, [pc, #172]	; (8004dd4 <readAccelerometer+0xc0>)
 8004d26:	f000 fc8b 	bl	8005640 <siprintf>
	sprintf(AyBuff, "Acc Y is:%d ", (int) acceleration[1]);
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <readAccelerometer+0xc4>)
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	492b      	ldr	r1, [pc, #172]	; (8004ddc <readAccelerometer+0xc8>)
 8004d30:	482b      	ldr	r0, [pc, #172]	; (8004de0 <readAccelerometer+0xcc>)
 8004d32:	f000 fc85 	bl	8005640 <siprintf>
	sprintf(AzBuff, "Acc Z is:%d  ", (int) acceleration[2]);
 8004d36:	4b2b      	ldr	r3, [pc, #172]	; (8004de4 <readAccelerometer+0xd0>)
 8004d38:	461a      	mov	r2, r3
 8004d3a:	492b      	ldr	r1, [pc, #172]	; (8004de8 <readAccelerometer+0xd4>)
 8004d3c:	482b      	ldr	r0, [pc, #172]	; (8004dec <readAccelerometer+0xd8>)
 8004d3e:	f000 fc7f 	bl	8005640 <siprintf>
	memset(buffer, 0, strlen(buffer));
 8004d42:	482b      	ldr	r0, [pc, #172]	; (8004df0 <readAccelerometer+0xdc>)
 8004d44:	f7fb fa44 	bl	80001d0 <strlen>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4828      	ldr	r0, [pc, #160]	; (8004df0 <readAccelerometer+0xdc>)
 8004d50:	f000 fc6e 	bl	8005630 <memset>
	strcat(buffer, AxBuff);
 8004d54:	491f      	ldr	r1, [pc, #124]	; (8004dd4 <readAccelerometer+0xc0>)
 8004d56:	4826      	ldr	r0, [pc, #152]	; (8004df0 <readAccelerometer+0xdc>)
 8004d58:	f000 fc92 	bl	8005680 <strcat>
	strcat(buffer, AyBuff);
 8004d5c:	4920      	ldr	r1, [pc, #128]	; (8004de0 <readAccelerometer+0xcc>)
 8004d5e:	4824      	ldr	r0, [pc, #144]	; (8004df0 <readAccelerometer+0xdc>)
 8004d60:	f000 fc8e 	bl	8005680 <strcat>
	strcat(buffer, AzBuff);
 8004d64:	4921      	ldr	r1, [pc, #132]	; (8004dec <readAccelerometer+0xd8>)
 8004d66:	4822      	ldr	r0, [pc, #136]	; (8004df0 <readAccelerometer+0xdc>)
 8004d68:	f000 fc8a 	bl	8005680 <strcat>
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, (uint16_t) strlen(buffer), 30000);
 8004d6c:	4820      	ldr	r0, [pc, #128]	; (8004df0 <readAccelerometer+0xdc>)
 8004d6e:	f7fb fa2f 	bl	80001d0 <strlen>
 8004d72:	4603      	mov	r3, r0
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	f247 5330 	movw	r3, #30000	; 0x7530
 8004d7a:	491d      	ldr	r1, [pc, #116]	; (8004df0 <readAccelerometer+0xdc>)
 8004d7c:	481d      	ldr	r0, [pc, #116]	; (8004df4 <readAccelerometer+0xe0>)
 8004d7e:	f7fe fdd1 	bl	8003924 <HAL_UART_Transmit>
	//store in a int array
	acceleration[0][counter] = (int) acceleration[0];
 8004d82:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <readAccelerometer+0xe4>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4911      	ldr	r1, [pc, #68]	; (8004dcc <readAccelerometer+0xb8>)
 8004d88:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <readAccelerometer+0xb8>)
 8004d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	acceleration[1][counter] = (int) acceleration[1];
 8004d8e:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <readAccelerometer+0xe4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4911      	ldr	r1, [pc, #68]	; (8004dd8 <readAccelerometer+0xc4>)
 8004d94:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <readAccelerometer+0xb8>)
 8004d96:	3364      	adds	r3, #100	; 0x64
 8004d98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	acceleration[2][counter] = (int) acceleration[2];
 8004d9c:	4b16      	ldr	r3, [pc, #88]	; (8004df8 <readAccelerometer+0xe4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4910      	ldr	r1, [pc, #64]	; (8004de4 <readAccelerometer+0xd0>)
 8004da2:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <readAccelerometer+0xb8>)
 8004da4:	33c8      	adds	r3, #200	; 0xc8
 8004da6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	counter = (counter + 1) % 100;
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <readAccelerometer+0xe4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <readAccelerometer+0xe8>)
 8004db2:	fb83 1302 	smull	r1, r3, r3, r2
 8004db6:	1159      	asrs	r1, r3, #5
 8004db8:	17d3      	asrs	r3, r2, #31
 8004dba:	1acb      	subs	r3, r1, r3
 8004dbc:	2164      	movs	r1, #100	; 0x64
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	4a0c      	ldr	r2, [pc, #48]	; (8004df8 <readAccelerometer+0xe4>)
 8004dc6:	6013      	str	r3, [r2, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000180 	.word	0x20000180
 8004dd0:	08005e84 	.word	0x08005e84
 8004dd4:	200006bc 	.word	0x200006bc
 8004dd8:	20000310 	.word	0x20000310
 8004ddc:	08005e94 	.word	0x08005e94
 8004de0:	2000083c 	.word	0x2000083c
 8004de4:	200004a0 	.word	0x200004a0
 8004de8:	08005ea4 	.word	0x08005ea4
 8004dec:	20000824 	.word	0x20000824
 8004df0:	2000011c 	.word	0x2000011c
 8004df4:	2000071c 	.word	0x2000071c
 8004df8:	20000630 	.word	0x20000630
 8004dfc:	51eb851f 	.word	0x51eb851f

08004e00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004e18:	4b27      	ldr	r3, [pc, #156]	; (8004eb8 <I2Cx_MspInit+0xa8>)
 8004e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1c:	4a26      	ldr	r2, [pc, #152]	; (8004eb8 <I2Cx_MspInit+0xa8>)
 8004e1e:	f043 0302 	orr.w	r3, r3, #2
 8004e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e24:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <I2Cx_MspInit+0xa8>)
 8004e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8004e30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004e36:	2312      	movs	r3, #18
 8004e38:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8004e42:	2304      	movs	r3, #4
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004e46:	f107 0314 	add.w	r3, r7, #20
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	481b      	ldr	r0, [pc, #108]	; (8004ebc <I2Cx_MspInit+0xac>)
 8004e4e:	f7fb fd3f 	bl	80008d0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004e52:	f107 0314 	add.w	r3, r7, #20
 8004e56:	4619      	mov	r1, r3
 8004e58:	4818      	ldr	r0, [pc, #96]	; (8004ebc <I2Cx_MspInit+0xac>)
 8004e5a:	f7fb fd39 	bl	80008d0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8004e5e:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <I2Cx_MspInit+0xa8>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <I2Cx_MspInit+0xa8>)
 8004e64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e68:	6593      	str	r3, [r2, #88]	; 0x58
 8004e6a:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <I2Cx_MspInit+0xa8>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <I2Cx_MspInit+0xa8>)
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	4a0f      	ldr	r2, [pc, #60]	; (8004eb8 <I2Cx_MspInit+0xa8>)
 8004e7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e80:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8004e82:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <I2Cx_MspInit+0xa8>)
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	4a0c      	ldr	r2, [pc, #48]	; (8004eb8 <I2Cx_MspInit+0xa8>)
 8004e88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004e8c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004e8e:	2200      	movs	r2, #0
 8004e90:	210f      	movs	r1, #15
 8004e92:	2021      	movs	r0, #33	; 0x21
 8004e94:	f7fb fce5 	bl	8000862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004e98:	2021      	movs	r0, #33	; 0x21
 8004e9a:	f7fb fcfe 	bl	800089a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	210f      	movs	r1, #15
 8004ea2:	2022      	movs	r0, #34	; 0x22
 8004ea4:	f7fb fcdd 	bl	8000862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8004ea8:	2022      	movs	r0, #34	; 0x22
 8004eaa:	f7fb fcf6 	bl	800089a <HAL_NVIC_EnableIRQ>
}
 8004eae:	bf00      	nop
 8004eb0:	3728      	adds	r7, #40	; 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	48000400 	.word	0x48000400

08004ec0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a12      	ldr	r2, [pc, #72]	; (8004f14 <I2Cx_Init+0x54>)
 8004ecc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a11      	ldr	r2, [pc, #68]	; (8004f18 <I2Cx_Init+0x58>)
 8004ed2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ff89 	bl	8004e10 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fb ff82 	bl	8000e08 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8004f04:	2100      	movs	r1, #0
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fc fc86 	bl	8001818 <HAL_I2CEx_ConfigAnalogFilter>
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40005800 	.word	0x40005800
 8004f18:	00702681 	.word	0x00702681

08004f1c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	; 0x28
 8004f20:	af04      	add	r7, sp, #16
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	4608      	mov	r0, r1
 8004f26:	4611      	mov	r1, r2
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	72fb      	strb	r3, [r7, #11]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	813b      	strh	r3, [r7, #8]
 8004f32:	4613      	mov	r3, r2
 8004f34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004f3a:	7afb      	ldrb	r3, [r7, #11]
 8004f3c:	b299      	uxth	r1, r3
 8004f3e:	88f8      	ldrh	r0, [r7, #6]
 8004f40:	893a      	ldrh	r2, [r7, #8]
 8004f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f46:	9302      	str	r3, [sp, #8]
 8004f48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f4a:	9301      	str	r3, [sp, #4]
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	4603      	mov	r3, r0
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7fc f92a 	bl	80011ac <HAL_I2C_Mem_Read>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	4619      	mov	r1, r3
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f832 	bl	8004fd0 <I2Cx_Error>
  }
  return status;
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b08a      	sub	sp, #40	; 0x28
 8004f7a:	af04      	add	r7, sp, #16
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	4608      	mov	r0, r1
 8004f80:	4611      	mov	r1, r2
 8004f82:	461a      	mov	r2, r3
 8004f84:	4603      	mov	r3, r0
 8004f86:	72fb      	strb	r3, [r7, #11]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	813b      	strh	r3, [r7, #8]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004f94:	7afb      	ldrb	r3, [r7, #11]
 8004f96:	b299      	uxth	r1, r3
 8004f98:	88f8      	ldrh	r0, [r7, #6]
 8004f9a:	893a      	ldrh	r2, [r7, #8]
 8004f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fa0:	9302      	str	r3, [sp, #8]
 8004fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fa4:	9301      	str	r3, [sp, #4]
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	4603      	mov	r3, r0
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7fb ffe9 	bl	8000f84 <HAL_I2C_Mem_Write>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004fbc:	7afb      	ldrb	r3, [r7, #11]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f805 	bl	8004fd0 <I2Cx_Error>
  }
  return status;
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fb ffa2 	bl	8000f26 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ff6c 	bl	8004ec0 <I2Cx_Init>
}
 8004fe8:	bf00      	nop
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8004ff4:	4802      	ldr	r0, [pc, #8]	; (8005000 <SENSOR_IO_Init+0x10>)
 8004ff6:	f7ff ff63 	bl	8004ec0 <I2Cx_Init>
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200008d0 	.word	0x200008d0

08005004 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af02      	add	r7, sp, #8
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
 800500e:	460b      	mov	r3, r1
 8005010:	71bb      	strb	r3, [r7, #6]
 8005012:	4613      	mov	r3, r2
 8005014:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8005016:	79bb      	ldrb	r3, [r7, #6]
 8005018:	b29a      	uxth	r2, r3
 800501a:	79f9      	ldrb	r1, [r7, #7]
 800501c:	2301      	movs	r3, #1
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	1d7b      	adds	r3, r7, #5
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2301      	movs	r3, #1
 8005026:	4803      	ldr	r0, [pc, #12]	; (8005034 <SENSOR_IO_Write+0x30>)
 8005028:	f7ff ffa5 	bl	8004f76 <I2Cx_WriteMultiple>
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	200008d0 	.word	0x200008d0

08005038 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af02      	add	r7, sp, #8
 800503e:	4603      	mov	r3, r0
 8005040:	460a      	mov	r2, r1
 8005042:	71fb      	strb	r3, [r7, #7]
 8005044:	4613      	mov	r3, r2
 8005046:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800504c:	79bb      	ldrb	r3, [r7, #6]
 800504e:	b29a      	uxth	r2, r3
 8005050:	79f9      	ldrb	r1, [r7, #7]
 8005052:	2301      	movs	r3, #1
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	f107 030f 	add.w	r3, r7, #15
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	2301      	movs	r3, #1
 800505e:	4804      	ldr	r0, [pc, #16]	; (8005070 <SENSOR_IO_Read+0x38>)
 8005060:	f7ff ff5c 	bl	8004f1c <I2Cx_ReadMultiple>

  return read_value;
 8005064:	7bfb      	ldrb	r3, [r7, #15]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	200008d0 	.word	0x200008d0

08005074 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af02      	add	r7, sp, #8
 800507a:	603a      	str	r2, [r7, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
 8005082:	460b      	mov	r3, r1
 8005084:	71bb      	strb	r3, [r7, #6]
 8005086:	4613      	mov	r3, r2
 8005088:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800508a:	79bb      	ldrb	r3, [r7, #6]
 800508c:	b29a      	uxth	r2, r3
 800508e:	79f9      	ldrb	r1, [r7, #7]
 8005090:	88bb      	ldrh	r3, [r7, #4]
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	2301      	movs	r3, #1
 800509a:	4804      	ldr	r0, [pc, #16]	; (80050ac <SENSOR_IO_ReadMultiple+0x38>)
 800509c:	f7ff ff3e 	bl	8004f1c <I2Cx_ReadMultiple>
 80050a0:	4603      	mov	r3, r0
 80050a2:	b29b      	uxth	r3, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	200008d0 	.word	0x200008d0

080050b0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80050ba:	2300      	movs	r3, #0
 80050bc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80050be:	4b19      	ldr	r3, [pc, #100]	; (8005124 <BSP_ACCELERO_Init+0x74>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	4798      	blx	r3
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b6a      	cmp	r3, #106	; 0x6a
 80050c8:	d002      	beq.n	80050d0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
 80050ce:	e024      	b.n	800511a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80050d0:	4b15      	ldr	r3, [pc, #84]	; (8005128 <BSP_ACCELERO_Init+0x78>)
 80050d2:	4a14      	ldr	r2, [pc, #80]	; (8005124 <BSP_ACCELERO_Init+0x74>)
 80050d4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80050d6:	2330      	movs	r3, #48	; 0x30
 80050d8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80050de:	2300      	movs	r3, #0
 80050e0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80050e2:	2340      	movs	r3, #64	; 0x40
 80050e4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80050ee:	797a      	ldrb	r2, [r7, #5]
 80050f0:	7abb      	ldrb	r3, [r7, #10]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80050f8:	7a3b      	ldrb	r3, [r7, #8]
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	b21a      	sxth	r2, r3
 8005104:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	b21b      	sxth	r3, r3
 800510c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <BSP_ACCELERO_Init+0x78>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	89ba      	ldrh	r2, [r7, #12]
 8005116:	4610      	mov	r0, r2
 8005118:	4798      	blx	r3
  }  

  return ret;
 800511a:	7bfb      	ldrb	r3, [r7, #15]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000024 	.word	0x20000024
 8005128:	20000638 	.word	0x20000638

0800512c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8005134:	4b08      	ldr	r3, [pc, #32]	; (8005158 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8005146:	4b04      	ldr	r3, [pc, #16]	; (8005158 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	4798      	blx	r3
    }
  }
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000638 	.word	0x20000638

0800515c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8005166:	2300      	movs	r3, #0
 8005168:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800516a:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <BSP_GYRO_Init+0x7c>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	4798      	blx	r3
 8005170:	4603      	mov	r3, r0
 8005172:	2b6a      	cmp	r3, #106	; 0x6a
 8005174:	d002      	beq.n	800517c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	73fb      	strb	r3, [r7, #15]
 800517a:	e028      	b.n	80051ce <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800517c:	4b17      	ldr	r3, [pc, #92]	; (80051dc <BSP_GYRO_Init+0x80>)
 800517e:	4a16      	ldr	r2, [pc, #88]	; (80051d8 <BSP_GYRO_Init+0x7c>)
 8005180:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8005186:	2330      	movs	r3, #48	; 0x30
 8005188:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8005192:	2340      	movs	r3, #64	; 0x40
 8005194:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800519a:	230c      	movs	r3, #12
 800519c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800519e:	7aba      	ldrb	r2, [r7, #10]
 80051a0:	797b      	ldrb	r3, [r7, #5]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80051a8:	7a3b      	ldrb	r3, [r7, #8]
 80051aa:	f043 0304 	orr.w	r3, r3, #4
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	b21a      	sxth	r2, r3
 80051b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	b21b      	sxth	r3, r3
 80051bc:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <BSP_GYRO_Init+0x80>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	89ba      	ldrh	r2, [r7, #12]
 80051c6:	4610      	mov	r0, r2
 80051c8:	4798      	blx	r3
    
    ret = GYRO_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000058 	.word	0x20000058
 80051dc:	2000063c 	.word	0x2000063c

080051e0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <BSP_HSENSOR_Init+0x38>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	20be      	movs	r0, #190	; 0xbe
 80051ec:	4798      	blx	r3
 80051ee:	4603      	mov	r3, r0
 80051f0:	2bbc      	cmp	r3, #188	; 0xbc
 80051f2:	d002      	beq.n	80051fa <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	e009      	b.n	800520e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80051fa:	4b08      	ldr	r3, [pc, #32]	; (800521c <BSP_HSENSOR_Init+0x3c>)
 80051fc:	4a06      	ldr	r2, [pc, #24]	; (8005218 <BSP_HSENSOR_Init+0x38>)
 80051fe:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <BSP_HSENSOR_Init+0x3c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	20be      	movs	r0, #190	; 0xbe
 8005208:	4798      	blx	r3
    ret = HSENSOR_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800520e:	687b      	ldr	r3, [r7, #4]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000008 	.word	0x20000008
 800521c:	20000640 	.word	0x20000640

08005220 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800522a:	4b09      	ldr	r3, [pc, #36]	; (8005250 <BSP_TSENSOR_Init+0x30>)
 800522c:	4a09      	ldr	r2, [pc, #36]	; (8005254 <BSP_TSENSOR_Init+0x34>)
 800522e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8005230:	f7ff fede 	bl	8004ff0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <BSP_TSENSOR_Init+0x30>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2100      	movs	r1, #0
 800523c:	20be      	movs	r0, #190	; 0xbe
 800523e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8005244:	79fb      	ldrb	r3, [r7, #7]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000644 	.word	0x20000644
 8005254:	20000014 	.word	0x20000014

08005258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525e:	4b0f      	ldr	r3, [pc, #60]	; (800529c <HAL_MspInit+0x44>)
 8005260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005262:	4a0e      	ldr	r2, [pc, #56]	; (800529c <HAL_MspInit+0x44>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6613      	str	r3, [r2, #96]	; 0x60
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <HAL_MspInit+0x44>)
 800526c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	607b      	str	r3, [r7, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <HAL_MspInit+0x44>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527a:	4a08      	ldr	r2, [pc, #32]	; (800529c <HAL_MspInit+0x44>)
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005280:	6593      	str	r3, [r2, #88]	; 0x58
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_MspInit+0x44>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40021000 	.word	0x40021000

080052a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a8:	f107 0314 	add.w	r3, r7, #20
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	605a      	str	r2, [r3, #4]
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	60da      	str	r2, [r3, #12]
 80052b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a17      	ldr	r2, [pc, #92]	; (800531c <HAL_I2C_MspInit+0x7c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d128      	bne.n	8005314 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052c2:	4b17      	ldr	r3, [pc, #92]	; (8005320 <HAL_I2C_MspInit+0x80>)
 80052c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c6:	4a16      	ldr	r2, [pc, #88]	; (8005320 <HAL_I2C_MspInit+0x80>)
 80052c8:	f043 0302 	orr.w	r3, r3, #2
 80052cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052ce:	4b14      	ldr	r3, [pc, #80]	; (8005320 <HAL_I2C_MspInit+0x80>)
 80052d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80052da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052e0:	2312      	movs	r3, #18
 80052e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052e4:	2301      	movs	r3, #1
 80052e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e8:	2303      	movs	r3, #3
 80052ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80052ec:	2304      	movs	r3, #4
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	4619      	mov	r1, r3
 80052f6:	480b      	ldr	r0, [pc, #44]	; (8005324 <HAL_I2C_MspInit+0x84>)
 80052f8:	f7fb faea 	bl	80008d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80052fc:	4b08      	ldr	r3, [pc, #32]	; (8005320 <HAL_I2C_MspInit+0x80>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	4a07      	ldr	r2, [pc, #28]	; (8005320 <HAL_I2C_MspInit+0x80>)
 8005302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005306:	6593      	str	r3, [r2, #88]	; 0x58
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_I2C_MspInit+0x80>)
 800530a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005314:	bf00      	nop
 8005316:	3728      	adds	r7, #40	; 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40005400 	.word	0x40005400
 8005320:	40021000 	.word	0x40021000
 8005324:	48000400 	.word	0x48000400

08005328 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0b      	ldr	r2, [pc, #44]	; (8005364 <HAL_I2C_MspDeInit+0x3c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10f      	bne.n	800535a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <HAL_I2C_MspDeInit+0x40>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533e:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <HAL_I2C_MspDeInit+0x40>)
 8005340:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005344:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8005346:	f44f 7180 	mov.w	r1, #256	; 0x100
 800534a:	4808      	ldr	r0, [pc, #32]	; (800536c <HAL_I2C_MspDeInit+0x44>)
 800534c:	f7fb fc68 	bl	8000c20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8005350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005354:	4805      	ldr	r0, [pc, #20]	; (800536c <HAL_I2C_MspDeInit+0x44>)
 8005356:	f7fb fc63 	bl	8000c20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40005400 	.word	0x40005400
 8005368:	40021000 	.word	0x40021000
 800536c:	48000400 	.word	0x48000400

08005370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d113      	bne.n	80053aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005382:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <HAL_TIM_Base_MspInit+0x44>)
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	4a0b      	ldr	r2, [pc, #44]	; (80053b4 <HAL_TIM_Base_MspInit+0x44>)
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	6593      	str	r3, [r2, #88]	; 0x58
 800538e:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <HAL_TIM_Base_MspInit+0x44>)
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800539a:	2200      	movs	r2, #0
 800539c:	2100      	movs	r1, #0
 800539e:	201c      	movs	r0, #28
 80053a0:	f7fb fa5f 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80053a4:	201c      	movs	r0, #28
 80053a6:	f7fb fa78 	bl	800089a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40021000 	.word	0x40021000

080053b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c0:	f107 0314 	add.w	r3, r7, #20
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	605a      	str	r2, [r3, #4]
 80053ca:	609a      	str	r2, [r3, #8]
 80053cc:	60da      	str	r2, [r3, #12]
 80053ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a17      	ldr	r2, [pc, #92]	; (8005434 <HAL_UART_MspInit+0x7c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d127      	bne.n	800542a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80053da:	4b17      	ldr	r3, [pc, #92]	; (8005438 <HAL_UART_MspInit+0x80>)
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_UART_MspInit+0x80>)
 80053e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053e4:	6613      	str	r3, [r2, #96]	; 0x60
 80053e6:	4b14      	ldr	r3, [pc, #80]	; (8005438 <HAL_UART_MspInit+0x80>)
 80053e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053f2:	4b11      	ldr	r3, [pc, #68]	; (8005438 <HAL_UART_MspInit+0x80>)
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	4a10      	ldr	r2, [pc, #64]	; (8005438 <HAL_UART_MspInit+0x80>)
 80053f8:	f043 0302 	orr.w	r3, r3, #2
 80053fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053fe:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <HAL_UART_MspInit+0x80>)
 8005400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800540a:	23c0      	movs	r3, #192	; 0xc0
 800540c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540e:	2302      	movs	r3, #2
 8005410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005416:	2303      	movs	r3, #3
 8005418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800541a:	2307      	movs	r3, #7
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800541e:	f107 0314 	add.w	r3, r7, #20
 8005422:	4619      	mov	r1, r3
 8005424:	4805      	ldr	r0, [pc, #20]	; (800543c <HAL_UART_MspInit+0x84>)
 8005426:	f7fb fa53 	bl	80008d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800542a:	bf00      	nop
 800542c:	3728      	adds	r7, #40	; 0x28
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40013800 	.word	0x40013800
 8005438:	40021000 	.word	0x40021000
 800543c:	48000400 	.word	0x48000400

08005440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005444:	bf00      	nop
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800544e:	b480      	push	{r7}
 8005450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005452:	e7fe      	b.n	8005452 <HardFault_Handler+0x4>

08005454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005458:	e7fe      	b.n	8005458 <MemManage_Handler+0x4>

0800545a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800545a:	b480      	push	{r7}
 800545c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800545e:	e7fe      	b.n	800545e <BusFault_Handler+0x4>

08005460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005464:	e7fe      	b.n	8005464 <UsageFault_Handler+0x4>

08005466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005466:	b480      	push	{r7}
 8005468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800546a:	bf00      	nop
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005482:	b480      	push	{r7}
 8005484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005486:	bf00      	nop
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005494:	f7fb f8c8 	bl	8000628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005498:	bf00      	nop
 800549a:	bd80      	pop	{r7, pc}

0800549c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80054a0:	4802      	ldr	r0, [pc, #8]	; (80054ac <TIM2_IRQHandler+0x10>)
 80054a2:	f7fd fe17 	bl	80030d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	200007c4 	.word	0x200007c4

080054b0 <_sbrk>:
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	4a14      	ldr	r2, [pc, #80]	; (800550c <_sbrk+0x5c>)
 80054ba:	4b15      	ldr	r3, [pc, #84]	; (8005510 <_sbrk+0x60>)
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	4b13      	ldr	r3, [pc, #76]	; (8005514 <_sbrk+0x64>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d102      	bne.n	80054d2 <_sbrk+0x22>
 80054cc:	4b11      	ldr	r3, [pc, #68]	; (8005514 <_sbrk+0x64>)
 80054ce:	4a12      	ldr	r2, [pc, #72]	; (8005518 <_sbrk+0x68>)
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	4b10      	ldr	r3, [pc, #64]	; (8005514 <_sbrk+0x64>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d207      	bcs.n	80054f0 <_sbrk+0x40>
 80054e0:	f000 f87c 	bl	80055dc <__errno>
 80054e4:	4602      	mov	r2, r0
 80054e6:	230c      	movs	r3, #12
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ee:	e009      	b.n	8005504 <_sbrk+0x54>
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <_sbrk+0x64>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	4b07      	ldr	r3, [pc, #28]	; (8005514 <_sbrk+0x64>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	4a05      	ldr	r2, [pc, #20]	; (8005514 <_sbrk+0x64>)
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20018000 	.word	0x20018000
 8005510:	00000400 	.word	0x00000400
 8005514:	20000648 	.word	0x20000648
 8005518:	20000920 	.word	0x20000920

0800551c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005520:	4b17      	ldr	r3, [pc, #92]	; (8005580 <SystemInit+0x64>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005526:	4a16      	ldr	r2, [pc, #88]	; (8005580 <SystemInit+0x64>)
 8005528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800552c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005530:	4b14      	ldr	r3, [pc, #80]	; (8005584 <SystemInit+0x68>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <SystemInit+0x68>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <SystemInit+0x68>)
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <SystemInit+0x68>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a0f      	ldr	r2, [pc, #60]	; (8005584 <SystemInit+0x68>)
 8005548:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800554c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005550:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <SystemInit+0x68>)
 8005554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005558:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <SystemInit+0x68>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <SystemInit+0x68>)
 8005560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005564:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <SystemInit+0x68>)
 8005568:	2200      	movs	r2, #0
 800556a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <SystemInit+0x64>)
 800556e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005572:	609a      	str	r2, [r3, #8]
#endif
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	e000ed00 	.word	0xe000ed00
 8005584:	40021000 	.word	0x40021000

08005588 <Reset_Handler>:
 8005588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055c0 <LoopForever+0x2>
 800558c:	f7ff ffc6 	bl	800551c <SystemInit>
 8005590:	2100      	movs	r1, #0
 8005592:	e003      	b.n	800559c <LoopCopyDataInit>

08005594 <CopyDataInit>:
 8005594:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <LoopForever+0x6>)
 8005596:	585b      	ldr	r3, [r3, r1]
 8005598:	5043      	str	r3, [r0, r1]
 800559a:	3104      	adds	r1, #4

0800559c <LoopCopyDataInit>:
 800559c:	480a      	ldr	r0, [pc, #40]	; (80055c8 <LoopForever+0xa>)
 800559e:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <LoopForever+0xe>)
 80055a0:	1842      	adds	r2, r0, r1
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d3f6      	bcc.n	8005594 <CopyDataInit>
 80055a6:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <LoopForever+0x12>)
 80055a8:	e002      	b.n	80055b0 <LoopFillZerobss>

080055aa <FillZerobss>:
 80055aa:	2300      	movs	r3, #0
 80055ac:	f842 3b04 	str.w	r3, [r2], #4

080055b0 <LoopFillZerobss>:
 80055b0:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <LoopForever+0x16>)
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d3f9      	bcc.n	80055aa <FillZerobss>
 80055b6:	f000 f817 	bl	80055e8 <__libc_init_array>
 80055ba:	f7ff f9f5 	bl	80049a8 <main>

080055be <LoopForever>:
 80055be:	e7fe      	b.n	80055be <LoopForever>
 80055c0:	20018000 	.word	0x20018000
 80055c4:	08005f40 	.word	0x08005f40
 80055c8:	20000000 	.word	0x20000000
 80055cc:	200000f8 	.word	0x200000f8
 80055d0:	200000f8 	.word	0x200000f8
 80055d4:	20000920 	.word	0x20000920

080055d8 <ADC1_2_IRQHandler>:
 80055d8:	e7fe      	b.n	80055d8 <ADC1_2_IRQHandler>
	...

080055dc <__errno>:
 80055dc:	4b01      	ldr	r3, [pc, #4]	; (80055e4 <__errno+0x8>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000094 	.word	0x20000094

080055e8 <__libc_init_array>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4e0d      	ldr	r6, [pc, #52]	; (8005620 <__libc_init_array+0x38>)
 80055ec:	4c0d      	ldr	r4, [pc, #52]	; (8005624 <__libc_init_array+0x3c>)
 80055ee:	1ba4      	subs	r4, r4, r6
 80055f0:	10a4      	asrs	r4, r4, #2
 80055f2:	2500      	movs	r5, #0
 80055f4:	42a5      	cmp	r5, r4
 80055f6:	d109      	bne.n	800560c <__libc_init_array+0x24>
 80055f8:	4e0b      	ldr	r6, [pc, #44]	; (8005628 <__libc_init_array+0x40>)
 80055fa:	4c0c      	ldr	r4, [pc, #48]	; (800562c <__libc_init_array+0x44>)
 80055fc:	f000 fc36 	bl	8005e6c <_init>
 8005600:	1ba4      	subs	r4, r4, r6
 8005602:	10a4      	asrs	r4, r4, #2
 8005604:	2500      	movs	r5, #0
 8005606:	42a5      	cmp	r5, r4
 8005608:	d105      	bne.n	8005616 <__libc_init_array+0x2e>
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005610:	4798      	blx	r3
 8005612:	3501      	adds	r5, #1
 8005614:	e7ee      	b.n	80055f4 <__libc_init_array+0xc>
 8005616:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800561a:	4798      	blx	r3
 800561c:	3501      	adds	r5, #1
 800561e:	e7f2      	b.n	8005606 <__libc_init_array+0x1e>
 8005620:	08005f38 	.word	0x08005f38
 8005624:	08005f38 	.word	0x08005f38
 8005628:	08005f38 	.word	0x08005f38
 800562c:	08005f3c 	.word	0x08005f3c

08005630 <memset>:
 8005630:	4402      	add	r2, r0
 8005632:	4603      	mov	r3, r0
 8005634:	4293      	cmp	r3, r2
 8005636:	d100      	bne.n	800563a <memset+0xa>
 8005638:	4770      	bx	lr
 800563a:	f803 1b01 	strb.w	r1, [r3], #1
 800563e:	e7f9      	b.n	8005634 <memset+0x4>

08005640 <siprintf>:
 8005640:	b40e      	push	{r1, r2, r3}
 8005642:	b500      	push	{lr}
 8005644:	b09c      	sub	sp, #112	; 0x70
 8005646:	ab1d      	add	r3, sp, #116	; 0x74
 8005648:	9002      	str	r0, [sp, #8]
 800564a:	9006      	str	r0, [sp, #24]
 800564c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005650:	4809      	ldr	r0, [pc, #36]	; (8005678 <siprintf+0x38>)
 8005652:	9107      	str	r1, [sp, #28]
 8005654:	9104      	str	r1, [sp, #16]
 8005656:	4909      	ldr	r1, [pc, #36]	; (800567c <siprintf+0x3c>)
 8005658:	f853 2b04 	ldr.w	r2, [r3], #4
 800565c:	9105      	str	r1, [sp, #20]
 800565e:	6800      	ldr	r0, [r0, #0]
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	a902      	add	r1, sp, #8
 8005664:	f000 f876 	bl	8005754 <_svfiprintf_r>
 8005668:	9b02      	ldr	r3, [sp, #8]
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	b01c      	add	sp, #112	; 0x70
 8005670:	f85d eb04 	ldr.w	lr, [sp], #4
 8005674:	b003      	add	sp, #12
 8005676:	4770      	bx	lr
 8005678:	20000094 	.word	0x20000094
 800567c:	ffff0208 	.word	0xffff0208

08005680 <strcat>:
 8005680:	b510      	push	{r4, lr}
 8005682:	4603      	mov	r3, r0
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	1c5c      	adds	r4, r3, #1
 8005688:	b93a      	cbnz	r2, 800569a <strcat+0x1a>
 800568a:	3b01      	subs	r3, #1
 800568c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005690:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005694:	2a00      	cmp	r2, #0
 8005696:	d1f9      	bne.n	800568c <strcat+0xc>
 8005698:	bd10      	pop	{r4, pc}
 800569a:	4623      	mov	r3, r4
 800569c:	e7f2      	b.n	8005684 <strcat+0x4>

0800569e <__ssputs_r>:
 800569e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a2:	688e      	ldr	r6, [r1, #8]
 80056a4:	429e      	cmp	r6, r3
 80056a6:	4682      	mov	sl, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	4690      	mov	r8, r2
 80056ac:	4699      	mov	r9, r3
 80056ae:	d837      	bhi.n	8005720 <__ssputs_r+0x82>
 80056b0:	898a      	ldrh	r2, [r1, #12]
 80056b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056b6:	d031      	beq.n	800571c <__ssputs_r+0x7e>
 80056b8:	6825      	ldr	r5, [r4, #0]
 80056ba:	6909      	ldr	r1, [r1, #16]
 80056bc:	1a6f      	subs	r7, r5, r1
 80056be:	6965      	ldr	r5, [r4, #20]
 80056c0:	2302      	movs	r3, #2
 80056c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056c6:	fb95 f5f3 	sdiv	r5, r5, r3
 80056ca:	f109 0301 	add.w	r3, r9, #1
 80056ce:	443b      	add	r3, r7
 80056d0:	429d      	cmp	r5, r3
 80056d2:	bf38      	it	cc
 80056d4:	461d      	movcc	r5, r3
 80056d6:	0553      	lsls	r3, r2, #21
 80056d8:	d530      	bpl.n	800573c <__ssputs_r+0x9e>
 80056da:	4629      	mov	r1, r5
 80056dc:	f000 fb2c 	bl	8005d38 <_malloc_r>
 80056e0:	4606      	mov	r6, r0
 80056e2:	b950      	cbnz	r0, 80056fa <__ssputs_r+0x5c>
 80056e4:	230c      	movs	r3, #12
 80056e6:	f8ca 3000 	str.w	r3, [sl]
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fa:	463a      	mov	r2, r7
 80056fc:	6921      	ldr	r1, [r4, #16]
 80056fe:	f000 faa9 	bl	8005c54 <memcpy>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	6126      	str	r6, [r4, #16]
 8005710:	6165      	str	r5, [r4, #20]
 8005712:	443e      	add	r6, r7
 8005714:	1bed      	subs	r5, r5, r7
 8005716:	6026      	str	r6, [r4, #0]
 8005718:	60a5      	str	r5, [r4, #8]
 800571a:	464e      	mov	r6, r9
 800571c:	454e      	cmp	r6, r9
 800571e:	d900      	bls.n	8005722 <__ssputs_r+0x84>
 8005720:	464e      	mov	r6, r9
 8005722:	4632      	mov	r2, r6
 8005724:	4641      	mov	r1, r8
 8005726:	6820      	ldr	r0, [r4, #0]
 8005728:	f000 fa9f 	bl	8005c6a <memmove>
 800572c:	68a3      	ldr	r3, [r4, #8]
 800572e:	1b9b      	subs	r3, r3, r6
 8005730:	60a3      	str	r3, [r4, #8]
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	441e      	add	r6, r3
 8005736:	6026      	str	r6, [r4, #0]
 8005738:	2000      	movs	r0, #0
 800573a:	e7dc      	b.n	80056f6 <__ssputs_r+0x58>
 800573c:	462a      	mov	r2, r5
 800573e:	f000 fb55 	bl	8005dec <_realloc_r>
 8005742:	4606      	mov	r6, r0
 8005744:	2800      	cmp	r0, #0
 8005746:	d1e2      	bne.n	800570e <__ssputs_r+0x70>
 8005748:	6921      	ldr	r1, [r4, #16]
 800574a:	4650      	mov	r0, sl
 800574c:	f000 faa6 	bl	8005c9c <_free_r>
 8005750:	e7c8      	b.n	80056e4 <__ssputs_r+0x46>
	...

08005754 <_svfiprintf_r>:
 8005754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	461d      	mov	r5, r3
 800575a:	898b      	ldrh	r3, [r1, #12]
 800575c:	061f      	lsls	r7, r3, #24
 800575e:	b09d      	sub	sp, #116	; 0x74
 8005760:	4680      	mov	r8, r0
 8005762:	460c      	mov	r4, r1
 8005764:	4616      	mov	r6, r2
 8005766:	d50f      	bpl.n	8005788 <_svfiprintf_r+0x34>
 8005768:	690b      	ldr	r3, [r1, #16]
 800576a:	b96b      	cbnz	r3, 8005788 <_svfiprintf_r+0x34>
 800576c:	2140      	movs	r1, #64	; 0x40
 800576e:	f000 fae3 	bl	8005d38 <_malloc_r>
 8005772:	6020      	str	r0, [r4, #0]
 8005774:	6120      	str	r0, [r4, #16]
 8005776:	b928      	cbnz	r0, 8005784 <_svfiprintf_r+0x30>
 8005778:	230c      	movs	r3, #12
 800577a:	f8c8 3000 	str.w	r3, [r8]
 800577e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005782:	e0c8      	b.n	8005916 <_svfiprintf_r+0x1c2>
 8005784:	2340      	movs	r3, #64	; 0x40
 8005786:	6163      	str	r3, [r4, #20]
 8005788:	2300      	movs	r3, #0
 800578a:	9309      	str	r3, [sp, #36]	; 0x24
 800578c:	2320      	movs	r3, #32
 800578e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005792:	2330      	movs	r3, #48	; 0x30
 8005794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005798:	9503      	str	r5, [sp, #12]
 800579a:	f04f 0b01 	mov.w	fp, #1
 800579e:	4637      	mov	r7, r6
 80057a0:	463d      	mov	r5, r7
 80057a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80057a6:	b10b      	cbz	r3, 80057ac <_svfiprintf_r+0x58>
 80057a8:	2b25      	cmp	r3, #37	; 0x25
 80057aa:	d13e      	bne.n	800582a <_svfiprintf_r+0xd6>
 80057ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80057b0:	d00b      	beq.n	80057ca <_svfiprintf_r+0x76>
 80057b2:	4653      	mov	r3, sl
 80057b4:	4632      	mov	r2, r6
 80057b6:	4621      	mov	r1, r4
 80057b8:	4640      	mov	r0, r8
 80057ba:	f7ff ff70 	bl	800569e <__ssputs_r>
 80057be:	3001      	adds	r0, #1
 80057c0:	f000 80a4 	beq.w	800590c <_svfiprintf_r+0x1b8>
 80057c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c6:	4453      	add	r3, sl
 80057c8:	9309      	str	r3, [sp, #36]	; 0x24
 80057ca:	783b      	ldrb	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 809d 	beq.w	800590c <_svfiprintf_r+0x1b8>
 80057d2:	2300      	movs	r3, #0
 80057d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057dc:	9304      	str	r3, [sp, #16]
 80057de:	9307      	str	r3, [sp, #28]
 80057e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057e4:	931a      	str	r3, [sp, #104]	; 0x68
 80057e6:	462f      	mov	r7, r5
 80057e8:	2205      	movs	r2, #5
 80057ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80057ee:	4850      	ldr	r0, [pc, #320]	; (8005930 <_svfiprintf_r+0x1dc>)
 80057f0:	f7fa fcf6 	bl	80001e0 <memchr>
 80057f4:	9b04      	ldr	r3, [sp, #16]
 80057f6:	b9d0      	cbnz	r0, 800582e <_svfiprintf_r+0xda>
 80057f8:	06d9      	lsls	r1, r3, #27
 80057fa:	bf44      	itt	mi
 80057fc:	2220      	movmi	r2, #32
 80057fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005802:	071a      	lsls	r2, r3, #28
 8005804:	bf44      	itt	mi
 8005806:	222b      	movmi	r2, #43	; 0x2b
 8005808:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800580c:	782a      	ldrb	r2, [r5, #0]
 800580e:	2a2a      	cmp	r2, #42	; 0x2a
 8005810:	d015      	beq.n	800583e <_svfiprintf_r+0xea>
 8005812:	9a07      	ldr	r2, [sp, #28]
 8005814:	462f      	mov	r7, r5
 8005816:	2000      	movs	r0, #0
 8005818:	250a      	movs	r5, #10
 800581a:	4639      	mov	r1, r7
 800581c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005820:	3b30      	subs	r3, #48	; 0x30
 8005822:	2b09      	cmp	r3, #9
 8005824:	d94d      	bls.n	80058c2 <_svfiprintf_r+0x16e>
 8005826:	b1b8      	cbz	r0, 8005858 <_svfiprintf_r+0x104>
 8005828:	e00f      	b.n	800584a <_svfiprintf_r+0xf6>
 800582a:	462f      	mov	r7, r5
 800582c:	e7b8      	b.n	80057a0 <_svfiprintf_r+0x4c>
 800582e:	4a40      	ldr	r2, [pc, #256]	; (8005930 <_svfiprintf_r+0x1dc>)
 8005830:	1a80      	subs	r0, r0, r2
 8005832:	fa0b f000 	lsl.w	r0, fp, r0
 8005836:	4318      	orrs	r0, r3
 8005838:	9004      	str	r0, [sp, #16]
 800583a:	463d      	mov	r5, r7
 800583c:	e7d3      	b.n	80057e6 <_svfiprintf_r+0x92>
 800583e:	9a03      	ldr	r2, [sp, #12]
 8005840:	1d11      	adds	r1, r2, #4
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	9103      	str	r1, [sp, #12]
 8005846:	2a00      	cmp	r2, #0
 8005848:	db01      	blt.n	800584e <_svfiprintf_r+0xfa>
 800584a:	9207      	str	r2, [sp, #28]
 800584c:	e004      	b.n	8005858 <_svfiprintf_r+0x104>
 800584e:	4252      	negs	r2, r2
 8005850:	f043 0302 	orr.w	r3, r3, #2
 8005854:	9207      	str	r2, [sp, #28]
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	783b      	ldrb	r3, [r7, #0]
 800585a:	2b2e      	cmp	r3, #46	; 0x2e
 800585c:	d10c      	bne.n	8005878 <_svfiprintf_r+0x124>
 800585e:	787b      	ldrb	r3, [r7, #1]
 8005860:	2b2a      	cmp	r3, #42	; 0x2a
 8005862:	d133      	bne.n	80058cc <_svfiprintf_r+0x178>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	1d1a      	adds	r2, r3, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	9203      	str	r2, [sp, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	bfb8      	it	lt
 8005870:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005874:	3702      	adds	r7, #2
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	4d2e      	ldr	r5, [pc, #184]	; (8005934 <_svfiprintf_r+0x1e0>)
 800587a:	7839      	ldrb	r1, [r7, #0]
 800587c:	2203      	movs	r2, #3
 800587e:	4628      	mov	r0, r5
 8005880:	f7fa fcae 	bl	80001e0 <memchr>
 8005884:	b138      	cbz	r0, 8005896 <_svfiprintf_r+0x142>
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	1b40      	subs	r0, r0, r5
 800588a:	fa03 f000 	lsl.w	r0, r3, r0
 800588e:	9b04      	ldr	r3, [sp, #16]
 8005890:	4303      	orrs	r3, r0
 8005892:	3701      	adds	r7, #1
 8005894:	9304      	str	r3, [sp, #16]
 8005896:	7839      	ldrb	r1, [r7, #0]
 8005898:	4827      	ldr	r0, [pc, #156]	; (8005938 <_svfiprintf_r+0x1e4>)
 800589a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800589e:	2206      	movs	r2, #6
 80058a0:	1c7e      	adds	r6, r7, #1
 80058a2:	f7fa fc9d 	bl	80001e0 <memchr>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d038      	beq.n	800591c <_svfiprintf_r+0x1c8>
 80058aa:	4b24      	ldr	r3, [pc, #144]	; (800593c <_svfiprintf_r+0x1e8>)
 80058ac:	bb13      	cbnz	r3, 80058f4 <_svfiprintf_r+0x1a0>
 80058ae:	9b03      	ldr	r3, [sp, #12]
 80058b0:	3307      	adds	r3, #7
 80058b2:	f023 0307 	bic.w	r3, r3, #7
 80058b6:	3308      	adds	r3, #8
 80058b8:	9303      	str	r3, [sp, #12]
 80058ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058bc:	444b      	add	r3, r9
 80058be:	9309      	str	r3, [sp, #36]	; 0x24
 80058c0:	e76d      	b.n	800579e <_svfiprintf_r+0x4a>
 80058c2:	fb05 3202 	mla	r2, r5, r2, r3
 80058c6:	2001      	movs	r0, #1
 80058c8:	460f      	mov	r7, r1
 80058ca:	e7a6      	b.n	800581a <_svfiprintf_r+0xc6>
 80058cc:	2300      	movs	r3, #0
 80058ce:	3701      	adds	r7, #1
 80058d0:	9305      	str	r3, [sp, #20]
 80058d2:	4619      	mov	r1, r3
 80058d4:	250a      	movs	r5, #10
 80058d6:	4638      	mov	r0, r7
 80058d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058dc:	3a30      	subs	r2, #48	; 0x30
 80058de:	2a09      	cmp	r2, #9
 80058e0:	d903      	bls.n	80058ea <_svfiprintf_r+0x196>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0c8      	beq.n	8005878 <_svfiprintf_r+0x124>
 80058e6:	9105      	str	r1, [sp, #20]
 80058e8:	e7c6      	b.n	8005878 <_svfiprintf_r+0x124>
 80058ea:	fb05 2101 	mla	r1, r5, r1, r2
 80058ee:	2301      	movs	r3, #1
 80058f0:	4607      	mov	r7, r0
 80058f2:	e7f0      	b.n	80058d6 <_svfiprintf_r+0x182>
 80058f4:	ab03      	add	r3, sp, #12
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4622      	mov	r2, r4
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <_svfiprintf_r+0x1ec>)
 80058fc:	a904      	add	r1, sp, #16
 80058fe:	4640      	mov	r0, r8
 8005900:	f3af 8000 	nop.w
 8005904:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005908:	4681      	mov	r9, r0
 800590a:	d1d6      	bne.n	80058ba <_svfiprintf_r+0x166>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	065b      	lsls	r3, r3, #25
 8005910:	f53f af35 	bmi.w	800577e <_svfiprintf_r+0x2a>
 8005914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005916:	b01d      	add	sp, #116	; 0x74
 8005918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591c:	ab03      	add	r3, sp, #12
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	4622      	mov	r2, r4
 8005922:	4b07      	ldr	r3, [pc, #28]	; (8005940 <_svfiprintf_r+0x1ec>)
 8005924:	a904      	add	r1, sp, #16
 8005926:	4640      	mov	r0, r8
 8005928:	f000 f882 	bl	8005a30 <_printf_i>
 800592c:	e7ea      	b.n	8005904 <_svfiprintf_r+0x1b0>
 800592e:	bf00      	nop
 8005930:	08005efc 	.word	0x08005efc
 8005934:	08005f02 	.word	0x08005f02
 8005938:	08005f06 	.word	0x08005f06
 800593c:	00000000 	.word	0x00000000
 8005940:	0800569f 	.word	0x0800569f

08005944 <_printf_common>:
 8005944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	4691      	mov	r9, r2
 800594a:	461f      	mov	r7, r3
 800594c:	688a      	ldr	r2, [r1, #8]
 800594e:	690b      	ldr	r3, [r1, #16]
 8005950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005954:	4293      	cmp	r3, r2
 8005956:	bfb8      	it	lt
 8005958:	4613      	movlt	r3, r2
 800595a:	f8c9 3000 	str.w	r3, [r9]
 800595e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005962:	4606      	mov	r6, r0
 8005964:	460c      	mov	r4, r1
 8005966:	b112      	cbz	r2, 800596e <_printf_common+0x2a>
 8005968:	3301      	adds	r3, #1
 800596a:	f8c9 3000 	str.w	r3, [r9]
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	0699      	lsls	r1, r3, #26
 8005972:	bf42      	ittt	mi
 8005974:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005978:	3302      	addmi	r3, #2
 800597a:	f8c9 3000 	strmi.w	r3, [r9]
 800597e:	6825      	ldr	r5, [r4, #0]
 8005980:	f015 0506 	ands.w	r5, r5, #6
 8005984:	d107      	bne.n	8005996 <_printf_common+0x52>
 8005986:	f104 0a19 	add.w	sl, r4, #25
 800598a:	68e3      	ldr	r3, [r4, #12]
 800598c:	f8d9 2000 	ldr.w	r2, [r9]
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	42ab      	cmp	r3, r5
 8005994:	dc28      	bgt.n	80059e8 <_printf_common+0xa4>
 8005996:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800599a:	6822      	ldr	r2, [r4, #0]
 800599c:	3300      	adds	r3, #0
 800599e:	bf18      	it	ne
 80059a0:	2301      	movne	r3, #1
 80059a2:	0692      	lsls	r2, r2, #26
 80059a4:	d42d      	bmi.n	8005a02 <_printf_common+0xbe>
 80059a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059aa:	4639      	mov	r1, r7
 80059ac:	4630      	mov	r0, r6
 80059ae:	47c0      	blx	r8
 80059b0:	3001      	adds	r0, #1
 80059b2:	d020      	beq.n	80059f6 <_printf_common+0xb2>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	68e5      	ldr	r5, [r4, #12]
 80059b8:	f8d9 2000 	ldr.w	r2, [r9]
 80059bc:	f003 0306 	and.w	r3, r3, #6
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	bf08      	it	eq
 80059c4:	1aad      	subeq	r5, r5, r2
 80059c6:	68a3      	ldr	r3, [r4, #8]
 80059c8:	6922      	ldr	r2, [r4, #16]
 80059ca:	bf0c      	ite	eq
 80059cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059d0:	2500      	movne	r5, #0
 80059d2:	4293      	cmp	r3, r2
 80059d4:	bfc4      	itt	gt
 80059d6:	1a9b      	subgt	r3, r3, r2
 80059d8:	18ed      	addgt	r5, r5, r3
 80059da:	f04f 0900 	mov.w	r9, #0
 80059de:	341a      	adds	r4, #26
 80059e0:	454d      	cmp	r5, r9
 80059e2:	d11a      	bne.n	8005a1a <_printf_common+0xd6>
 80059e4:	2000      	movs	r0, #0
 80059e6:	e008      	b.n	80059fa <_printf_common+0xb6>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4652      	mov	r2, sl
 80059ec:	4639      	mov	r1, r7
 80059ee:	4630      	mov	r0, r6
 80059f0:	47c0      	blx	r8
 80059f2:	3001      	adds	r0, #1
 80059f4:	d103      	bne.n	80059fe <_printf_common+0xba>
 80059f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	3501      	adds	r5, #1
 8005a00:	e7c3      	b.n	800598a <_printf_common+0x46>
 8005a02:	18e1      	adds	r1, r4, r3
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	2030      	movs	r0, #48	; 0x30
 8005a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a0c:	4422      	add	r2, r4
 8005a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a16:	3302      	adds	r3, #2
 8005a18:	e7c5      	b.n	80059a6 <_printf_common+0x62>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	4639      	mov	r1, r7
 8005a20:	4630      	mov	r0, r6
 8005a22:	47c0      	blx	r8
 8005a24:	3001      	adds	r0, #1
 8005a26:	d0e6      	beq.n	80059f6 <_printf_common+0xb2>
 8005a28:	f109 0901 	add.w	r9, r9, #1
 8005a2c:	e7d8      	b.n	80059e0 <_printf_common+0x9c>
	...

08005a30 <_printf_i>:
 8005a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a38:	460c      	mov	r4, r1
 8005a3a:	7e09      	ldrb	r1, [r1, #24]
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	296e      	cmp	r1, #110	; 0x6e
 8005a40:	4617      	mov	r7, r2
 8005a42:	4606      	mov	r6, r0
 8005a44:	4698      	mov	r8, r3
 8005a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a48:	f000 80b3 	beq.w	8005bb2 <_printf_i+0x182>
 8005a4c:	d822      	bhi.n	8005a94 <_printf_i+0x64>
 8005a4e:	2963      	cmp	r1, #99	; 0x63
 8005a50:	d036      	beq.n	8005ac0 <_printf_i+0x90>
 8005a52:	d80a      	bhi.n	8005a6a <_printf_i+0x3a>
 8005a54:	2900      	cmp	r1, #0
 8005a56:	f000 80b9 	beq.w	8005bcc <_printf_i+0x19c>
 8005a5a:	2958      	cmp	r1, #88	; 0x58
 8005a5c:	f000 8083 	beq.w	8005b66 <_printf_i+0x136>
 8005a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005a68:	e032      	b.n	8005ad0 <_printf_i+0xa0>
 8005a6a:	2964      	cmp	r1, #100	; 0x64
 8005a6c:	d001      	beq.n	8005a72 <_printf_i+0x42>
 8005a6e:	2969      	cmp	r1, #105	; 0x69
 8005a70:	d1f6      	bne.n	8005a60 <_printf_i+0x30>
 8005a72:	6820      	ldr	r0, [r4, #0]
 8005a74:	6813      	ldr	r3, [r2, #0]
 8005a76:	0605      	lsls	r5, r0, #24
 8005a78:	f103 0104 	add.w	r1, r3, #4
 8005a7c:	d52a      	bpl.n	8005ad4 <_printf_i+0xa4>
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	da03      	bge.n	8005a8e <_printf_i+0x5e>
 8005a86:	222d      	movs	r2, #45	; 0x2d
 8005a88:	425b      	negs	r3, r3
 8005a8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a8e:	486f      	ldr	r0, [pc, #444]	; (8005c4c <_printf_i+0x21c>)
 8005a90:	220a      	movs	r2, #10
 8005a92:	e039      	b.n	8005b08 <_printf_i+0xd8>
 8005a94:	2973      	cmp	r1, #115	; 0x73
 8005a96:	f000 809d 	beq.w	8005bd4 <_printf_i+0x1a4>
 8005a9a:	d808      	bhi.n	8005aae <_printf_i+0x7e>
 8005a9c:	296f      	cmp	r1, #111	; 0x6f
 8005a9e:	d020      	beq.n	8005ae2 <_printf_i+0xb2>
 8005aa0:	2970      	cmp	r1, #112	; 0x70
 8005aa2:	d1dd      	bne.n	8005a60 <_printf_i+0x30>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	f043 0320 	orr.w	r3, r3, #32
 8005aaa:	6023      	str	r3, [r4, #0]
 8005aac:	e003      	b.n	8005ab6 <_printf_i+0x86>
 8005aae:	2975      	cmp	r1, #117	; 0x75
 8005ab0:	d017      	beq.n	8005ae2 <_printf_i+0xb2>
 8005ab2:	2978      	cmp	r1, #120	; 0x78
 8005ab4:	d1d4      	bne.n	8005a60 <_printf_i+0x30>
 8005ab6:	2378      	movs	r3, #120	; 0x78
 8005ab8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005abc:	4864      	ldr	r0, [pc, #400]	; (8005c50 <_printf_i+0x220>)
 8005abe:	e055      	b.n	8005b6c <_printf_i+0x13c>
 8005ac0:	6813      	ldr	r3, [r2, #0]
 8005ac2:	1d19      	adds	r1, r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6011      	str	r1, [r2, #0]
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e08c      	b.n	8005bee <_printf_i+0x1be>
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6011      	str	r1, [r2, #0]
 8005ad8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005adc:	bf18      	it	ne
 8005ade:	b21b      	sxthne	r3, r3
 8005ae0:	e7cf      	b.n	8005a82 <_printf_i+0x52>
 8005ae2:	6813      	ldr	r3, [r2, #0]
 8005ae4:	6825      	ldr	r5, [r4, #0]
 8005ae6:	1d18      	adds	r0, r3, #4
 8005ae8:	6010      	str	r0, [r2, #0]
 8005aea:	0628      	lsls	r0, r5, #24
 8005aec:	d501      	bpl.n	8005af2 <_printf_i+0xc2>
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	e002      	b.n	8005af8 <_printf_i+0xc8>
 8005af2:	0668      	lsls	r0, r5, #25
 8005af4:	d5fb      	bpl.n	8005aee <_printf_i+0xbe>
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	4854      	ldr	r0, [pc, #336]	; (8005c4c <_printf_i+0x21c>)
 8005afa:	296f      	cmp	r1, #111	; 0x6f
 8005afc:	bf14      	ite	ne
 8005afe:	220a      	movne	r2, #10
 8005b00:	2208      	moveq	r2, #8
 8005b02:	2100      	movs	r1, #0
 8005b04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b08:	6865      	ldr	r5, [r4, #4]
 8005b0a:	60a5      	str	r5, [r4, #8]
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	f2c0 8095 	blt.w	8005c3c <_printf_i+0x20c>
 8005b12:	6821      	ldr	r1, [r4, #0]
 8005b14:	f021 0104 	bic.w	r1, r1, #4
 8005b18:	6021      	str	r1, [r4, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d13d      	bne.n	8005b9a <_printf_i+0x16a>
 8005b1e:	2d00      	cmp	r5, #0
 8005b20:	f040 808e 	bne.w	8005c40 <_printf_i+0x210>
 8005b24:	4665      	mov	r5, ip
 8005b26:	2a08      	cmp	r2, #8
 8005b28:	d10b      	bne.n	8005b42 <_printf_i+0x112>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	07db      	lsls	r3, r3, #31
 8005b2e:	d508      	bpl.n	8005b42 <_printf_i+0x112>
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	6862      	ldr	r2, [r4, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	bfde      	ittt	le
 8005b38:	2330      	movle	r3, #48	; 0x30
 8005b3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b3e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b42:	ebac 0305 	sub.w	r3, ip, r5
 8005b46:	6123      	str	r3, [r4, #16]
 8005b48:	f8cd 8000 	str.w	r8, [sp]
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	aa03      	add	r2, sp, #12
 8005b50:	4621      	mov	r1, r4
 8005b52:	4630      	mov	r0, r6
 8005b54:	f7ff fef6 	bl	8005944 <_printf_common>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d14d      	bne.n	8005bf8 <_printf_i+0x1c8>
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b60:	b005      	add	sp, #20
 8005b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b66:	4839      	ldr	r0, [pc, #228]	; (8005c4c <_printf_i+0x21c>)
 8005b68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005b6c:	6813      	ldr	r3, [r2, #0]
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	1d1d      	adds	r5, r3, #4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6015      	str	r5, [r2, #0]
 8005b76:	060a      	lsls	r2, r1, #24
 8005b78:	d50b      	bpl.n	8005b92 <_printf_i+0x162>
 8005b7a:	07ca      	lsls	r2, r1, #31
 8005b7c:	bf44      	itt	mi
 8005b7e:	f041 0120 	orrmi.w	r1, r1, #32
 8005b82:	6021      	strmi	r1, [r4, #0]
 8005b84:	b91b      	cbnz	r3, 8005b8e <_printf_i+0x15e>
 8005b86:	6822      	ldr	r2, [r4, #0]
 8005b88:	f022 0220 	bic.w	r2, r2, #32
 8005b8c:	6022      	str	r2, [r4, #0]
 8005b8e:	2210      	movs	r2, #16
 8005b90:	e7b7      	b.n	8005b02 <_printf_i+0xd2>
 8005b92:	064d      	lsls	r5, r1, #25
 8005b94:	bf48      	it	mi
 8005b96:	b29b      	uxthmi	r3, r3
 8005b98:	e7ef      	b.n	8005b7a <_printf_i+0x14a>
 8005b9a:	4665      	mov	r5, ip
 8005b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ba0:	fb02 3311 	mls	r3, r2, r1, r3
 8005ba4:	5cc3      	ldrb	r3, [r0, r3]
 8005ba6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005baa:	460b      	mov	r3, r1
 8005bac:	2900      	cmp	r1, #0
 8005bae:	d1f5      	bne.n	8005b9c <_printf_i+0x16c>
 8005bb0:	e7b9      	b.n	8005b26 <_printf_i+0xf6>
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	6961      	ldr	r1, [r4, #20]
 8005bb8:	1d18      	adds	r0, r3, #4
 8005bba:	6010      	str	r0, [r2, #0]
 8005bbc:	0628      	lsls	r0, r5, #24
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	d501      	bpl.n	8005bc6 <_printf_i+0x196>
 8005bc2:	6019      	str	r1, [r3, #0]
 8005bc4:	e002      	b.n	8005bcc <_printf_i+0x19c>
 8005bc6:	066a      	lsls	r2, r5, #25
 8005bc8:	d5fb      	bpl.n	8005bc2 <_printf_i+0x192>
 8005bca:	8019      	strh	r1, [r3, #0]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	4665      	mov	r5, ip
 8005bd2:	e7b9      	b.n	8005b48 <_printf_i+0x118>
 8005bd4:	6813      	ldr	r3, [r2, #0]
 8005bd6:	1d19      	adds	r1, r3, #4
 8005bd8:	6011      	str	r1, [r2, #0]
 8005bda:	681d      	ldr	r5, [r3, #0]
 8005bdc:	6862      	ldr	r2, [r4, #4]
 8005bde:	2100      	movs	r1, #0
 8005be0:	4628      	mov	r0, r5
 8005be2:	f7fa fafd 	bl	80001e0 <memchr>
 8005be6:	b108      	cbz	r0, 8005bec <_printf_i+0x1bc>
 8005be8:	1b40      	subs	r0, r0, r5
 8005bea:	6060      	str	r0, [r4, #4]
 8005bec:	6863      	ldr	r3, [r4, #4]
 8005bee:	6123      	str	r3, [r4, #16]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf6:	e7a7      	b.n	8005b48 <_printf_i+0x118>
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	462a      	mov	r2, r5
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	4630      	mov	r0, r6
 8005c00:	47c0      	blx	r8
 8005c02:	3001      	adds	r0, #1
 8005c04:	d0aa      	beq.n	8005b5c <_printf_i+0x12c>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	079b      	lsls	r3, r3, #30
 8005c0a:	d413      	bmi.n	8005c34 <_printf_i+0x204>
 8005c0c:	68e0      	ldr	r0, [r4, #12]
 8005c0e:	9b03      	ldr	r3, [sp, #12]
 8005c10:	4298      	cmp	r0, r3
 8005c12:	bfb8      	it	lt
 8005c14:	4618      	movlt	r0, r3
 8005c16:	e7a3      	b.n	8005b60 <_printf_i+0x130>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	464a      	mov	r2, r9
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	4630      	mov	r0, r6
 8005c20:	47c0      	blx	r8
 8005c22:	3001      	adds	r0, #1
 8005c24:	d09a      	beq.n	8005b5c <_printf_i+0x12c>
 8005c26:	3501      	adds	r5, #1
 8005c28:	68e3      	ldr	r3, [r4, #12]
 8005c2a:	9a03      	ldr	r2, [sp, #12]
 8005c2c:	1a9b      	subs	r3, r3, r2
 8005c2e:	42ab      	cmp	r3, r5
 8005c30:	dcf2      	bgt.n	8005c18 <_printf_i+0x1e8>
 8005c32:	e7eb      	b.n	8005c0c <_printf_i+0x1dc>
 8005c34:	2500      	movs	r5, #0
 8005c36:	f104 0919 	add.w	r9, r4, #25
 8005c3a:	e7f5      	b.n	8005c28 <_printf_i+0x1f8>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1ac      	bne.n	8005b9a <_printf_i+0x16a>
 8005c40:	7803      	ldrb	r3, [r0, #0]
 8005c42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c4a:	e76c      	b.n	8005b26 <_printf_i+0xf6>
 8005c4c:	08005f0d 	.word	0x08005f0d
 8005c50:	08005f1e 	.word	0x08005f1e

08005c54 <memcpy>:
 8005c54:	b510      	push	{r4, lr}
 8005c56:	1e43      	subs	r3, r0, #1
 8005c58:	440a      	add	r2, r1
 8005c5a:	4291      	cmp	r1, r2
 8005c5c:	d100      	bne.n	8005c60 <memcpy+0xc>
 8005c5e:	bd10      	pop	{r4, pc}
 8005c60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c68:	e7f7      	b.n	8005c5a <memcpy+0x6>

08005c6a <memmove>:
 8005c6a:	4288      	cmp	r0, r1
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	eb01 0302 	add.w	r3, r1, r2
 8005c72:	d807      	bhi.n	8005c84 <memmove+0x1a>
 8005c74:	1e42      	subs	r2, r0, #1
 8005c76:	4299      	cmp	r1, r3
 8005c78:	d00a      	beq.n	8005c90 <memmove+0x26>
 8005c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c7e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005c82:	e7f8      	b.n	8005c76 <memmove+0xc>
 8005c84:	4283      	cmp	r3, r0
 8005c86:	d9f5      	bls.n	8005c74 <memmove+0xa>
 8005c88:	1881      	adds	r1, r0, r2
 8005c8a:	1ad2      	subs	r2, r2, r3
 8005c8c:	42d3      	cmn	r3, r2
 8005c8e:	d100      	bne.n	8005c92 <memmove+0x28>
 8005c90:	bd10      	pop	{r4, pc}
 8005c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005c9a:	e7f7      	b.n	8005c8c <memmove+0x22>

08005c9c <_free_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4605      	mov	r5, r0
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	d045      	beq.n	8005d30 <_free_r+0x94>
 8005ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca8:	1f0c      	subs	r4, r1, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bfb8      	it	lt
 8005cae:	18e4      	addlt	r4, r4, r3
 8005cb0:	f000 f8d2 	bl	8005e58 <__malloc_lock>
 8005cb4:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <_free_r+0x98>)
 8005cb6:	6813      	ldr	r3, [r2, #0]
 8005cb8:	4610      	mov	r0, r2
 8005cba:	b933      	cbnz	r3, 8005cca <_free_r+0x2e>
 8005cbc:	6063      	str	r3, [r4, #4]
 8005cbe:	6014      	str	r4, [r2, #0]
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cc6:	f000 b8c8 	b.w	8005e5a <__malloc_unlock>
 8005cca:	42a3      	cmp	r3, r4
 8005ccc:	d90c      	bls.n	8005ce8 <_free_r+0x4c>
 8005cce:	6821      	ldr	r1, [r4, #0]
 8005cd0:	1862      	adds	r2, r4, r1
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	bf04      	itt	eq
 8005cd6:	681a      	ldreq	r2, [r3, #0]
 8005cd8:	685b      	ldreq	r3, [r3, #4]
 8005cda:	6063      	str	r3, [r4, #4]
 8005cdc:	bf04      	itt	eq
 8005cde:	1852      	addeq	r2, r2, r1
 8005ce0:	6022      	streq	r2, [r4, #0]
 8005ce2:	6004      	str	r4, [r0, #0]
 8005ce4:	e7ec      	b.n	8005cc0 <_free_r+0x24>
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	b10a      	cbz	r2, 8005cf0 <_free_r+0x54>
 8005cec:	42a2      	cmp	r2, r4
 8005cee:	d9fa      	bls.n	8005ce6 <_free_r+0x4a>
 8005cf0:	6819      	ldr	r1, [r3, #0]
 8005cf2:	1858      	adds	r0, r3, r1
 8005cf4:	42a0      	cmp	r0, r4
 8005cf6:	d10b      	bne.n	8005d10 <_free_r+0x74>
 8005cf8:	6820      	ldr	r0, [r4, #0]
 8005cfa:	4401      	add	r1, r0
 8005cfc:	1858      	adds	r0, r3, r1
 8005cfe:	4282      	cmp	r2, r0
 8005d00:	6019      	str	r1, [r3, #0]
 8005d02:	d1dd      	bne.n	8005cc0 <_free_r+0x24>
 8005d04:	6810      	ldr	r0, [r2, #0]
 8005d06:	6852      	ldr	r2, [r2, #4]
 8005d08:	605a      	str	r2, [r3, #4]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	6019      	str	r1, [r3, #0]
 8005d0e:	e7d7      	b.n	8005cc0 <_free_r+0x24>
 8005d10:	d902      	bls.n	8005d18 <_free_r+0x7c>
 8005d12:	230c      	movs	r3, #12
 8005d14:	602b      	str	r3, [r5, #0]
 8005d16:	e7d3      	b.n	8005cc0 <_free_r+0x24>
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	1821      	adds	r1, r4, r0
 8005d1c:	428a      	cmp	r2, r1
 8005d1e:	bf04      	itt	eq
 8005d20:	6811      	ldreq	r1, [r2, #0]
 8005d22:	6852      	ldreq	r2, [r2, #4]
 8005d24:	6062      	str	r2, [r4, #4]
 8005d26:	bf04      	itt	eq
 8005d28:	1809      	addeq	r1, r1, r0
 8005d2a:	6021      	streq	r1, [r4, #0]
 8005d2c:	605c      	str	r4, [r3, #4]
 8005d2e:	e7c7      	b.n	8005cc0 <_free_r+0x24>
 8005d30:	bd38      	pop	{r3, r4, r5, pc}
 8005d32:	bf00      	nop
 8005d34:	2000064c 	.word	0x2000064c

08005d38 <_malloc_r>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	1ccd      	adds	r5, r1, #3
 8005d3c:	f025 0503 	bic.w	r5, r5, #3
 8005d40:	3508      	adds	r5, #8
 8005d42:	2d0c      	cmp	r5, #12
 8005d44:	bf38      	it	cc
 8005d46:	250c      	movcc	r5, #12
 8005d48:	2d00      	cmp	r5, #0
 8005d4a:	4606      	mov	r6, r0
 8005d4c:	db01      	blt.n	8005d52 <_malloc_r+0x1a>
 8005d4e:	42a9      	cmp	r1, r5
 8005d50:	d903      	bls.n	8005d5a <_malloc_r+0x22>
 8005d52:	230c      	movs	r3, #12
 8005d54:	6033      	str	r3, [r6, #0]
 8005d56:	2000      	movs	r0, #0
 8005d58:	bd70      	pop	{r4, r5, r6, pc}
 8005d5a:	f000 f87d 	bl	8005e58 <__malloc_lock>
 8005d5e:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <_malloc_r+0xac>)
 8005d60:	6814      	ldr	r4, [r2, #0]
 8005d62:	4621      	mov	r1, r4
 8005d64:	b991      	cbnz	r1, 8005d8c <_malloc_r+0x54>
 8005d66:	4c20      	ldr	r4, [pc, #128]	; (8005de8 <_malloc_r+0xb0>)
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	b91b      	cbnz	r3, 8005d74 <_malloc_r+0x3c>
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f000 f863 	bl	8005e38 <_sbrk_r>
 8005d72:	6020      	str	r0, [r4, #0]
 8005d74:	4629      	mov	r1, r5
 8005d76:	4630      	mov	r0, r6
 8005d78:	f000 f85e 	bl	8005e38 <_sbrk_r>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d124      	bne.n	8005dca <_malloc_r+0x92>
 8005d80:	230c      	movs	r3, #12
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	4630      	mov	r0, r6
 8005d86:	f000 f868 	bl	8005e5a <__malloc_unlock>
 8005d8a:	e7e4      	b.n	8005d56 <_malloc_r+0x1e>
 8005d8c:	680b      	ldr	r3, [r1, #0]
 8005d8e:	1b5b      	subs	r3, r3, r5
 8005d90:	d418      	bmi.n	8005dc4 <_malloc_r+0x8c>
 8005d92:	2b0b      	cmp	r3, #11
 8005d94:	d90f      	bls.n	8005db6 <_malloc_r+0x7e>
 8005d96:	600b      	str	r3, [r1, #0]
 8005d98:	50cd      	str	r5, [r1, r3]
 8005d9a:	18cc      	adds	r4, r1, r3
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f000 f85c 	bl	8005e5a <__malloc_unlock>
 8005da2:	f104 000b 	add.w	r0, r4, #11
 8005da6:	1d23      	adds	r3, r4, #4
 8005da8:	f020 0007 	bic.w	r0, r0, #7
 8005dac:	1ac3      	subs	r3, r0, r3
 8005dae:	d0d3      	beq.n	8005d58 <_malloc_r+0x20>
 8005db0:	425a      	negs	r2, r3
 8005db2:	50e2      	str	r2, [r4, r3]
 8005db4:	e7d0      	b.n	8005d58 <_malloc_r+0x20>
 8005db6:	428c      	cmp	r4, r1
 8005db8:	684b      	ldr	r3, [r1, #4]
 8005dba:	bf16      	itet	ne
 8005dbc:	6063      	strne	r3, [r4, #4]
 8005dbe:	6013      	streq	r3, [r2, #0]
 8005dc0:	460c      	movne	r4, r1
 8005dc2:	e7eb      	b.n	8005d9c <_malloc_r+0x64>
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	6849      	ldr	r1, [r1, #4]
 8005dc8:	e7cc      	b.n	8005d64 <_malloc_r+0x2c>
 8005dca:	1cc4      	adds	r4, r0, #3
 8005dcc:	f024 0403 	bic.w	r4, r4, #3
 8005dd0:	42a0      	cmp	r0, r4
 8005dd2:	d005      	beq.n	8005de0 <_malloc_r+0xa8>
 8005dd4:	1a21      	subs	r1, r4, r0
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f000 f82e 	bl	8005e38 <_sbrk_r>
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d0cf      	beq.n	8005d80 <_malloc_r+0x48>
 8005de0:	6025      	str	r5, [r4, #0]
 8005de2:	e7db      	b.n	8005d9c <_malloc_r+0x64>
 8005de4:	2000064c 	.word	0x2000064c
 8005de8:	20000650 	.word	0x20000650

08005dec <_realloc_r>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	4607      	mov	r7, r0
 8005df0:	4614      	mov	r4, r2
 8005df2:	460e      	mov	r6, r1
 8005df4:	b921      	cbnz	r1, 8005e00 <_realloc_r+0x14>
 8005df6:	4611      	mov	r1, r2
 8005df8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005dfc:	f7ff bf9c 	b.w	8005d38 <_malloc_r>
 8005e00:	b922      	cbnz	r2, 8005e0c <_realloc_r+0x20>
 8005e02:	f7ff ff4b 	bl	8005c9c <_free_r>
 8005e06:	4625      	mov	r5, r4
 8005e08:	4628      	mov	r0, r5
 8005e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e0c:	f000 f826 	bl	8005e5c <_malloc_usable_size_r>
 8005e10:	42a0      	cmp	r0, r4
 8005e12:	d20f      	bcs.n	8005e34 <_realloc_r+0x48>
 8005e14:	4621      	mov	r1, r4
 8005e16:	4638      	mov	r0, r7
 8005e18:	f7ff ff8e 	bl	8005d38 <_malloc_r>
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d0f2      	beq.n	8005e08 <_realloc_r+0x1c>
 8005e22:	4631      	mov	r1, r6
 8005e24:	4622      	mov	r2, r4
 8005e26:	f7ff ff15 	bl	8005c54 <memcpy>
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7ff ff35 	bl	8005c9c <_free_r>
 8005e32:	e7e9      	b.n	8005e08 <_realloc_r+0x1c>
 8005e34:	4635      	mov	r5, r6
 8005e36:	e7e7      	b.n	8005e08 <_realloc_r+0x1c>

08005e38 <_sbrk_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4c06      	ldr	r4, [pc, #24]	; (8005e54 <_sbrk_r+0x1c>)
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4605      	mov	r5, r0
 8005e40:	4608      	mov	r0, r1
 8005e42:	6023      	str	r3, [r4, #0]
 8005e44:	f7ff fb34 	bl	80054b0 <_sbrk>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_sbrk_r+0x1a>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_sbrk_r+0x1a>
 8005e50:	602b      	str	r3, [r5, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	2000091c 	.word	0x2000091c

08005e58 <__malloc_lock>:
 8005e58:	4770      	bx	lr

08005e5a <__malloc_unlock>:
 8005e5a:	4770      	bx	lr

08005e5c <_malloc_usable_size_r>:
 8005e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e60:	1f18      	subs	r0, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bfbc      	itt	lt
 8005e66:	580b      	ldrlt	r3, [r1, r0]
 8005e68:	18c0      	addlt	r0, r0, r3
 8005e6a:	4770      	bx	lr

08005e6c <_init>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr

08005e78 <_fini>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr
