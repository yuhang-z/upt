
utp_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006190  08006190  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006198  08006198  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080061a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200000f8  08006298  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08006298  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016141  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ab5  00000000  00000000  00036269  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d0  00000000  00000000  00038d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001258  00000000  00000000  0003a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028394  00000000  00000000  0003b348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c5c  00000000  00000000  000636dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f71a8  00000000  00000000  00074338  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016b4e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005578  00000000  00000000  0016b55c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060b4 	.word	0x080060b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	080060b4 	.word	0x080060b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f95e 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000580:	2000      	movs	r0, #0
 8000582:	f000 f80d 	bl	80005a0 <HAL_InitTick>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e001      	b.n	8000596 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000592:	f004 ff95 	bl	80054c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000596:	79fb      	ldrb	r3, [r7, #7]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_InitTick+0x6c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d023      	beq.n	80005fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_InitTick+0x70>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <HAL_InitTick+0x6c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f96b 	bl	80008a6 <HAL_SYSTICK_Config>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10f      	bne.n	80005f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d809      	bhi.n	80005f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e4:	f000 f935 	bl	8000852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <HAL_InitTick+0x74>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
 80005ee:	e007      	b.n	8000600 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	e004      	b.n	8000600 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	e001      	b.n	8000600 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000600:	7bfb      	ldrb	r3, [r7, #15]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000004 	.word	0x20000004
 8000610:	20000090 	.word	0x20000090
 8000614:	20000000 	.word	0x20000000

08000618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x20>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_IncTick+0x24>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4413      	add	r3, r2
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_IncTick+0x24>)
 800062a:	6013      	str	r3, [r2, #0]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000004 	.word	0x20000004
 800063c:	2000014c 	.word	0x2000014c

08000640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_GetTick+0x14>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	2000014c 	.word	0x2000014c

08000658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000660:	f7ff ffee 	bl	8000640 <HAL_GetTick>
 8000664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000670:	d005      	beq.n	800067e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_Delay+0x40>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800067e:	bf00      	nop
 8000680:	f7ff ffde 	bl	8000640 <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8f7      	bhi.n	8000680 <HAL_Delay+0x28>
  {
  }
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000004 	.word	0x20000004

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4907      	ldr	r1, [pc, #28]	; (8000738 <__NVIC_EnableIRQ+0x38>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000e100 	.word	0xe000e100

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	210f      	movs	r1, #15
 8000818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800081c:	f7ff ff8e 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff29 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff3e 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ff8e 	bl	8000790 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff5d 	bl	800073c <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff31 	bl	8000700 <__NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ffa2 	bl	80007f8 <SysTick_Config>
 80008b4:	4603      	mov	r3, r0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ce:	e17f      	b.n	8000bd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	2101      	movs	r1, #1
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	fa01 f303 	lsl.w	r3, r1, r3
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f000 8171 	beq.w	8000bca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d00b      	beq.n	8000908 <HAL_GPIO_Init+0x48>
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d007      	beq.n	8000908 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008fc:	2b11      	cmp	r3, #17
 80008fe:	d003      	beq.n	8000908 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b12      	cmp	r3, #18
 8000906:	d130      	bne.n	800096a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	2203      	movs	r2, #3
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4013      	ands	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68da      	ldr	r2, [r3, #12]
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4313      	orrs	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800093e:	2201      	movs	r2, #1
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4013      	ands	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	091b      	lsrs	r3, r3, #4
 8000954:	f003 0201 	and.w	r2, r3, #1
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	2b03      	cmp	r3, #3
 8000974:	d118      	bne.n	80009a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800097c:	2201      	movs	r2, #1
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	08db      	lsrs	r3, r3, #3
 8000992:	f003 0201 	and.w	r2, r3, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d003      	beq.n	80009e8 <HAL_GPIO_Init+0x128>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b12      	cmp	r3, #18
 80009e6:	d123      	bne.n	8000a30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	08da      	lsrs	r2, r3, #3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3208      	adds	r2, #8
 80009f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f003 0307 	and.w	r3, r3, #7
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	220f      	movs	r2, #15
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	691a      	ldr	r2, [r3, #16]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	6939      	ldr	r1, [r7, #16]
 8000a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0203 	and.w	r2, r3, #3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f000 80ac 	beq.w	8000bca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b5e      	ldr	r3, [pc, #376]	; (8000bec <HAL_GPIO_Init+0x32c>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	4a5d      	ldr	r2, [pc, #372]	; (8000bec <HAL_GPIO_Init+0x32c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7e:	4b5b      	ldr	r3, [pc, #364]	; (8000bec <HAL_GPIO_Init+0x32c>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a8a:	4a59      	ldr	r2, [pc, #356]	; (8000bf0 <HAL_GPIO_Init+0x330>)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ab4:	d025      	beq.n	8000b02 <HAL_GPIO_Init+0x242>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a4e      	ldr	r2, [pc, #312]	; (8000bf4 <HAL_GPIO_Init+0x334>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d01f      	beq.n	8000afe <HAL_GPIO_Init+0x23e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a4d      	ldr	r2, [pc, #308]	; (8000bf8 <HAL_GPIO_Init+0x338>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d019      	beq.n	8000afa <HAL_GPIO_Init+0x23a>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4c      	ldr	r2, [pc, #304]	; (8000bfc <HAL_GPIO_Init+0x33c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d013      	beq.n	8000af6 <HAL_GPIO_Init+0x236>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4b      	ldr	r2, [pc, #300]	; (8000c00 <HAL_GPIO_Init+0x340>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d00d      	beq.n	8000af2 <HAL_GPIO_Init+0x232>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <HAL_GPIO_Init+0x344>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d007      	beq.n	8000aee <HAL_GPIO_Init+0x22e>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a49      	ldr	r2, [pc, #292]	; (8000c08 <HAL_GPIO_Init+0x348>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_GPIO_Init+0x22a>
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	e00c      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000aea:	2307      	movs	r3, #7
 8000aec:	e00a      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000aee:	2305      	movs	r3, #5
 8000af0:	e008      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000af2:	2304      	movs	r3, #4
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000af6:	2303      	movs	r3, #3
 8000af8:	e004      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000afa:	2302      	movs	r3, #2
 8000afc:	e002      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <HAL_GPIO_Init+0x244>
 8000b02:	2300      	movs	r3, #0
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	f002 0203 	and.w	r2, r2, #3
 8000b0a:	0092      	lsls	r2, r2, #2
 8000b0c:	4093      	lsls	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b14:	4936      	ldr	r1, [pc, #216]	; (8000bf0 <HAL_GPIO_Init+0x330>)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b22:	4b3a      	ldr	r3, [pc, #232]	; (8000c0c <HAL_GPIO_Init+0x34c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b46:	4a31      	ldr	r2, [pc, #196]	; (8000c0c <HAL_GPIO_Init+0x34c>)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <HAL_GPIO_Init+0x34c>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b70:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <HAL_GPIO_Init+0x34c>)
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <HAL_GPIO_Init+0x34c>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <HAL_GPIO_Init+0x34c>)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <HAL_GPIO_Init+0x34c>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bc4:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <HAL_GPIO_Init+0x34c>)
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f47f ae78 	bne.w	80008d0 <HAL_GPIO_Init+0x10>
  }
}
 8000be0:	bf00      	nop
 8000be2:	371c      	adds	r7, #28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	48000c00 	.word	0x48000c00
 8000c00:	48001000 	.word	0x48001000
 8000c04:	48001400 	.word	0x48001400
 8000c08:	48001800 	.word	0x48001800
 8000c0c:	40010400 	.word	0x40010400

08000c10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000c1e:	e0cd      	b.n	8000dbc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000c20:	2201      	movs	r2, #1
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80c0 	beq.w	8000db6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000c36:	4a68      	ldr	r2, [pc, #416]	; (8000dd8 <HAL_GPIO_DeInit+0x1c8>)
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c5e:	d025      	beq.n	8000cac <HAL_GPIO_DeInit+0x9c>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a5e      	ldr	r2, [pc, #376]	; (8000ddc <HAL_GPIO_DeInit+0x1cc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d01f      	beq.n	8000ca8 <HAL_GPIO_DeInit+0x98>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a5d      	ldr	r2, [pc, #372]	; (8000de0 <HAL_GPIO_DeInit+0x1d0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d019      	beq.n	8000ca4 <HAL_GPIO_DeInit+0x94>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a5c      	ldr	r2, [pc, #368]	; (8000de4 <HAL_GPIO_DeInit+0x1d4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d013      	beq.n	8000ca0 <HAL_GPIO_DeInit+0x90>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a5b      	ldr	r2, [pc, #364]	; (8000de8 <HAL_GPIO_DeInit+0x1d8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d00d      	beq.n	8000c9c <HAL_GPIO_DeInit+0x8c>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a5a      	ldr	r2, [pc, #360]	; (8000dec <HAL_GPIO_DeInit+0x1dc>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d007      	beq.n	8000c98 <HAL_GPIO_DeInit+0x88>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a59      	ldr	r2, [pc, #356]	; (8000df0 <HAL_GPIO_DeInit+0x1e0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d101      	bne.n	8000c94 <HAL_GPIO_DeInit+0x84>
 8000c90:	2306      	movs	r3, #6
 8000c92:	e00c      	b.n	8000cae <HAL_GPIO_DeInit+0x9e>
 8000c94:	2307      	movs	r3, #7
 8000c96:	e00a      	b.n	8000cae <HAL_GPIO_DeInit+0x9e>
 8000c98:	2305      	movs	r3, #5
 8000c9a:	e008      	b.n	8000cae <HAL_GPIO_DeInit+0x9e>
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	e006      	b.n	8000cae <HAL_GPIO_DeInit+0x9e>
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e004      	b.n	8000cae <HAL_GPIO_DeInit+0x9e>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e002      	b.n	8000cae <HAL_GPIO_DeInit+0x9e>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e000      	b.n	8000cae <HAL_GPIO_DeInit+0x9e>
 8000cac:	2300      	movs	r3, #0
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	f002 0203 	and.w	r2, r2, #3
 8000cb4:	0092      	lsls	r2, r2, #2
 8000cb6:	4093      	lsls	r3, r2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d132      	bne.n	8000d24 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000cbe:	4b4d      	ldr	r3, [pc, #308]	; (8000df4 <HAL_GPIO_DeInit+0x1e4>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	494b      	ldr	r1, [pc, #300]	; (8000df4 <HAL_GPIO_DeInit+0x1e4>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000ccc:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <HAL_GPIO_DeInit+0x1e4>)
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	4947      	ldr	r1, [pc, #284]	; (8000df4 <HAL_GPIO_DeInit+0x1e4>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000cda:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <HAL_GPIO_DeInit+0x1e4>)
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4944      	ldr	r1, [pc, #272]	; (8000df4 <HAL_GPIO_DeInit+0x1e4>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <HAL_GPIO_DeInit+0x1e4>)
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4940      	ldr	r1, [pc, #256]	; (8000df4 <HAL_GPIO_DeInit+0x1e4>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000d06:	4a34      	ldr	r2, [pc, #208]	; (8000dd8 <HAL_GPIO_DeInit+0x1c8>)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	43da      	mvns	r2, r3
 8000d16:	4830      	ldr	r0, [pc, #192]	; (8000dd8 <HAL_GPIO_DeInit+0x1c8>)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	3302      	adds	r3, #2
 8000d20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2103      	movs	r1, #3
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	08d2      	lsrs	r2, r2, #3
 8000d58:	4019      	ands	r1, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3208      	adds	r2, #8
 8000d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	401a      	ands	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	401a      	ands	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2103      	movs	r1, #3
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da6:	2101      	movs	r1, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	401a      	ands	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f47f af2b 	bne.w	8000c20 <HAL_GPIO_DeInit+0x10>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	371c      	adds	r7, #28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	48000800 	.word	0x48000800
 8000de4:	48000c00 	.word	0x48000c00
 8000de8:	48001000 	.word	0x48001000
 8000dec:	48001400 	.word	0x48001400
 8000df0:	48001800 	.word	0x48001800
 8000df4:	40010400 	.word	0x40010400

08000df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e081      	b.n	8000f0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f004 fb72 	bl	8005508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2224      	movs	r2, #36	; 0x24
 8000e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d107      	bne.n	8000e72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	e006      	b.n	8000e80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d104      	bne.n	8000e92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6812      	ldr	r2, [r2, #0]
 8000e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	ea42 0103 	orr.w	r1, r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	021a      	lsls	r2, r3, #8
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69d9      	ldr	r1, [r3, #28]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1a      	ldr	r2, [r3, #32]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0201 	orr.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2220      	movs	r2, #32
 8000efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e021      	b.n	8000f6c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2224      	movs	r2, #36	; 0x24
 8000f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0201 	bic.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f004 fb25 	bl	8005590 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	817b      	strh	r3, [r7, #10]
 8000f86:	460b      	mov	r3, r1
 8000f88:	813b      	strh	r3, [r7, #8]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b20      	cmp	r3, #32
 8000f98:	f040 80f9 	bne.w	800118e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <HAL_I2C_Mem_Write+0x34>
 8000fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d105      	bne.n	8000fb4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e0ed      	b.n	8001190 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d101      	bne.n	8000fc2 <HAL_I2C_Mem_Write+0x4e>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e0e6      	b.n	8001190 <HAL_I2C_Mem_Write+0x21c>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fca:	f7ff fb39 	bl	8000640 <HAL_GetTick>
 8000fce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2319      	movs	r3, #25
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 fac3 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e0d1      	b.n	8001190 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2221      	movs	r2, #33	; 0x21
 8000ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2240      	movs	r2, #64	; 0x40
 8000ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6a3a      	ldr	r2, [r7, #32]
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800100c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001014:	88f8      	ldrh	r0, [r7, #6]
 8001016:	893a      	ldrh	r2, [r7, #8]
 8001018:	8979      	ldrh	r1, [r7, #10]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4603      	mov	r3, r0
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 f9d3 	bl	80013d0 <I2C_RequestMemoryWrite>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d005      	beq.n	800103c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e0a9      	b.n	8001190 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001040:	b29b      	uxth	r3, r3
 8001042:	2bff      	cmp	r3, #255	; 0xff
 8001044:	d90e      	bls.n	8001064 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	22ff      	movs	r2, #255	; 0xff
 800104a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001050:	b2da      	uxtb	r2, r3
 8001052:	8979      	ldrh	r1, [r7, #10]
 8001054:	2300      	movs	r3, #0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f000 fba5 	bl	80017ac <I2C_TransferConfig>
 8001062:	e00f      	b.n	8001084 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001068:	b29a      	uxth	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001072:	b2da      	uxtb	r2, r3
 8001074:	8979      	ldrh	r1, [r7, #10]
 8001076:	2300      	movs	r3, #0
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 fb94 	bl	80017ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 faad 	bl	80015e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e07b      	b.n	8001190 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c0:	3b01      	subs	r3, #1
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d034      	beq.n	800113c <HAL_I2C_Mem_Write+0x1c8>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d130      	bne.n	800113c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e0:	2200      	movs	r2, #0
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 fa3f 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e04d      	b.n	8001190 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	2bff      	cmp	r3, #255	; 0xff
 80010fc:	d90e      	bls.n	800111c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001108:	b2da      	uxtb	r2, r3
 800110a:	8979      	ldrh	r1, [r7, #10]
 800110c:	2300      	movs	r3, #0
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 fb49 	bl	80017ac <I2C_TransferConfig>
 800111a:	e00f      	b.n	800113c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001120:	b29a      	uxth	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800112a:	b2da      	uxtb	r2, r3
 800112c:	8979      	ldrh	r1, [r7, #10]
 800112e:	2300      	movs	r3, #0
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 fb38 	bl	80017ac <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001140:	b29b      	uxth	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d19e      	bne.n	8001084 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 fa8c 	bl	8001668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e01a      	b.n	8001190 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2220      	movs	r2, #32
 8001160:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6859      	ldr	r1, [r3, #4]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_I2C_Mem_Write+0x224>)
 800116e:	400b      	ands	r3, r1
 8001170:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2220      	movs	r2, #32
 8001176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800118e:	2302      	movs	r3, #2
  }
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	fe00e800 	.word	0xfe00e800

0800119c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	4608      	mov	r0, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	817b      	strh	r3, [r7, #10]
 80011ae:	460b      	mov	r3, r1
 80011b0:	813b      	strh	r3, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b20      	cmp	r3, #32
 80011c0:	f040 80fd 	bne.w	80013be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <HAL_I2C_Mem_Read+0x34>
 80011ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0f1      	b.n	80013c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_I2C_Mem_Read+0x4e>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e0ea      	b.n	80013c0 <HAL_I2C_Mem_Read+0x224>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011f2:	f7ff fa25 	bl	8000640 <HAL_GetTick>
 80011f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2319      	movs	r3, #25
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f9af 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e0d5      	b.n	80013c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2222      	movs	r2, #34	; 0x22
 8001218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a3a      	ldr	r2, [r7, #32]
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800123c:	88f8      	ldrh	r0, [r7, #6]
 800123e:	893a      	ldrh	r2, [r7, #8]
 8001240:	8979      	ldrh	r1, [r7, #10]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	4603      	mov	r3, r0
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 f913 	bl	8001478 <I2C_RequestMemoryRead>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0ad      	b.n	80013c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001268:	b29b      	uxth	r3, r3
 800126a:	2bff      	cmp	r3, #255	; 0xff
 800126c:	d90e      	bls.n	800128c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	22ff      	movs	r2, #255	; 0xff
 8001272:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001278:	b2da      	uxtb	r2, r3
 800127a:	8979      	ldrh	r1, [r7, #10]
 800127c:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <HAL_I2C_Mem_Read+0x22c>)
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 fa91 	bl	80017ac <I2C_TransferConfig>
 800128a:	e00f      	b.n	80012ac <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001290:	b29a      	uxth	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129a:	b2da      	uxtb	r2, r3
 800129c:	8979      	ldrh	r1, [r7, #10]
 800129e:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <HAL_I2C_Mem_Read+0x22c>)
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 fa80 	bl	80017ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	2200      	movs	r2, #0
 80012b4:	2104      	movs	r1, #4
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f956 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e07c      	b.n	80013c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e2:	3b01      	subs	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	3b01      	subs	r3, #1
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d034      	beq.n	800136c <HAL_I2C_Mem_Read+0x1d0>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001306:	2b00      	cmp	r3, #0
 8001308:	d130      	bne.n	800136c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001310:	2200      	movs	r2, #0
 8001312:	2180      	movs	r1, #128	; 0x80
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 f927 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e04d      	b.n	80013c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001328:	b29b      	uxth	r3, r3
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d90e      	bls.n	800134c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	22ff      	movs	r2, #255	; 0xff
 8001332:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001338:	b2da      	uxtb	r2, r3
 800133a:	8979      	ldrh	r1, [r7, #10]
 800133c:	2300      	movs	r3, #0
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 fa31 	bl	80017ac <I2C_TransferConfig>
 800134a:	e00f      	b.n	800136c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001350:	b29a      	uxth	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135a:	b2da      	uxtb	r2, r3
 800135c:	8979      	ldrh	r1, [r7, #10]
 800135e:	2300      	movs	r3, #0
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 fa20 	bl	80017ac <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001370:	b29b      	uxth	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d19a      	bne.n	80012ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 f974 	bl	8001668 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e01a      	b.n	80013c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2220      	movs	r2, #32
 8001390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_I2C_Mem_Read+0x230>)
 800139e:	400b      	ands	r3, r1
 80013a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2220      	movs	r2, #32
 80013a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80013be:	2302      	movs	r3, #2
  }
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	80002400 	.word	0x80002400
 80013cc:	fe00e800 	.word	0xfe00e800

080013d0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4603      	mov	r3, r0
 80013e0:	817b      	strh	r3, [r7, #10]
 80013e2:	460b      	mov	r3, r1
 80013e4:	813b      	strh	r3, [r7, #8]
 80013e6:	4613      	mov	r3, r2
 80013e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	8979      	ldrh	r1, [r7, #10]
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <I2C_RequestMemoryWrite+0xa4>)
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 f9d7 	bl	80017ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	69b9      	ldr	r1, [r7, #24]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 f8f0 	bl	80015e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e02c      	b.n	800146c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d105      	bne.n	8001424 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001418:	893b      	ldrh	r3, [r7, #8]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
 8001422:	e015      	b.n	8001450 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001424:	893b      	ldrh	r3, [r7, #8]
 8001426:	0a1b      	lsrs	r3, r3, #8
 8001428:	b29b      	uxth	r3, r3
 800142a:	b2da      	uxtb	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	69b9      	ldr	r1, [r7, #24]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f8d6 	bl	80015e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e012      	b.n	800146c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001446:	893b      	ldrh	r3, [r7, #8]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2200      	movs	r2, #0
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 f884 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	80002000 	.word	0x80002000

08001478 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af02      	add	r7, sp, #8
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	4608      	mov	r0, r1
 8001482:	4611      	mov	r1, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4603      	mov	r3, r0
 8001488:	817b      	strh	r3, [r7, #10]
 800148a:	460b      	mov	r3, r1
 800148c:	813b      	strh	r3, [r7, #8]
 800148e:	4613      	mov	r3, r2
 8001490:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	8979      	ldrh	r1, [r7, #10]
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <I2C_RequestMemoryRead+0xa4>)
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2300      	movs	r3, #0
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f984 	bl	80017ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 f89d 	bl	80015e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e02c      	b.n	8001512 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d105      	bne.n	80014ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014be:	893b      	ldrh	r3, [r7, #8]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
 80014c8:	e015      	b.n	80014f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014ca:	893b      	ldrh	r3, [r7, #8]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	69b9      	ldr	r1, [r7, #24]
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 f883 	bl	80015e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e012      	b.n	8001512 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014ec:	893b      	ldrh	r3, [r7, #8]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2200      	movs	r2, #0
 80014fe:	2140      	movs	r1, #64	; 0x40
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f831 	bl	8001568 <I2C_WaitOnFlagUntilTimeout>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	80002000 	.word	0x80002000

08001520 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b02      	cmp	r3, #2
 8001534:	d103      	bne.n	800153e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b01      	cmp	r3, #1
 800154a:	d007      	beq.n	800155c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	619a      	str	r2, [r3, #24]
  }
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001578:	e022      	b.n	80015c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001580:	d01e      	beq.n	80015c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001582:	f7ff f85d 	bl	8000640 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d302      	bcc.n	8001598 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d113      	bne.n	80015c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f043 0220 	orr.w	r2, r3, #32
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2220      	movs	r2, #32
 80015a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e00f      	b.n	80015e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	4013      	ands	r3, r2
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d0cd      	beq.n	800157a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015f4:	e02c      	b.n	8001650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f870 	bl	80016e0 <I2C_IsAcknowledgeFailed>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e02a      	b.n	8001660 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001610:	d01e      	beq.n	8001650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001612:	f7ff f815 	bl	8000640 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	429a      	cmp	r2, r3
 8001620:	d302      	bcc.n	8001628 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d113      	bne.n	8001650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	f043 0220 	orr.w	r2, r3, #32
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2220      	movs	r2, #32
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e007      	b.n	8001660 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b02      	cmp	r3, #2
 800165c:	d1cb      	bne.n	80015f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001674:	e028      	b.n	80016c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f830 	bl	80016e0 <I2C_IsAcknowledgeFailed>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e026      	b.n	80016d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800168a:	f7fe ffd9 	bl	8000640 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	429a      	cmp	r2, r3
 8001698:	d302      	bcc.n	80016a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d113      	bne.n	80016c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f043 0220 	orr.w	r2, r3, #32
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2220      	movs	r2, #32
 80016b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e007      	b.n	80016d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	d1cf      	bne.n	8001676 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d151      	bne.n	800179e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016fa:	e022      	b.n	8001742 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001702:	d01e      	beq.n	8001742 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001704:	f7fe ff9c 	bl	8000640 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	429a      	cmp	r2, r3
 8001712:	d302      	bcc.n	800171a <I2C_IsAcknowledgeFailed+0x3a>
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d113      	bne.n	8001742 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f043 0220 	orr.w	r2, r3, #32
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2220      	movs	r2, #32
 800172a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e02e      	b.n	80017a0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0320 	and.w	r3, r3, #32
 800174c:	2b20      	cmp	r3, #32
 800174e:	d1d5      	bne.n	80016fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2210      	movs	r2, #16
 8001756:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2220      	movs	r2, #32
 800175e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fedd 	bl	8001520 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001772:	400b      	ands	r3, r1
 8001774:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f043 0204 	orr.w	r2, r3, #4
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	fe00e800 	.word	0xfe00e800

080017ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	817b      	strh	r3, [r7, #10]
 80017ba:	4613      	mov	r3, r2
 80017bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	0d5b      	lsrs	r3, r3, #21
 80017c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <I2C_TransferConfig+0x58>)
 80017ce:	430b      	orrs	r3, r1
 80017d0:	43db      	mvns	r3, r3
 80017d2:	ea02 0103 	and.w	r1, r2, r3
 80017d6:	897b      	ldrh	r3, [r7, #10]
 80017d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	03ff63ff 	.word	0x03ff63ff

08001808 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b20      	cmp	r3, #32
 800181c:	d138      	bne.n	8001890 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001828:	2302      	movs	r3, #2
 800182a:	e032      	b.n	8001892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2224      	movs	r2, #36	; 0x24
 8001838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800185a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6819      	ldr	r1, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2220      	movs	r2, #32
 8001880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	e000      	b.n	8001892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001890:	2302      	movs	r3, #2
  }
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b20      	cmp	r3, #32
 80018b2:	d139      	bne.n	8001928 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018be:	2302      	movs	r3, #2
 80018c0:	e033      	b.n	800192a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2224      	movs	r2, #36	; 0x24
 80018ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0201 	bic.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001928:	2302      	movs	r3, #2
  }
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HAL_PWREx_GetVoltageRange+0x18>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007000 	.word	0x40007000

08001954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001962:	d130      	bne.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800196c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001970:	d038      	beq.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001980:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2232      	movs	r2, #50	; 0x32
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0c9b      	lsrs	r3, r3, #18
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001998:	e002      	b.n	80019a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3b01      	subs	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ac:	d102      	bne.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f2      	bne.n	800199a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c0:	d110      	bne.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e00f      	b.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d2:	d007      	beq.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019dc:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40007000 	.word	0x40007000
 80019f8:	20000090 	.word	0x20000090
 80019fc:	431bde83 	.word	0x431bde83

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e3d4      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a12:	4ba1      	ldr	r3, [pc, #644]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a1c:	4b9e      	ldr	r3, [pc, #632]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80e4 	beq.w	8001bfc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_RCC_OscConfig+0x4a>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	f040 808b 	bne.w	8001b58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	f040 8087 	bne.w	8001b58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4a:	4b93      	ldr	r3, [pc, #588]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x62>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e3ac      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	4b8c      	ldr	r3, [pc, #560]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_RCC_OscConfig+0x7c>
 8001a72:	4b89      	ldr	r3, [pc, #548]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7a:	e005      	b.n	8001a88 <HAL_RCC_OscConfig+0x88>
 8001a7c:	4b86      	ldr	r3, [pc, #536]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d223      	bcs.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fd3f 	bl	8002514 <RCC_SetFlashLatencyFromMSIRange>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e38d      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa0:	4b7d      	ldr	r3, [pc, #500]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a7c      	ldr	r2, [pc, #496]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4977      	ldr	r1, [pc, #476]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001abe:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	4972      	ldr	r1, [pc, #456]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e025      	b.n	8001b20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad4:	4b70      	ldr	r3, [pc, #448]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6f      	ldr	r2, [pc, #444]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b6d      	ldr	r3, [pc, #436]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	496a      	ldr	r1, [pc, #424]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af2:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	4965      	ldr	r1, [pc, #404]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fcff 	bl	8002514 <RCC_SetFlashLatencyFromMSIRange>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e34d      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b20:	f000 fc36 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8001b24:	4601      	mov	r1, r0
 8001b26:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	4a5a      	ldr	r2, [pc, #360]	; (8001c9c <HAL_RCC_OscConfig+0x29c>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa21 f303 	lsr.w	r3, r1, r3
 8001b3c:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_RCC_OscConfig+0x2a0>)
 8001b3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <HAL_RCC_OscConfig+0x2a4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fd2b 	bl	80005a0 <HAL_InitTick>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d052      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	e331      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d032      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b60:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b6c:	f7fe fd68 	bl	8000640 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b74:	f7fe fd64 	bl	8000640 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e31a      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b92:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a40      	ldr	r2, [pc, #256]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	493b      	ldr	r1, [pc, #236]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	4936      	ldr	r1, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e01a      	b.n	8001bfc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bc6:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a33      	ldr	r2, [pc, #204]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd2:	f7fe fd35 	bl	8000640 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bda:	f7fe fd31 	bl	8000640 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e2e7      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x1da>
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d074      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d005      	beq.n	8001c1a <HAL_RCC_OscConfig+0x21a>
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d10e      	bne.n	8001c32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d10b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d064      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d160      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e2c4      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x24a>
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e01d      	b.n	8001c86 <HAL_RCC_OscConfig+0x286>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x26e>
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e00b      	b.n	8001c86 <HAL_RCC_OscConfig+0x286>
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7fe fcd7 	bl	8000640 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c94:	e011      	b.n	8001cba <HAL_RCC_OscConfig+0x2ba>
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	08006114 	.word	0x08006114
 8001ca0:	20000090 	.word	0x20000090
 8001ca4:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7fe fcca 	bl	8000640 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e280      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cba:	4baf      	ldr	r3, [pc, #700]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2a8>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7fe fcba 	bl	8000640 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7fe fcb6 	bl	8000640 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e26c      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce2:	4ba5      	ldr	r3, [pc, #660]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2d0>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d060      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_OscConfig+0x310>
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d119      	bne.n	8001d3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d116      	bne.n	8001d3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d10:	4b99      	ldr	r3, [pc, #612]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_OscConfig+0x328>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e249      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b93      	ldr	r3, [pc, #588]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	4990      	ldr	r1, [pc, #576]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d3c:	e040      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d023      	beq.n	8001d8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d46:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a8b      	ldr	r2, [pc, #556]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7fe fc75 	bl	8000640 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7fe fc71 	bl	8000640 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e227      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6c:	4b82      	ldr	r3, [pc, #520]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b7f      	ldr	r3, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	497c      	ldr	r1, [pc, #496]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
 8001d8c:	e018      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b7a      	ldr	r3, [pc, #488]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a79      	ldr	r2, [pc, #484]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7fe fc51 	bl	8000640 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da2:	f7fe fc4d 	bl	8000640 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e203      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db4:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d03c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dda:	4a67      	ldr	r2, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de4:	f7fe fc2c 	bl	8000640 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dec:	f7fe fc28 	bl	8000640 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1de      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dfe:	4b5e      	ldr	r3, [pc, #376]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ef      	beq.n	8001dec <HAL_RCC_OscConfig+0x3ec>
 8001e0c:	e01b      	b.n	8001e46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e14:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1e:	f7fe fc0f 	bl	8000640 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e26:	f7fe fc0b 	bl	8000640 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e1c1      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e38:	4b4f      	ldr	r3, [pc, #316]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ef      	bne.n	8001e26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a6 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e58:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10d      	bne.n	8001e80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a43      	ldr	r2, [pc, #268]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e70:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e80:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <HAL_RCC_OscConfig+0x57c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d118      	bne.n	8001ebe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_RCC_OscConfig+0x57c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a3a      	ldr	r2, [pc, #232]	; (8001f7c <HAL_RCC_OscConfig+0x57c>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e98:	f7fe fbd2 	bl	8000640 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7fe fbce 	bl	8000640 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e184      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb2:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_RCC_OscConfig+0x57c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4d8>
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ed6:	e024      	b.n	8001f22 <HAL_RCC_OscConfig+0x522>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d110      	bne.n	8001f02 <HAL_RCC_OscConfig+0x502>
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f00:	e00f      	b.n	8001f22 <HAL_RCC_OscConfig+0x522>
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f18:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d016      	beq.n	8001f58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7fe fb89 	bl	8000640 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7fe fb85 	bl	8000640 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e139      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0ed      	beq.n	8001f32 <HAL_RCC_OscConfig+0x532>
 8001f56:	e01a      	b.n	8001f8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7fe fb72 	bl	8000640 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f5e:	e00f      	b.n	8001f80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7fe fb6e 	bl	8000640 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d906      	bls.n	8001f80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e122      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f80:	4b90      	ldr	r3, [pc, #576]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1e8      	bne.n	8001f60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f8e:	7ffb      	ldrb	r3, [r7, #31]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f94:	4b8b      	ldr	r3, [pc, #556]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a8a      	ldr	r2, [pc, #552]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8001f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8108 	beq.w	80021ba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	f040 80d0 	bne.w	8002154 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fb4:	4b83      	ldr	r3, [pc, #524]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0203 	and.w	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d130      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d127      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d11f      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ff4:	2a07      	cmp	r2, #7
 8001ff6:	bf14      	ite	ne
 8001ff8:	2201      	movne	r2, #1
 8001ffa:	2200      	moveq	r2, #0
 8001ffc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d113      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	3b01      	subs	r3, #1
 8002010:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d109      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	3b01      	subs	r3, #1
 8002024:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d06e      	beq.n	8002108 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d069      	beq.n	8002104 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002030:	4b64      	ldr	r3, [pc, #400]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d105      	bne.n	8002048 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800203c:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b7      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800204c:	4b5d      	ldr	r3, [pc, #372]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a5c      	ldr	r2, [pc, #368]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002056:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002058:	f7fe faf2 	bl	8000640 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7fe faee 	bl	8000640 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e0a4      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002072:	4b54      	ldr	r3, [pc, #336]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800207e:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	4b51      	ldr	r3, [pc, #324]	; (80021c8 <HAL_RCC_OscConfig+0x7c8>)
 8002084:	4013      	ands	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800208e:	3a01      	subs	r2, #1
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	4311      	orrs	r1, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002098:	0212      	lsls	r2, r2, #8
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020a0:	0852      	lsrs	r2, r2, #1
 80020a2:	3a01      	subs	r2, #1
 80020a4:	0552      	lsls	r2, r2, #21
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020ac:	0852      	lsrs	r2, r2, #1
 80020ae:	3a01      	subs	r2, #1
 80020b0:	0652      	lsls	r2, r2, #25
 80020b2:	4311      	orrs	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020b8:	0912      	lsrs	r2, r2, #4
 80020ba:	0452      	lsls	r2, r2, #17
 80020bc:	430a      	orrs	r2, r1
 80020be:	4941      	ldr	r1, [pc, #260]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020c4:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d0:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a3b      	ldr	r2, [pc, #236]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020dc:	f7fe fab0 	bl	8000640 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe faac 	bl	8000640 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e062      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002102:	e05a      	b.n	80021ba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e059      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d152      	bne.n	80021ba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002120:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800212c:	f7fe fa88 	bl	8000640 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe fa84 	bl	8000640 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e03a      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002146:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x734>
 8002152:	e032      	b.n	80021ba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d02d      	beq.n	80021b6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002164:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002172:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002178:	f023 0303 	bic.w	r3, r3, #3
 800217c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002184:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7fe fa57 	bl	8000640 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7fe fa53 	bl	8000640 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e009      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x796>
 80021b4:	e001      	b.n	80021ba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	f99d808c 	.word	0xf99d808c

080021cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0c8      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b66      	ldr	r3, [pc, #408]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d910      	bls.n	8002210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4961      	ldr	r1, [pc, #388]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b5f      	ldr	r3, [pc, #380]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0b0      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d04c      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002224:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d121      	bne.n	8002274 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e09e      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d107      	bne.n	800224c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223c:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d115      	bne.n	8002274 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e092      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002254:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e086      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002264:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e07e      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 0203 	bic.w	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	493f      	ldr	r1, [pc, #252]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002286:	f7fe f9db 	bl	8000640 <HAL_GetTick>
 800228a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228e:	f7fe f9d7 	bl	8000640 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e066      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 020c 	and.w	r2, r3, #12
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d1eb      	bne.n	800228e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	492c      	ldr	r1, [pc, #176]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d210      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4924      	ldr	r1, [pc, #144]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e036      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4918      	ldr	r1, [pc, #96]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4910      	ldr	r1, [pc, #64]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002342:	f000 f825 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8002346:	4601      	mov	r1, r0
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	5cd3      	ldrb	r3, [r2, r3]
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	fa21 f303 	lsr.w	r3, r1, r3
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f91a 	bl	80005a0 <HAL_InitTick>
 800236c:	4603      	mov	r3, r0
 800236e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002370:	7afb      	ldrb	r3, [r7, #11]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40022000 	.word	0x40022000
 8002380:	40021000 	.word	0x40021000
 8002384:	08006114 	.word	0x08006114
 8002388:	20000090 	.word	0x20000090
 800238c:	20000000 	.word	0x20000000

08002390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_RCC_GetSysClockFreq+0x104>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a8:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <HAL_RCC_GetSysClockFreq+0x104>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x34>
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d121      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d11e      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023c4:	4b33      	ldr	r3, [pc, #204]	; (8002494 <HAL_RCC_GetSysClockFreq+0x104>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_RCC_GetSysClockFreq+0x104>)
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e005      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023e0:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <HAL_RCC_GetSysClockFreq+0x104>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023ec:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10d      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b04      	cmp	r3, #4
 8002406:	d102      	bne.n	800240e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002408:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_RCC_GetSysClockFreq+0x10c>)
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	e004      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d101      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002416:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d133      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_GetSysClockFreq+0x104>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d002      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0xa4>
 800242e:	2b03      	cmp	r3, #3
 8002430:	d003      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0xaa>
 8002432:	e005      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002436:	617b      	str	r3, [r7, #20]
      break;
 8002438:	e005      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800243c:	617b      	str	r3, [r7, #20]
      break;
 800243e:	e002      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	617b      	str	r3, [r7, #20]
      break;
 8002444:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_RCC_GetSysClockFreq+0x104>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	3301      	adds	r3, #1
 8002452:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <HAL_RCC_GetSysClockFreq+0x104>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	fb02 f203 	mul.w	r2, r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_GetSysClockFreq+0x104>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0e5b      	lsrs	r3, r3, #25
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002486:	69bb      	ldr	r3, [r7, #24]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3724      	adds	r7, #36	; 0x24
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40021000 	.word	0x40021000
 8002498:	0800612c 	.word	0x0800612c
 800249c:	00f42400 	.word	0x00f42400
 80024a0:	007a1200 	.word	0x007a1200

080024a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000090 	.word	0x20000090

080024bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024c0:	f7ff fff0 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c4:	4601      	mov	r1, r0
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08006124 	.word	0x08006124

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024ec:	f7ff ffda 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024f0:	4601      	mov	r1, r0
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0adb      	lsrs	r3, r3, #11
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	08006124 	.word	0x08006124

08002514 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800252c:	f7ff fa04 	bl	8001938 <HAL_PWREx_GetVoltageRange>
 8002530:	6178      	str	r0, [r7, #20]
 8002532:	e014      	b.n	800255e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	4a24      	ldr	r2, [pc, #144]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253e:	6593      	str	r3, [r2, #88]	; 0x58
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800254c:	f7ff f9f4 	bl	8001938 <HAL_PWREx_GetVoltageRange>
 8002550:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002564:	d10b      	bne.n	800257e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d919      	bls.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2ba0      	cmp	r3, #160	; 0xa0
 8002570:	d902      	bls.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002572:	2302      	movs	r3, #2
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e013      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002578:	2301      	movs	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	e010      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b80      	cmp	r3, #128	; 0x80
 8002582:	d902      	bls.n	800258a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002584:	2303      	movs	r3, #3
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e00a      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d102      	bne.n	8002596 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002590:	2302      	movs	r3, #2
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	e004      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b70      	cmp	r3, #112	; 0x70
 800259a:	d101      	bne.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800259c:	2301      	movs	r3, #1
 800259e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 0207 	bic.w	r2, r3, #7
 80025a8:	4909      	ldr	r1, [pc, #36]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40022000 	.word	0x40022000

080025d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025dc:	2300      	movs	r3, #0
 80025de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e0:	2300      	movs	r3, #0
 80025e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d03f      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f8:	d01c      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80025fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025fe:	d802      	bhi.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00e      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002604:	e01f      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002606:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800260a:	d003      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800260c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002610:	d01c      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002612:	e018      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002614:	4b85      	ldr	r3, [pc, #532]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a84      	ldr	r2, [pc, #528]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002620:	e015      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fab9 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002632:	e00c      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3320      	adds	r3, #32
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fba0 	bl	8002d80 <RCCEx_PLLSAI2_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002644:	e003      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	74fb      	strb	r3, [r7, #19]
      break;
 800264a:	e000      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800264c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10b      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002654:	4b75      	ldr	r3, [pc, #468]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002662:	4972      	ldr	r1, [pc, #456]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800266a:	e001      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d03f      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d01c      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268a:	d802      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00e      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002690:	e01f      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002696:	d003      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002698:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800269c:	d01c      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800269e:	e018      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026a0:	4b62      	ldr	r3, [pc, #392]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a61      	ldr	r2, [pc, #388]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ac:	e015      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fa73 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026be:	e00c      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3320      	adds	r3, #32
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fb5a 	bl	8002d80 <RCCEx_PLLSAI2_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026d0:	e003      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	74fb      	strb	r3, [r7, #19]
      break;
 80026d6:	e000      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80026d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026e0:	4b52      	ldr	r3, [pc, #328]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ee:	494f      	ldr	r1, [pc, #316]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026f6:	e001      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a0 	beq.w	800284a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	4a40      	ldr	r2, [pc, #256]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	; 0x58
 8002730:	4b3e      	ldr	r3, [pc, #248]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273c:	2301      	movs	r3, #1
 800273e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800274c:	f7fd ff78 	bl	8000640 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002752:	e009      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fd ff74 	bl	8000640 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	74fb      	strb	r3, [r7, #19]
        break;
 8002766:	e005      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d15c      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800277a:	4b2c      	ldr	r3, [pc, #176]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002784:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01f      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	d019      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	4a20      	ldr	r2, [pc, #128]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027c4:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d016      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fd ff33 	bl	8000640 <HAL_GetTick>
 80027da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027dc:	e00b      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fd ff2f 	bl	8000640 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d902      	bls.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	74fb      	strb	r3, [r7, #19]
            break;
 80027f4:	e006      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ec      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281a:	4904      	ldr	r1, [pc, #16]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002822:	e009      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
 8002828:	e006      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002838:	7c7b      	ldrb	r3, [r7, #17]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d105      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283e:	4b9e      	ldr	r3, [pc, #632]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4a9d      	ldr	r2, [pc, #628]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002856:	4b98      	ldr	r3, [pc, #608]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f023 0203 	bic.w	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	4994      	ldr	r1, [pc, #592]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002878:	4b8f      	ldr	r3, [pc, #572]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 020c 	bic.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	498c      	ldr	r1, [pc, #560]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800289a:	4b87      	ldr	r3, [pc, #540]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	4983      	ldr	r1, [pc, #524]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028bc:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	497b      	ldr	r1, [pc, #492]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	4972      	ldr	r1, [pc, #456]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002900:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	496a      	ldr	r1, [pc, #424]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002922:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	4961      	ldr	r1, [pc, #388]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002944:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	4959      	ldr	r1, [pc, #356]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002966:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	4950      	ldr	r1, [pc, #320]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	4948      	ldr	r1, [pc, #288]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029aa:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	493f      	ldr	r1, [pc, #252]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d028      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029cc:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029da:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ea:	d106      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ec:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a31      	ldr	r2, [pc, #196]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f6:	60d3      	str	r3, [r2, #12]
 80029f8:	e011      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f8c8 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d028      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a2a:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	491f      	ldr	r1, [pc, #124]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a48:	d106      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a54:	60d3      	str	r3, [r2, #12]
 8002a56:	e011      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f899 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02b      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa6:	d109      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a02      	ldr	r2, [pc, #8]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
 8002ab4:	e014      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 f867 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02f      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afa:	4928      	ldr	r1, [pc, #160]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b0a:	d10d      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2102      	movs	r1, #2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f844 	bl	8002ba0 <RCCEx_PLLSAI1_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d014      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	74bb      	strb	r3, [r7, #18]
 8002b26:	e011      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3320      	adds	r3, #32
 8002b36:	2102      	movs	r1, #2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f921 	bl	8002d80 <RCCEx_PLLSAI2_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b66:	490d      	ldr	r1, [pc, #52]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8a:	4904      	ldr	r1, [pc, #16]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bae:	4b73      	ldr	r3, [pc, #460]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d018      	beq.n	8002bec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bba:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0203 	and.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d10d      	bne.n	8002be6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
       ||
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bd2:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
       ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d044      	beq.n	8002c70 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e041      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d00c      	beq.n	8002c0e <RCCEx_PLLSAI1_Config+0x6e>
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d013      	beq.n	8002c20 <RCCEx_PLLSAI1_Config+0x80>
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d120      	bne.n	8002c3e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bfc:	4b5f      	ldr	r3, [pc, #380]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d11d      	bne.n	8002c44 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e01a      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c0e:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d116      	bne.n	8002c48 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1e:	e013      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c20:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10f      	bne.n	8002c4c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c3c:	e006      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
      break;
 8002c42:	e004      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c44:	bf00      	nop
 8002c46:	e002      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c4c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10d      	bne.n	8002c70 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c54:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6819      	ldr	r1, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	4944      	ldr	r1, [pc, #272]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d17d      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a40      	ldr	r2, [pc, #256]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c82:	f7fd fcdd 	bl	8000640 <HAL_GetTick>
 8002c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c88:	e009      	b.n	8002c9e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c8a:	f7fd fcd9 	bl	8000640 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d902      	bls.n	8002c9e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	73fb      	strb	r3, [r7, #15]
        break;
 8002c9c:	e005      	b.n	8002caa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c9e:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ef      	bne.n	8002c8a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d160      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d111      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb6:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	0211      	lsls	r1, r2, #8
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68d2      	ldr	r2, [r2, #12]
 8002ccc:	0912      	lsrs	r2, r2, #4
 8002cce:	0452      	lsls	r2, r2, #17
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	492a      	ldr	r1, [pc, #168]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	610b      	str	r3, [r1, #16]
 8002cd8:	e027      	b.n	8002d2a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d112      	bne.n	8002d06 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce0:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ce8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6892      	ldr	r2, [r2, #8]
 8002cf0:	0211      	lsls	r1, r2, #8
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6912      	ldr	r2, [r2, #16]
 8002cf6:	0852      	lsrs	r2, r2, #1
 8002cf8:	3a01      	subs	r2, #1
 8002cfa:	0552      	lsls	r2, r2, #21
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	491f      	ldr	r1, [pc, #124]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	610b      	str	r3, [r1, #16]
 8002d04:	e011      	b.n	8002d2a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6892      	ldr	r2, [r2, #8]
 8002d16:	0211      	lsls	r1, r2, #8
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6952      	ldr	r2, [r2, #20]
 8002d1c:	0852      	lsrs	r2, r2, #1
 8002d1e:	3a01      	subs	r2, #1
 8002d20:	0652      	lsls	r2, r2, #25
 8002d22:	430a      	orrs	r2, r1
 8002d24:	4915      	ldr	r1, [pc, #84]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d36:	f7fd fc83 	bl	8000640 <HAL_GetTick>
 8002d3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d3c:	e009      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d3e:	f7fd fc7f 	bl	8000640 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d902      	bls.n	8002d52 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	73fb      	strb	r3, [r7, #15]
          break;
 8002d50:	e005      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0ef      	beq.n	8002d3e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d106      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000

08002d80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d8e:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d018      	beq.n	8002dcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d9a:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0203 	and.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d10d      	bne.n	8002dc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
       ||
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002db2:	4b5f      	ldr	r3, [pc, #380]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d044      	beq.n	8002e50 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	e041      	b.n	8002e50 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d00c      	beq.n	8002dee <RCCEx_PLLSAI2_Config+0x6e>
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d013      	beq.n	8002e00 <RCCEx_PLLSAI2_Config+0x80>
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d120      	bne.n	8002e1e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ddc:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d11d      	bne.n	8002e24 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dec:	e01a      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dee:	4b50      	ldr	r3, [pc, #320]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d116      	bne.n	8002e28 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfe:	e013      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10f      	bne.n	8002e2c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e0c:	4b48      	ldr	r3, [pc, #288]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e1c:	e006      	b.n	8002e2c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      break;
 8002e22:	e004      	b.n	8002e2e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e24:	bf00      	nop
 8002e26:	e002      	b.n	8002e2e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e28:	bf00      	nop
 8002e2a:	e000      	b.n	8002e2e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e2c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10d      	bne.n	8002e50 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e34:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	4939      	ldr	r1, [pc, #228]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d167      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a35      	ldr	r2, [pc, #212]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e62:	f7fd fbed 	bl	8000640 <HAL_GetTick>
 8002e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e68:	e009      	b.n	8002e7e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e6a:	f7fd fbe9 	bl	8000640 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d902      	bls.n	8002e7e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	73fb      	strb	r3, [r7, #15]
        break;
 8002e7c:	e005      	b.n	8002e8a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e7e:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ef      	bne.n	8002e6a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d14a      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d111      	bne.n	8002eba <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6892      	ldr	r2, [r2, #8]
 8002ea6:	0211      	lsls	r1, r2, #8
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68d2      	ldr	r2, [r2, #12]
 8002eac:	0912      	lsrs	r2, r2, #4
 8002eae:	0452      	lsls	r2, r2, #17
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	491f      	ldr	r1, [pc, #124]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	614b      	str	r3, [r1, #20]
 8002eb8:	e011      	b.n	8002ede <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ec2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6892      	ldr	r2, [r2, #8]
 8002eca:	0211      	lsls	r1, r2, #8
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6912      	ldr	r2, [r2, #16]
 8002ed0:	0852      	lsrs	r2, r2, #1
 8002ed2:	3a01      	subs	r2, #1
 8002ed4:	0652      	lsls	r2, r2, #25
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	4915      	ldr	r1, [pc, #84]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7fd fba9 	bl	8000640 <HAL_GetTick>
 8002eee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef0:	e009      	b.n	8002f06 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ef2:	f7fd fba5 	bl	8000640 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d902      	bls.n	8002f06 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	73fb      	strb	r3, [r7, #15]
          break;
 8002f04:	e005      	b.n	8002f12 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ef      	beq.n	8002ef2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	4903      	ldr	r1, [pc, #12]	; (8002f30 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000

08002f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e049      	b.n	8002fda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f002 fb3c 	bl	80055d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3304      	adds	r3, #4
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f000 faa6 	bl	80034c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d001      	beq.n	8002ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e04f      	b.n	800309c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01d      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003026:	d018      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <HAL_TIM_Base_Start_IT+0xc8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00e      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a19      	ldr	r2, [pc, #100]	; (80030bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d115      	bne.n	8003086 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003062:	4013      	ands	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b06      	cmp	r3, #6
 800306a:	d015      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0xb4>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003072:	d011      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003084:	e008      	b.n	8003098 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e000      	b.n	800309a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000800 	.word	0x40000800
 80030b4:	40000c00 	.word	0x40000c00
 80030b8:	40013400 	.word	0x40013400
 80030bc:	40014000 	.word	0x40014000
 80030c0:	00010007 	.word	0x00010007

080030c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0202 	mvn.w	r2, #2
 80030f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f9be 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f9b0 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f9c1 	bl	800349c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0204 	mvn.w	r2, #4
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f994 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f986 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f997 	bl	800349c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b08      	cmp	r3, #8
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b08      	cmp	r3, #8
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0208 	mvn.w	r2, #8
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2204      	movs	r2, #4
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f96a 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f95c 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f96d 	bl	800349c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d122      	bne.n	800321c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d11b      	bne.n	800321c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0210 	mvn.w	r2, #16
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2208      	movs	r2, #8
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f940 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f932 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f943 	bl	800349c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d10e      	bne.n	8003248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d107      	bne.n	8003248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0201 	mvn.w	r2, #1
 8003240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f001 fd2a 	bl	8004c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	2b80      	cmp	r3, #128	; 0x80
 8003254:	d10e      	bne.n	8003274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	d107      	bne.n	8003274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800326c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 faee 	bl	8003850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003282:	d10e      	bne.n	80032a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b80      	cmp	r3, #128	; 0x80
 8003290:	d107      	bne.n	80032a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800329a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fae1 	bl	8003864 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d10e      	bne.n	80032ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	d107      	bne.n	80032ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8f1 	bl	80034b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d10e      	bne.n	80032fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d107      	bne.n	80032fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 0220 	mvn.w	r2, #32
 80032f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 faa1 	bl	800383c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_TIM_ConfigClockSource+0x18>
 8003316:	2302      	movs	r3, #2
 8003318:	e0a8      	b.n	800346c <HAL_TIM_ConfigClockSource+0x16a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003338:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800333c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003344:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d067      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x124>
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	d80b      	bhi.n	8003372 <HAL_TIM_ConfigClockSource+0x70>
 800335a:	2b10      	cmp	r3, #16
 800335c:	d073      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x144>
 800335e:	2b10      	cmp	r3, #16
 8003360:	d802      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x66>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d06f      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003366:	e078      	b.n	800345a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003368:	2b20      	cmp	r3, #32
 800336a:	d06c      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x144>
 800336c:	2b30      	cmp	r3, #48	; 0x30
 800336e:	d06a      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003370:	e073      	b.n	800345a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003372:	2b70      	cmp	r3, #112	; 0x70
 8003374:	d00d      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x90>
 8003376:	2b70      	cmp	r3, #112	; 0x70
 8003378:	d804      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x82>
 800337a:	2b50      	cmp	r3, #80	; 0x50
 800337c:	d033      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0xe4>
 800337e:	2b60      	cmp	r3, #96	; 0x60
 8003380:	d041      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003382:	e06a      	b.n	800345a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	d066      	beq.n	8003458 <HAL_TIM_ConfigClockSource+0x156>
 800338a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338e:	d017      	beq.n	80033c0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003390:	e063      	b.n	800345a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f000 f9a3 	bl	80036ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	609a      	str	r2, [r3, #8]
      break;
 80033be:	e04c      	b.n	800345a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6899      	ldr	r1, [r3, #8]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f000 f98c 	bl	80036ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e2:	609a      	str	r2, [r3, #8]
      break;
 80033e4:	e039      	b.n	800345a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f000 f900 	bl	80035f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2150      	movs	r1, #80	; 0x50
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f959 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003404:	e029      	b.n	800345a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	461a      	mov	r2, r3
 8003414:	f000 f91f 	bl	8003656 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2160      	movs	r1, #96	; 0x60
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f949 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003424:	e019      	b.n	800345a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	461a      	mov	r2, r3
 8003434:	f000 f8e0 	bl	80035f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2140      	movs	r1, #64	; 0x40
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f939 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003444:	e009      	b.n	800345a <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f000 f930 	bl	80036b6 <TIM_ITRx_SetConfig>
        break;
 8003456:	e000      	b.n	800345a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003458:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a40      	ldr	r2, [pc, #256]	; (80035d8 <TIM_Base_SetConfig+0x114>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d013      	beq.n	8003504 <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e2:	d00f      	beq.n	8003504 <TIM_Base_SetConfig+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a3d      	ldr	r2, [pc, #244]	; (80035dc <TIM_Base_SetConfig+0x118>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00b      	beq.n	8003504 <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3c      	ldr	r2, [pc, #240]	; (80035e0 <TIM_Base_SetConfig+0x11c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d007      	beq.n	8003504 <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3b      	ldr	r2, [pc, #236]	; (80035e4 <TIM_Base_SetConfig+0x120>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3a      	ldr	r2, [pc, #232]	; (80035e8 <TIM_Base_SetConfig+0x124>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d108      	bne.n	8003516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2f      	ldr	r2, [pc, #188]	; (80035d8 <TIM_Base_SetConfig+0x114>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01f      	beq.n	800355e <TIM_Base_SetConfig+0x9a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003524:	d01b      	beq.n	800355e <TIM_Base_SetConfig+0x9a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2c      	ldr	r2, [pc, #176]	; (80035dc <TIM_Base_SetConfig+0x118>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d017      	beq.n	800355e <TIM_Base_SetConfig+0x9a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2b      	ldr	r2, [pc, #172]	; (80035e0 <TIM_Base_SetConfig+0x11c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <TIM_Base_SetConfig+0x9a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2a      	ldr	r2, [pc, #168]	; (80035e4 <TIM_Base_SetConfig+0x120>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00f      	beq.n	800355e <TIM_Base_SetConfig+0x9a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a29      	ldr	r2, [pc, #164]	; (80035e8 <TIM_Base_SetConfig+0x124>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00b      	beq.n	800355e <TIM_Base_SetConfig+0x9a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a28      	ldr	r2, [pc, #160]	; (80035ec <TIM_Base_SetConfig+0x128>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <TIM_Base_SetConfig+0x9a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <TIM_Base_SetConfig+0x12c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_Base_SetConfig+0x9a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <TIM_Base_SetConfig+0x130>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d108      	bne.n	8003570 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <TIM_Base_SetConfig+0x114>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00f      	beq.n	80035bc <TIM_Base_SetConfig+0xf8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <TIM_Base_SetConfig+0x124>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0xf8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a11      	ldr	r2, [pc, #68]	; (80035ec <TIM_Base_SetConfig+0x128>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0xf8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a10      	ldr	r2, [pc, #64]	; (80035f0 <TIM_Base_SetConfig+0x12c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0xf8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <TIM_Base_SetConfig+0x130>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d103      	bne.n	80035c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	615a      	str	r2, [r3, #20]
}
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	40013400 	.word	0x40013400
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800

080035f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f023 0201 	bic.w	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f023 030a 	bic.w	r3, r3, #10
 8003634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	621a      	str	r2, [r3, #32]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003656:	b480      	push	{r7}
 8003658:	b087      	sub	sp, #28
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0210 	bic.w	r2, r3, #16
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003680:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	031b      	lsls	r3, r3, #12
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003692:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f043 0307 	orr.w	r3, r3, #7
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	609a      	str	r2, [r3, #8]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003706:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	021a      	lsls	r2, r3, #8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	431a      	orrs	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003740:	2302      	movs	r3, #2
 8003742:	e068      	b.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2e      	ldr	r2, [pc, #184]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d108      	bne.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800377e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003790:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01d      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d018      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1b      	ldr	r2, [pc, #108]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a13      	ldr	r2, [pc, #76]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a14      	ldr	r2, [pc, #80]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d10c      	bne.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40013400 	.word	0x40013400
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40014000 	.word	0x40014000

0800383c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e040      	b.n	800390c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f001 fec0 	bl	8005620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2224      	movs	r2, #36	; 0x24
 80038a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8c0 	bl	8003a3c <UART_SetConfig>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e022      	b.n	800390c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fb3e 	bl	8003f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fbc5 	bl	8004094 <UART_CheckIdleState>
 800390a:	4603      	mov	r3, r0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003928:	2b20      	cmp	r3, #32
 800392a:	f040 8081 	bne.w	8003a30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_UART_Transmit+0x26>
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e079      	b.n	8003a32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_UART_Transmit+0x38>
 8003948:	2302      	movs	r3, #2
 800394a:	e072      	b.n	8003a32 <HAL_UART_Transmit+0x11e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2221      	movs	r2, #33	; 0x21
 800395e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003960:	f7fc fe6e 	bl	8000640 <HAL_GetTick>
 8003964:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	88fa      	ldrh	r2, [r7, #6]
 800396a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397e:	d108      	bne.n	8003992 <HAL_UART_Transmit+0x7e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d104      	bne.n	8003992 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003988:	2300      	movs	r3, #0
 800398a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	e003      	b.n	800399a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80039a2:	e02d      	b.n	8003a00 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2200      	movs	r2, #0
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fbb5 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e039      	b.n	8003a32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	881a      	ldrh	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d0:	b292      	uxth	r2, r2
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	3302      	adds	r3, #2
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e008      	b.n	80039ee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	b292      	uxth	r2, r2
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	3301      	adds	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1cb      	bne.n	80039a4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2200      	movs	r2, #0
 8003a14:	2140      	movs	r1, #64	; 0x40
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fb81 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e005      	b.n	8003a32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003a40:	b088      	sub	sp, #32
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4bac      	ldr	r3, [pc, #688]	; (8003d1c <UART_SetConfig+0x2e0>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	69f9      	ldr	r1, [r7, #28]
 8003a72:	430b      	orrs	r3, r1
 8003a74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4aa2      	ldr	r2, [pc, #648]	; (8003d20 <UART_SetConfig+0x2e4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a99      	ldr	r2, [pc, #612]	; (8003d24 <UART_SetConfig+0x2e8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d121      	bne.n	8003b08 <UART_SetConfig+0xcc>
 8003ac4:	4b98      	ldr	r3, [pc, #608]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d816      	bhi.n	8003b00 <UART_SetConfig+0xc4>
 8003ad2:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <UART_SetConfig+0x9c>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003af5 	.word	0x08003af5
 8003ae0:	08003aef 	.word	0x08003aef
 8003ae4:	08003afb 	.word	0x08003afb
 8003ae8:	2301      	movs	r3, #1
 8003aea:	76fb      	strb	r3, [r7, #27]
 8003aec:	e0e8      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003aee:	2302      	movs	r3, #2
 8003af0:	76fb      	strb	r3, [r7, #27]
 8003af2:	e0e5      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003af4:	2304      	movs	r3, #4
 8003af6:	76fb      	strb	r3, [r7, #27]
 8003af8:	e0e2      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003afa:	2308      	movs	r3, #8
 8003afc:	76fb      	strb	r3, [r7, #27]
 8003afe:	e0df      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b00:	2310      	movs	r3, #16
 8003b02:	76fb      	strb	r3, [r7, #27]
 8003b04:	bf00      	nop
 8003b06:	e0db      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a87      	ldr	r2, [pc, #540]	; (8003d2c <UART_SetConfig+0x2f0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d134      	bne.n	8003b7c <UART_SetConfig+0x140>
 8003b12:	4b85      	ldr	r3, [pc, #532]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	d829      	bhi.n	8003b74 <UART_SetConfig+0x138>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0xec>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003b75 	.word	0x08003b75
 8003b30:	08003b75 	.word	0x08003b75
 8003b34:	08003b75 	.word	0x08003b75
 8003b38:	08003b69 	.word	0x08003b69
 8003b3c:	08003b75 	.word	0x08003b75
 8003b40:	08003b75 	.word	0x08003b75
 8003b44:	08003b75 	.word	0x08003b75
 8003b48:	08003b63 	.word	0x08003b63
 8003b4c:	08003b75 	.word	0x08003b75
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b75 	.word	0x08003b75
 8003b58:	08003b6f 	.word	0x08003b6f
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	76fb      	strb	r3, [r7, #27]
 8003b60:	e0ae      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b62:	2302      	movs	r3, #2
 8003b64:	76fb      	strb	r3, [r7, #27]
 8003b66:	e0ab      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	76fb      	strb	r3, [r7, #27]
 8003b6c:	e0a8      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b6e:	2308      	movs	r3, #8
 8003b70:	76fb      	strb	r3, [r7, #27]
 8003b72:	e0a5      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b74:	2310      	movs	r3, #16
 8003b76:	76fb      	strb	r3, [r7, #27]
 8003b78:	bf00      	nop
 8003b7a:	e0a1      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a6b      	ldr	r2, [pc, #428]	; (8003d30 <UART_SetConfig+0x2f4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d120      	bne.n	8003bc8 <UART_SetConfig+0x18c>
 8003b86:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d00f      	beq.n	8003bb4 <UART_SetConfig+0x178>
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d802      	bhi.n	8003b9e <UART_SetConfig+0x162>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <UART_SetConfig+0x16c>
 8003b9c:	e010      	b.n	8003bc0 <UART_SetConfig+0x184>
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d005      	beq.n	8003bae <UART_SetConfig+0x172>
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d009      	beq.n	8003bba <UART_SetConfig+0x17e>
 8003ba6:	e00b      	b.n	8003bc0 <UART_SetConfig+0x184>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	76fb      	strb	r3, [r7, #27]
 8003bac:	e088      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	76fb      	strb	r3, [r7, #27]
 8003bb2:	e085      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	76fb      	strb	r3, [r7, #27]
 8003bb8:	e082      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bba:	2308      	movs	r3, #8
 8003bbc:	76fb      	strb	r3, [r7, #27]
 8003bbe:	e07f      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	76fb      	strb	r3, [r7, #27]
 8003bc4:	bf00      	nop
 8003bc6:	e07b      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a59      	ldr	r2, [pc, #356]	; (8003d34 <UART_SetConfig+0x2f8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d120      	bne.n	8003c14 <UART_SetConfig+0x1d8>
 8003bd2:	4b55      	ldr	r3, [pc, #340]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d00f      	beq.n	8003c00 <UART_SetConfig+0x1c4>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d802      	bhi.n	8003bea <UART_SetConfig+0x1ae>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <UART_SetConfig+0x1b8>
 8003be8:	e010      	b.n	8003c0c <UART_SetConfig+0x1d0>
 8003bea:	2b80      	cmp	r3, #128	; 0x80
 8003bec:	d005      	beq.n	8003bfa <UART_SetConfig+0x1be>
 8003bee:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf0:	d009      	beq.n	8003c06 <UART_SetConfig+0x1ca>
 8003bf2:	e00b      	b.n	8003c0c <UART_SetConfig+0x1d0>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	76fb      	strb	r3, [r7, #27]
 8003bf8:	e062      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	76fb      	strb	r3, [r7, #27]
 8003bfe:	e05f      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c00:	2304      	movs	r3, #4
 8003c02:	76fb      	strb	r3, [r7, #27]
 8003c04:	e05c      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c06:	2308      	movs	r3, #8
 8003c08:	76fb      	strb	r3, [r7, #27]
 8003c0a:	e059      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	76fb      	strb	r3, [r7, #27]
 8003c10:	bf00      	nop
 8003c12:	e055      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a47      	ldr	r2, [pc, #284]	; (8003d38 <UART_SetConfig+0x2fc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d124      	bne.n	8003c68 <UART_SetConfig+0x22c>
 8003c1e:	4b42      	ldr	r3, [pc, #264]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2c:	d012      	beq.n	8003c54 <UART_SetConfig+0x218>
 8003c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c32:	d802      	bhi.n	8003c3a <UART_SetConfig+0x1fe>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <UART_SetConfig+0x20c>
 8003c38:	e012      	b.n	8003c60 <UART_SetConfig+0x224>
 8003c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c3e:	d006      	beq.n	8003c4e <UART_SetConfig+0x212>
 8003c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c44:	d009      	beq.n	8003c5a <UART_SetConfig+0x21e>
 8003c46:	e00b      	b.n	8003c60 <UART_SetConfig+0x224>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	76fb      	strb	r3, [r7, #27]
 8003c4c:	e038      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	76fb      	strb	r3, [r7, #27]
 8003c52:	e035      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c54:	2304      	movs	r3, #4
 8003c56:	76fb      	strb	r3, [r7, #27]
 8003c58:	e032      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	76fb      	strb	r3, [r7, #27]
 8003c5e:	e02f      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c60:	2310      	movs	r3, #16
 8003c62:	76fb      	strb	r3, [r7, #27]
 8003c64:	bf00      	nop
 8003c66:	e02b      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <UART_SetConfig+0x2e4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d124      	bne.n	8003cbc <UART_SetConfig+0x280>
 8003c72:	4b2d      	ldr	r3, [pc, #180]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c80:	d012      	beq.n	8003ca8 <UART_SetConfig+0x26c>
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c86:	d802      	bhi.n	8003c8e <UART_SetConfig+0x252>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <UART_SetConfig+0x260>
 8003c8c:	e012      	b.n	8003cb4 <UART_SetConfig+0x278>
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c92:	d006      	beq.n	8003ca2 <UART_SetConfig+0x266>
 8003c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c98:	d009      	beq.n	8003cae <UART_SetConfig+0x272>
 8003c9a:	e00b      	b.n	8003cb4 <UART_SetConfig+0x278>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	76fb      	strb	r3, [r7, #27]
 8003ca0:	e00e      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	76fb      	strb	r3, [r7, #27]
 8003ca6:	e00b      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	76fb      	strb	r3, [r7, #27]
 8003cac:	e008      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	76fb      	strb	r3, [r7, #27]
 8003cb2:	e005      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	76fb      	strb	r3, [r7, #27]
 8003cb8:	bf00      	nop
 8003cba:	e001      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <UART_SetConfig+0x2e4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	f040 8087 	bne.w	8003dda <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ccc:	7efb      	ldrb	r3, [r7, #27]
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d836      	bhi.n	8003d40 <UART_SetConfig+0x304>
 8003cd2:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <UART_SetConfig+0x29c>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003cfd 	.word	0x08003cfd
 8003cdc:	08003d41 	.word	0x08003d41
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d41 	.word	0x08003d41
 8003ce8:	08003d0b 	.word	0x08003d0b
 8003cec:	08003d41 	.word	0x08003d41
 8003cf0:	08003d41 	.word	0x08003d41
 8003cf4:	08003d41 	.word	0x08003d41
 8003cf8:	08003d13 	.word	0x08003d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cfc:	f7fe fbde 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 8003d00:	6178      	str	r0, [r7, #20]
        break;
 8003d02:	e022      	b.n	8003d4a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <UART_SetConfig+0x300>)
 8003d06:	617b      	str	r3, [r7, #20]
        break;
 8003d08:	e01f      	b.n	8003d4a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0a:	f7fe fb41 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8003d0e:	6178      	str	r0, [r7, #20]
        break;
 8003d10:	e01b      	b.n	8003d4a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	617b      	str	r3, [r7, #20]
        break;
 8003d18:	e017      	b.n	8003d4a <UART_SetConfig+0x30e>
 8003d1a:	bf00      	nop
 8003d1c:	efff69f3 	.word	0xefff69f3
 8003d20:	40008000 	.word	0x40008000
 8003d24:	40013800 	.word	0x40013800
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40004400 	.word	0x40004400
 8003d30:	40004800 	.word	0x40004800
 8003d34:	40004c00 	.word	0x40004c00
 8003d38:	40005000 	.word	0x40005000
 8003d3c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	76bb      	strb	r3, [r7, #26]
        break;
 8003d48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80f1 	beq.w	8003f34 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d305      	bcc.n	8003d6e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d902      	bls.n	8003d74 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	76bb      	strb	r3, [r7, #26]
 8003d72:	e0df      	b.n	8003f34 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4619      	mov	r1, r3
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f04f 0400 	mov.w	r4, #0
 8003d84:	0214      	lsls	r4, r2, #8
 8003d86:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d8a:	020b      	lsls	r3, r1, #8
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6852      	ldr	r2, [r2, #4]
 8003d90:	0852      	lsrs	r2, r2, #1
 8003d92:	4611      	mov	r1, r2
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	eb13 0b01 	adds.w	fp, r3, r1
 8003d9c:	eb44 0c02 	adc.w	ip, r4, r2
 8003da0:	4658      	mov	r0, fp
 8003da2:	4661      	mov	r1, ip
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f04f 0400 	mov.w	r4, #0
 8003dac:	461a      	mov	r2, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	f7fc fa5e 	bl	8000270 <__aeabi_uldivmod>
 8003db4:	4603      	mov	r3, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc0:	d308      	bcc.n	8003dd4 <UART_SetConfig+0x398>
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc8:	d204      	bcs.n	8003dd4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	e0af      	b.n	8003f34 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	76bb      	strb	r3, [r7, #26]
 8003dd8:	e0ac      	b.n	8003f34 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de2:	d15b      	bne.n	8003e9c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003de4:	7efb      	ldrb	r3, [r7, #27]
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d827      	bhi.n	8003e3a <UART_SetConfig+0x3fe>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x3b4>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e2b 	.word	0x08003e2b
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7fe fb52 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 8003e18:	6178      	str	r0, [r7, #20]
        break;
 8003e1a:	e013      	b.n	8003e44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7fe fb64 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8003e20:	6178      	str	r0, [r7, #20]
        break;
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b49      	ldr	r3, [pc, #292]	; (8003f4c <UART_SetConfig+0x510>)
 8003e26:	617b      	str	r3, [r7, #20]
        break;
 8003e28:	e00c      	b.n	8003e44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe fab1 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8003e2e:	6178      	str	r0, [r7, #20]
        break;
 8003e30:	e008      	b.n	8003e44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	617b      	str	r3, [r7, #20]
        break;
 8003e38:	e004      	b.n	8003e44 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	76bb      	strb	r3, [r7, #26]
        break;
 8003e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d074      	beq.n	8003f34 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	005a      	lsls	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	441a      	add	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b0f      	cmp	r3, #15
 8003e66:	d916      	bls.n	8003e96 <UART_SetConfig+0x45a>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6e:	d212      	bcs.n	8003e96 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f023 030f 	bic.w	r3, r3, #15
 8003e78:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	89fb      	ldrh	r3, [r7, #14]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	89fa      	ldrh	r2, [r7, #14]
 8003e92:	60da      	str	r2, [r3, #12]
 8003e94:	e04e      	b.n	8003f34 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	76bb      	strb	r3, [r7, #26]
 8003e9a:	e04b      	b.n	8003f34 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e9c:	7efb      	ldrb	r3, [r7, #27]
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d827      	bhi.n	8003ef2 <UART_SetConfig+0x4b6>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0x46c>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003ef3 	.word	0x08003ef3
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003ef3 	.word	0x08003ef3
 8003ec8:	08003eeb 	.word	0x08003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe faf6 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 8003ed0:	6178      	str	r0, [r7, #20]
        break;
 8003ed2:	e013      	b.n	8003efc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7fe fb08 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8003ed8:	6178      	str	r0, [r7, #20]
        break;
 8003eda:	e00f      	b.n	8003efc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <UART_SetConfig+0x510>)
 8003ede:	617b      	str	r3, [r7, #20]
        break;
 8003ee0:	e00c      	b.n	8003efc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7fe fa55 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8003ee6:	6178      	str	r0, [r7, #20]
        break;
 8003ee8:	e008      	b.n	8003efc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	617b      	str	r3, [r7, #20]
        break;
 8003ef0:	e004      	b.n	8003efc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	76bb      	strb	r3, [r7, #26]
        break;
 8003efa:	bf00      	nop
    }

    if (pclk != 0U)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d018      	beq.n	8003f34 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	085a      	lsrs	r2, r3, #1
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	441a      	add	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d908      	bls.n	8003f30 <UART_SetConfig+0x4f4>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d204      	bcs.n	8003f30 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	e001      	b.n	8003f34 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f40:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f4c:	00f42400 	.word	0x00f42400

08003f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404e:	d10a      	bne.n	8004066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040a2:	f7fc facd 	bl	8000640 <HAL_GetTick>
 80040a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d10e      	bne.n	80040d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f82a 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e020      	b.n	8004116 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d10e      	bne.n	8004100 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f814 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e00a      	b.n	8004116 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412e:	e05d      	b.n	80041ec <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004136:	d059      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004138:	f7fc fa82 	bl	8000640 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <UART_WaitOnFlagUntilTimeout+0x30>
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11b      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800415c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e042      	b.n	800420c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02b      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a2:	d123      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041bc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e00f      	b.n	800420c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4013      	ands	r3, r2
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	429a      	cmp	r2, r3
 8004208:	d092      	beq.n	8004130 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2120      	movs	r1, #32
 8004224:	4618      	mov	r0, r3
 8004226:	f001 f83b 	bl	80052a0 <SENSOR_IO_Read>
 800422a:	4603      	mov	r3, r0
 800422c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	f023 0304 	bic.w	r3, r3, #4
 8004234:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	f043 0304 	orr.w	r3, r3, #4
 800423c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	f023 0303 	bic.w	r3, r3, #3
 8004244:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004254:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	2120      	movs	r1, #32
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f804 	bl	800526c <SENSOR_IO_Write>
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004276:	2300      	movs	r3, #0
 8004278:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800427a:	f000 ffed 	bl	8005258 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	210f      	movs	r1, #15
 8004284:	4618      	mov	r0, r3
 8004286:	f001 f80b 	bl	80052a0 <SENSOR_IO_Read>
 800428a:	4603      	mov	r3, r0
 800428c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800428e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	b2d8      	uxtb	r0, r3
 80042a6:	f107 020c 	add.w	r2, r7, #12
 80042aa:	2302      	movs	r3, #2
 80042ac:	21b0      	movs	r1, #176	; 0xb0
 80042ae:	f001 f815 	bl	80052dc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80042b2:	7b3b      	ldrb	r3, [r7, #12]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80042ba:	7b7b      	ldrb	r3, [r7, #13]
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	b2d8      	uxtb	r0, r3
 80042c6:	f107 020c 	add.w	r2, r7, #12
 80042ca:	2302      	movs	r3, #2
 80042cc:	21b6      	movs	r1, #182	; 0xb6
 80042ce:	f001 f805 	bl	80052dc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80042d2:	7b7b      	ldrb	r3, [r7, #13]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	b21a      	sxth	r2, r3
 80042d8:	7b3b      	ldrb	r3, [r7, #12]
 80042da:	b21b      	sxth	r3, r3
 80042dc:	4313      	orrs	r3, r2
 80042de:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	b2d8      	uxtb	r0, r3
 80042e4:	f107 020c 	add.w	r2, r7, #12
 80042e8:	2302      	movs	r3, #2
 80042ea:	21ba      	movs	r1, #186	; 0xba
 80042ec:	f000 fff6 	bl	80052dc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80042f0:	7b7b      	ldrb	r3, [r7, #13]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	b21a      	sxth	r2, r3
 80042f6:	7b3b      	ldrb	r3, [r7, #12]
 80042f8:	b21b      	sxth	r3, r3
 80042fa:	4313      	orrs	r3, r2
 80042fc:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	b2d8      	uxtb	r0, r3
 8004302:	f107 020c 	add.w	r2, r7, #12
 8004306:	2302      	movs	r3, #2
 8004308:	21a8      	movs	r1, #168	; 0xa8
 800430a:	f000 ffe7 	bl	80052dc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800430e:	7b7b      	ldrb	r3, [r7, #13]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	b21a      	sxth	r2, r3
 8004314:	7b3b      	ldrb	r3, [r7, #12]
 8004316:	b21b      	sxth	r3, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800431c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004320:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800432e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004332:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	ee07 3a90 	vmov	s15, r3
 800433c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004340:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004344:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004348:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800436a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800436e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004372:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800437a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800437e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004382:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80043c8 <HTS221_H_ReadHumidity+0x130>
 8004386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	dd01      	ble.n	8004394 <HTS221_H_ReadHumidity+0xfc>
 8004390:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <HTS221_H_ReadHumidity+0x134>)
 8004392:	e00a      	b.n	80043aa <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8004394:	edd7 7a04 	vldr	s15, [r7, #16]
 8004398:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a0:	d502      	bpl.n	80043a8 <HTS221_H_ReadHumidity+0x110>
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e000      	b.n	80043aa <HTS221_H_ReadHumidity+0x112>
 80043a8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80043aa:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80043ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80043b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80043b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80043bc:	eeb0 0a67 	vmov.f32	s0, s15
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	447a0000 	.word	0x447a0000
 80043cc:	447a0000 	.word	0x447a0000

080043d0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2120      	movs	r1, #32
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 ff5c 	bl	80052a0 <SENSOR_IO_Read>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	f023 0304 	bic.w	r3, r3, #4
 80043f2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	f043 0304 	orr.w	r3, r3, #4
 80043fa:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004412:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	2120      	movs	r1, #32
 800441c:	4618      	mov	r0, r3
 800441e:	f000 ff25 	bl	800526c <SENSOR_IO_Write>
}
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b088      	sub	sp, #32
 800442e:	af00      	add	r7, sp, #0
 8004430:	4603      	mov	r3, r0
 8004432:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	b2d8      	uxtb	r0, r3
 8004438:	f107 0208 	add.w	r2, r7, #8
 800443c:	2302      	movs	r3, #2
 800443e:	21b2      	movs	r1, #178	; 0xb2
 8004440:	f000 ff4c 	bl	80052dc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2135      	movs	r1, #53	; 0x35
 800444a:	4618      	mov	r0, r3
 800444c:	f000 ff28 	bl	80052a0 <SENSOR_IO_Read>
 8004450:	4603      	mov	r3, r0
 8004452:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8004454:	7ffb      	ldrb	r3, [r7, #31]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	b21b      	sxth	r3, r3
 800445a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445e:	b21a      	sxth	r2, r3
 8004460:	7a3b      	ldrb	r3, [r7, #8]
 8004462:	b21b      	sxth	r3, r3
 8004464:	4313      	orrs	r3, r2
 8004466:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8004468:	7ffb      	ldrb	r3, [r7, #31]
 800446a:	019b      	lsls	r3, r3, #6
 800446c:	b21b      	sxth	r3, r3
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	b21a      	sxth	r2, r3
 8004474:	7a7b      	ldrb	r3, [r7, #9]
 8004476:	b21b      	sxth	r3, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800447c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004480:	10db      	asrs	r3, r3, #3
 8004482:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8004484:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004488:	10db      	asrs	r3, r3, #3
 800448a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	b2d8      	uxtb	r0, r3
 8004490:	f107 0208 	add.w	r2, r7, #8
 8004494:	2304      	movs	r3, #4
 8004496:	21bc      	movs	r1, #188	; 0xbc
 8004498:	f000 ff20 	bl	80052dc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800449c:	7a7b      	ldrb	r3, [r7, #9]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	b21a      	sxth	r2, r3
 80044a2:	7a3b      	ldrb	r3, [r7, #8]
 80044a4:	b21b      	sxth	r3, r3
 80044a6:	4313      	orrs	r3, r2
 80044a8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80044aa:	7afb      	ldrb	r3, [r7, #11]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	b21a      	sxth	r2, r3
 80044b0:	7abb      	ldrb	r3, [r7, #10]
 80044b2:	b21b      	sxth	r3, r3
 80044b4:	4313      	orrs	r3, r2
 80044b6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	b2d8      	uxtb	r0, r3
 80044bc:	f107 0208 	add.w	r2, r7, #8
 80044c0:	2302      	movs	r3, #2
 80044c2:	21aa      	movs	r1, #170	; 0xaa
 80044c4:	f000 ff0a 	bl	80052dc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80044c8:	7a7b      	ldrb	r3, [r7, #9]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	b21a      	sxth	r2, r3
 80044ce:	7a3b      	ldrb	r3, [r7, #8]
 80044d0:	b21b      	sxth	r3, r3
 80044d2:	4313      	orrs	r3, r2
 80044d4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80044d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80044da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80044fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004502:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004514:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004524:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	ee07 3a90 	vmov	s15, r3
}
 800452e:	eeb0 0a67 	vmov.f32	s0, s15
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004546:	2110      	movs	r1, #16
 8004548:	20d4      	movs	r0, #212	; 0xd4
 800454a:	f000 fea9 	bl	80052a0 <SENSOR_IO_Read>
 800454e:	4603      	mov	r3, r0
 8004550:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004556:	7bbb      	ldrb	r3, [r7, #14]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800455e:	7bba      	ldrb	r2, [r7, #14]
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	4313      	orrs	r3, r2
 8004564:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8004566:	7bbb      	ldrb	r3, [r7, #14]
 8004568:	461a      	mov	r2, r3
 800456a:	2110      	movs	r1, #16
 800456c:	20d4      	movs	r0, #212	; 0xd4
 800456e:	f000 fe7d 	bl	800526c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004572:	2112      	movs	r1, #18
 8004574:	20d4      	movs	r0, #212	; 0xd4
 8004576:	f000 fe93 	bl	80052a0 <SENSOR_IO_Read>
 800457a:	4603      	mov	r3, r0
 800457c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	0a1b      	lsrs	r3, r3, #8
 8004582:	b29b      	uxth	r3, r3
 8004584:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004586:	7bbb      	ldrb	r3, [r7, #14]
 8004588:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800458c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800458e:	7bba      	ldrb	r2, [r7, #14]
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	4313      	orrs	r3, r2
 8004594:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004596:	7bbb      	ldrb	r3, [r7, #14]
 8004598:	461a      	mov	r2, r3
 800459a:	2112      	movs	r1, #18
 800459c:	20d4      	movs	r0, #212	; 0xd4
 800459e:	f000 fe65 	bl	800526c <SENSOR_IO_Write>
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80045b0:	2300      	movs	r3, #0
 80045b2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80045b4:	2110      	movs	r1, #16
 80045b6:	20d4      	movs	r0, #212	; 0xd4
 80045b8:	f000 fe72 	bl	80052a0 <SENSOR_IO_Read>
 80045bc:	4603      	mov	r3, r0
 80045be:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	461a      	mov	r2, r3
 80045cc:	2110      	movs	r1, #16
 80045ce:	20d4      	movs	r0, #212	; 0xd4
 80045d0:	f000 fe4c 	bl	800526c <SENSOR_IO_Write>
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80045e0:	f000 fe3a 	bl	8005258 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80045e4:	210f      	movs	r1, #15
 80045e6:	20d4      	movs	r0, #212	; 0xd4
 80045e8:	f000 fe5a 	bl	80052a0 <SENSOR_IO_Read>
 80045ec:	4603      	mov	r3, r0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	4603      	mov	r3, r0
 80045fa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004600:	2115      	movs	r1, #21
 8004602:	20d4      	movs	r0, #212	; 0xd4
 8004604:	f000 fe4c 	bl	80052a0 <SENSOR_IO_Read>
 8004608:	4603      	mov	r3, r0
 800460a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	f023 0310 	bic.w	r3, r3, #16
 8004612:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	f043 0310 	orr.w	r3, r3, #16
 8004620:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	461a      	mov	r2, r3
 8004626:	2115      	movs	r1, #21
 8004628:	20d4      	movs	r0, #212	; 0xd4
 800462a:	f000 fe1f 	bl	800526c <SENSOR_IO_Write>
}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8004640:	2300      	movs	r3, #0
 8004642:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800464e:	2110      	movs	r1, #16
 8004650:	20d4      	movs	r0, #212	; 0xd4
 8004652:	f000 fe25 	bl	80052a0 <SENSOR_IO_Read>
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800465a:	f107 0208 	add.w	r2, r7, #8
 800465e:	2306      	movs	r3, #6
 8004660:	2128      	movs	r1, #40	; 0x28
 8004662:	20d4      	movs	r0, #212	; 0xd4
 8004664:	f000 fe3a 	bl	80052dc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004668:	2300      	movs	r3, #0
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e01f      	b.n	80046ae <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800466e:	7ffb      	ldrb	r3, [r7, #31]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	3301      	adds	r3, #1
 8004674:	f107 0220 	add.w	r2, r7, #32
 8004678:	4413      	add	r3, r2
 800467a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800467e:	b29b      	uxth	r3, r3
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	b29a      	uxth	r2, r3
 8004684:	7ffb      	ldrb	r3, [r7, #31]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	f107 0120 	add.w	r1, r7, #32
 800468c:	440b      	add	r3, r1
 800468e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004692:	b29b      	uxth	r3, r3
 8004694:	4413      	add	r3, r2
 8004696:	b29a      	uxth	r2, r3
 8004698:	7ffb      	ldrb	r3, [r7, #31]
 800469a:	b212      	sxth	r2, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	f107 0120 	add.w	r1, r7, #32
 80046a2:	440b      	add	r3, r1
 80046a4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80046a8:	7ffb      	ldrb	r3, [r7, #31]
 80046aa:	3301      	adds	r3, #1
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	7ffb      	ldrb	r3, [r7, #31]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d9dc      	bls.n	800466e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b0c      	cmp	r3, #12
 80046bc:	d828      	bhi.n	8004710 <LSM6DSL_AccReadXYZ+0xd8>
 80046be:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <LSM6DSL_AccReadXYZ+0x8c>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	080046f9 	.word	0x080046f9
 80046c8:	08004711 	.word	0x08004711
 80046cc:	08004711 	.word	0x08004711
 80046d0:	08004711 	.word	0x08004711
 80046d4:	0800470b 	.word	0x0800470b
 80046d8:	08004711 	.word	0x08004711
 80046dc:	08004711 	.word	0x08004711
 80046e0:	08004711 	.word	0x08004711
 80046e4:	080046ff 	.word	0x080046ff
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004711 	.word	0x08004711
 80046f4:	08004705 	.word	0x08004705
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <LSM6DSL_AccReadXYZ+0x124>)
 80046fa:	61bb      	str	r3, [r7, #24]
    break;
 80046fc:	e008      	b.n	8004710 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80046fe:	4b18      	ldr	r3, [pc, #96]	; (8004760 <LSM6DSL_AccReadXYZ+0x128>)
 8004700:	61bb      	str	r3, [r7, #24]
    break;
 8004702:	e005      	b.n	8004710 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004704:	4b17      	ldr	r3, [pc, #92]	; (8004764 <LSM6DSL_AccReadXYZ+0x12c>)
 8004706:	61bb      	str	r3, [r7, #24]
    break;
 8004708:	e002      	b.n	8004710 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800470a:	4b17      	ldr	r3, [pc, #92]	; (8004768 <LSM6DSL_AccReadXYZ+0x130>)
 800470c:	61bb      	str	r3, [r7, #24]
    break;    
 800470e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004710:	2300      	movs	r3, #0
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e01b      	b.n	800474e <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004716:	7ffb      	ldrb	r3, [r7, #31]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	f107 0220 	add.w	r2, r7, #32
 800471e:	4413      	add	r3, r2
 8004720:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004724:	ee07 3a90 	vmov	s15, r3
 8004728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800472c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004734:	7ffb      	ldrb	r3, [r7, #31]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4413      	add	r3, r2
 800473c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004740:	ee17 2a90 	vmov	r2, s15
 8004744:	b212      	sxth	r2, r2
 8004746:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004748:	7ffb      	ldrb	r3, [r7, #31]
 800474a:	3301      	adds	r3, #1
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	7ffb      	ldrb	r3, [r7, #31]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d9e0      	bls.n	8004716 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8004754:	bf00      	nop
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	3d79db23 	.word	0x3d79db23
 8004760:	3df9db23 	.word	0x3df9db23
 8004764:	3e79db23 	.word	0x3e79db23
 8004768:	3ef9db23 	.word	0x3ef9db23

0800476c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800477a:	2111      	movs	r1, #17
 800477c:	20d4      	movs	r0, #212	; 0xd4
 800477e:	f000 fd8f 	bl	80052a0 <SENSOR_IO_Read>
 8004782:	4603      	mov	r3, r0
 8004784:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800478a:	7bbb      	ldrb	r3, [r7, #14]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004792:	7bba      	ldrb	r2, [r7, #14]
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	4313      	orrs	r3, r2
 8004798:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800479a:	7bbb      	ldrb	r3, [r7, #14]
 800479c:	461a      	mov	r2, r3
 800479e:	2111      	movs	r1, #17
 80047a0:	20d4      	movs	r0, #212	; 0xd4
 80047a2:	f000 fd63 	bl	800526c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80047a6:	2112      	movs	r1, #18
 80047a8:	20d4      	movs	r0, #212	; 0xd4
 80047aa:	f000 fd79 	bl	80052a0 <SENSOR_IO_Read>
 80047ae:	4603      	mov	r3, r0
 80047b0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80047ba:	7bbb      	ldrb	r3, [r7, #14]
 80047bc:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80047c0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80047c2:	7bba      	ldrb	r2, [r7, #14]
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80047ca:	7bbb      	ldrb	r3, [r7, #14]
 80047cc:	461a      	mov	r2, r3
 80047ce:	2112      	movs	r1, #18
 80047d0:	20d4      	movs	r0, #212	; 0xd4
 80047d2:	f000 fd4b 	bl	800526c <SENSOR_IO_Write>
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80047e4:	2300      	movs	r3, #0
 80047e6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80047e8:	2111      	movs	r1, #17
 80047ea:	20d4      	movs	r0, #212	; 0xd4
 80047ec:	f000 fd58 	bl	80052a0 <SENSOR_IO_Read>
 80047f0:	4603      	mov	r3, r0
 80047f2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	461a      	mov	r2, r3
 8004800:	2111      	movs	r1, #17
 8004802:	20d4      	movs	r0, #212	; 0xd4
 8004804:	f000 fd32 	bl	800526c <SENSOR_IO_Write>
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004814:	f000 fd20 	bl	8005258 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8004818:	210f      	movs	r1, #15
 800481a:	20d4      	movs	r0, #212	; 0xd4
 800481c:	f000 fd40 	bl	80052a0 <SENSOR_IO_Read>
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	bd80      	pop	{r7, pc}

08004826 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	4603      	mov	r3, r0
 800482e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8004834:	2116      	movs	r1, #22
 8004836:	20d4      	movs	r0, #212	; 0xd4
 8004838:	f000 fd32 	bl	80052a0 <SENSOR_IO_Read>
 800483c:	4603      	mov	r3, r0
 800483e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004846:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004854:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	461a      	mov	r2, r3
 800485a:	2116      	movs	r1, #22
 800485c:	20d4      	movs	r0, #212	; 0xd4
 800485e:	f000 fd05 	bl	800526c <SENSOR_IO_Write>
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8004874:	2300      	movs	r3, #0
 8004876:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004882:	2111      	movs	r1, #17
 8004884:	20d4      	movs	r0, #212	; 0xd4
 8004886:	f000 fd0b 	bl	80052a0 <SENSOR_IO_Read>
 800488a:	4603      	mov	r3, r0
 800488c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800488e:	f107 0208 	add.w	r2, r7, #8
 8004892:	2306      	movs	r3, #6
 8004894:	2122      	movs	r1, #34	; 0x22
 8004896:	20d4      	movs	r0, #212	; 0xd4
 8004898:	f000 fd20 	bl	80052dc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800489c:	2300      	movs	r3, #0
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e01f      	b.n	80048e2 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80048a2:	7ffb      	ldrb	r3, [r7, #31]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	3301      	adds	r3, #1
 80048a8:	f107 0220 	add.w	r2, r7, #32
 80048ac:	4413      	add	r3, r2
 80048ae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	7ffb      	ldrb	r3, [r7, #31]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	f107 0120 	add.w	r1, r7, #32
 80048c0:	440b      	add	r3, r1
 80048c2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	7ffb      	ldrb	r3, [r7, #31]
 80048ce:	b212      	sxth	r2, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	f107 0120 	add.w	r1, r7, #32
 80048d6:	440b      	add	r3, r1
 80048d8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80048dc:	7ffb      	ldrb	r3, [r7, #31]
 80048de:	3301      	adds	r3, #1
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	7ffb      	ldrb	r3, [r7, #31]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d9dc      	bls.n	80048a2 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d828      	bhi.n	8004944 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 80048f2:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	0800492d 	.word	0x0800492d
 80048fc:	08004945 	.word	0x08004945
 8004900:	08004945 	.word	0x08004945
 8004904:	08004945 	.word	0x08004945
 8004908:	08004933 	.word	0x08004933
 800490c:	08004945 	.word	0x08004945
 8004910:	08004945 	.word	0x08004945
 8004914:	08004945 	.word	0x08004945
 8004918:	08004939 	.word	0x08004939
 800491c:	08004945 	.word	0x08004945
 8004920:	08004945 	.word	0x08004945
 8004924:	08004945 	.word	0x08004945
 8004928:	0800493f 	.word	0x0800493f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800492c:	4b16      	ldr	r3, [pc, #88]	; (8004988 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800492e:	61bb      	str	r3, [r7, #24]
    break;
 8004930:	e008      	b.n	8004944 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8004932:	4b16      	ldr	r3, [pc, #88]	; (800498c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8004934:	61bb      	str	r3, [r7, #24]
    break;
 8004936:	e005      	b.n	8004944 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800493a:	61bb      	str	r3, [r7, #24]
    break;
 800493c:	e002      	b.n	8004944 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8004940:	61bb      	str	r3, [r7, #24]
    break;    
 8004942:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e017      	b.n	800497a <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800494a:	7ffb      	ldrb	r3, [r7, #31]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	f107 0220 	add.w	r2, r7, #32
 8004952:	4413      	add	r3, r2
 8004954:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004958:	ee07 3a90 	vmov	s15, r3
 800495c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004960:	7ffb      	ldrb	r3, [r7, #31]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4413      	add	r3, r2
 8004968:	edd7 7a06 	vldr	s15, [r7, #24]
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004974:	7ffb      	ldrb	r3, [r7, #31]
 8004976:	3301      	adds	r3, #1
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	7ffb      	ldrb	r3, [r7, #31]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d9e4      	bls.n	800494a <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8004980:	bf00      	nop
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	410c0000 	.word	0x410c0000
 800498c:	418c0000 	.word	0x418c0000
 8004990:	420c0000 	.word	0x420c0000
 8004994:	428c0000 	.word	0x428c0000

08004998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 800499c:	f7fb fde8 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049a0:	f000 f818 	bl	80049d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049a4:	f000 f94e 	bl	8004c44 <MX_GPIO_Init>
  MX_I2C1_Init();
 80049a8:	f000 f88e 	bl	8004ac8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80049ac:	f000 f91a 	bl	8004be4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80049b0:	f000 f8ca 	bl	8004b48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	//I2C Sensor Initialization
	BSP_ACCELERO_Init();
 80049b4:	f000 fcb0 	bl	8005318 <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 80049b8:	f000 fd66 	bl	8005488 <BSP_TSENSOR_Init>
	BSP_GYRO_Init();
 80049bc:	f000 fd02 	bl	80053c4 <BSP_GYRO_Init>
	BSP_HSENSOR_Init();
 80049c0:	f000 fd42 	bl	8005448 <BSP_HSENSOR_Init>

	// Start the timer
	calibrate();
 80049c4:	f000 fa4c 	bl	8004e60 <calibrate>
	HAL_TIM_Base_Start_IT(&htim2);
 80049c8:	4801      	ldr	r0, [pc, #4]	; (80049d0 <main+0x38>)
 80049ca:	f7fe fb0b 	bl	8002fe4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80049ce:	e7fe      	b.n	80049ce <main+0x36>
 80049d0:	200002bc 	.word	0x200002bc

080049d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b0b8      	sub	sp, #224	; 0xe0
 80049d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049de:	2244      	movs	r2, #68	; 0x44
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 ff58 	bl	8005898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049f8:	463b      	mov	r3, r7
 80049fa:	2288      	movs	r2, #136	; 0x88
 80049fc:	2100      	movs	r1, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 ff4a 	bl	8005898 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004a04:	2310      	movs	r3, #16
 8004a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004a16:	2360      	movs	r3, #96	; 0x60
 8004a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004a2e:	2328      	movs	r3, #40	; 0x28
 8004a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004a34:	2307      	movs	r3, #7
 8004a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a40:	2302      	movs	r3, #2
 8004a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fc ffd8 	bl	8001a00 <HAL_RCC_OscConfig>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004a56:	f000 fb07 	bl	8005068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a5a:	230f      	movs	r3, #15
 8004a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a60:	2303      	movs	r3, #3
 8004a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004a78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004a7c:	2104      	movs	r1, #4
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fd fba4 	bl	80021cc <HAL_RCC_ClockConfig>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004a8a:	f000 faed 	bl	8005068 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8004a8e:	2341      	movs	r3, #65	; 0x41
 8004a90:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004a92:	2300      	movs	r3, #0
 8004a94:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004a96:	2300      	movs	r3, #0
 8004a98:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fd fd99 	bl	80025d4 <HAL_RCCEx_PeriphCLKConfig>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004aa8:	f000 fade 	bl	8005068 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004aac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ab0:	f7fc ff50 	bl	8001954 <HAL_PWREx_ControlVoltageScaling>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004aba:	f000 fad5 	bl	8005068 <Error_Handler>
  }
}
 8004abe:	bf00      	nop
 8004ac0:	37e0      	adds	r7, #224	; 0xe0
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004ace:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <MX_I2C1_Init+0x78>)
 8004ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <MX_I2C1_Init+0x7c>)
 8004ad6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004ad8:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ade:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ae4:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004aea:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004af6:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004afc:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b02:	480e      	ldr	r0, [pc, #56]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004b04:	f7fc f978 	bl	8000df8 <HAL_I2C_Init>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004b0e:	f000 faab 	bl	8005068 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b12:	2100      	movs	r1, #0
 8004b14:	4809      	ldr	r0, [pc, #36]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004b16:	f7fc fe77 	bl	8001808 <HAL_I2CEx_ConfigAnalogFilter>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004b20:	f000 faa2 	bl	8005068 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004b24:	2100      	movs	r1, #0
 8004b26:	4805      	ldr	r0, [pc, #20]	; (8004b3c <MX_I2C1_Init+0x74>)
 8004b28:	f7fc feb9 	bl	800189e <HAL_I2CEx_ConfigDigitalFilter>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004b32:	f000 fa99 	bl	8005068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000164 	.word	0x20000164
 8004b40:	40005400 	.word	0x40005400
 8004b44:	10909cec 	.word	0x10909cec

08004b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b4e:	f107 0310 	add.w	r3, r7, #16
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	605a      	str	r2, [r3, #4]
 8004b58:	609a      	str	r2, [r3, #8]
 8004b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	605a      	str	r2, [r3, #4]
 8004b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b66:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <MX_TIM2_Init+0x98>)
 8004b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000;
 8004b6e:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <MX_TIM2_Init+0x98>)
 8004b70:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004b74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <MX_TIM2_Init+0x98>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004b7c:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <MX_TIM2_Init+0x98>)
 8004b7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b84:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <MX_TIM2_Init+0x98>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b8a:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <MX_TIM2_Init+0x98>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b90:	4813      	ldr	r0, [pc, #76]	; (8004be0 <MX_TIM2_Init+0x98>)
 8004b92:	f7fe f9cf 	bl	8002f34 <HAL_TIM_Base_Init>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004b9c:	f000 fa64 	bl	8005068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ba6:	f107 0310 	add.w	r3, r7, #16
 8004baa:	4619      	mov	r1, r3
 8004bac:	480c      	ldr	r0, [pc, #48]	; (8004be0 <MX_TIM2_Init+0x98>)
 8004bae:	f7fe fba8 	bl	8003302 <HAL_TIM_ConfigClockSource>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004bb8:	f000 fa56 	bl	8005068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bc4:	1d3b      	adds	r3, r7, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4805      	ldr	r0, [pc, #20]	; (8004be0 <MX_TIM2_Init+0x98>)
 8004bca:	f7fe fdaf 	bl	800372c <HAL_TIMEx_MasterConfigSynchronization>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004bd4:	f000 fa48 	bl	8005068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004bd8:	bf00      	nop
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	200002bc 	.word	0x200002bc

08004be4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004be8:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004bea:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <MX_USART1_UART_Init+0x5c>)
 8004bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004bee:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004bf0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c02:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004c0a:	220c      	movs	r2, #12
 8004c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c1a:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c26:	4805      	ldr	r0, [pc, #20]	; (8004c3c <MX_USART1_UART_Init+0x58>)
 8004c28:	f7fe fe26 	bl	8003878 <HAL_UART_Init>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004c32:	f000 fa19 	bl	8005068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000214 	.word	0x20000214
 8004c40:	40013800 	.word	0x40013800

08004c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c58:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <MX_GPIO_Init+0x4c>)
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5c:	4a0c      	ldr	r2, [pc, #48]	; (8004c90 <MX_GPIO_Init+0x4c>)
 8004c5e:	f043 0302 	orr.w	r3, r3, #2
 8004c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <MX_GPIO_Init+0x4c>)
 8004c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004c70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c76:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <MX_GPIO_Init+0x50>)
 8004c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004c7e:	1d3b      	adds	r3, r7, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4805      	ldr	r0, [pc, #20]	; (8004c98 <MX_GPIO_Init+0x54>)
 8004c84:	f7fb fe1c 	bl	80008c0 <HAL_GPIO_Init>

}
 8004c88:	bf00      	nop
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000
 8004c94:	10110000 	.word	0x10110000
 8004c98:	48000400 	.word	0x48000400

08004c9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	readAccelerometer();
 8004ca4:	f000 f95e 	bl	8004f64 <readAccelerometer>
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <maxval>:
int maxval(int num1, int num2)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
    return (num1 > num2 ) ? num1 : num2;
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	bfb8      	it	lt
 8004cc2:	4613      	movlt	r3, r2
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <minval>:

int minval(int num1, int num2)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
    return (num1 > num2 ) ? num2 : num1;
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	bfa8      	it	ge
 8004ce2:	4613      	movge	r3, r2
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <getXYZ>:
void getXYZ() {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
	int16_t count2 = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	80fb      	strh	r3, [r7, #6]
	Sample_X = 0;
 8004cfa:	4b4e      	ldr	r3, [pc, #312]	; (8004e34 <getXYZ+0x144>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	801a      	strh	r2, [r3, #0]
	do{
		BSP_ACCELERO_AccGetXYZ(acceleroReading);
 8004d00:	484d      	ldr	r0, [pc, #308]	; (8004e38 <getXYZ+0x148>)
 8004d02:	f000 fb47 	bl	8005394 <BSP_ACCELERO_AccGetXYZ>
		Sample_X = Sample_X + (int)acceleroReading[0];
 8004d06:	4b4c      	ldr	r3, [pc, #304]	; (8004e38 <getXYZ+0x148>)
 8004d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <getXYZ+0x144>)
 8004d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	b21a      	sxth	r2, r3
 8004d1c:	4b45      	ldr	r3, [pc, #276]	; (8004e34 <getXYZ+0x144>)
 8004d1e:	801a      	strh	r2, [r3, #0]
		count2++; // average represents the acceleration of
 8004d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3301      	adds	r3, #1
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	80fb      	strh	r3, [r7, #6]
		// an instant.
	} while (count2!=0x40); // 64 sums of the acceleration sample
 8004d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d1e5      	bne.n	8004d00 <getXYZ+0x10>

	Sample_X = Sample_X >> 6; // division by 64
 8004d34:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <getXYZ+0x144>)
 8004d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d3a:	119b      	asrs	r3, r3, #6
 8004d3c:	b21a      	sxth	r2, r3
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <getXYZ+0x144>)
 8004d40:	801a      	strh	r2, [r3, #0]
	Sample_Y = Sample_X >> 6;
 8004d42:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <getXYZ+0x144>)
 8004d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d48:	119b      	asrs	r3, r3, #6
 8004d4a:	b21a      	sxth	r2, r3
 8004d4c:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <getXYZ+0x14c>)
 8004d4e:	801a      	strh	r2, [r3, #0]
	/*
	Sample_X = (int)acceleroReading[0];
	Sample_Y = (int)acceleroReading[1];

	*/
	Sample_Z = (int)acceleroReading[2];
 8004d50:	4b39      	ldr	r3, [pc, #228]	; (8004e38 <getXYZ+0x148>)
 8004d52:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004d56:	4b3a      	ldr	r3, [pc, #232]	; (8004e40 <getXYZ+0x150>)
 8004d58:	801a      	strh	r2, [r3, #0]
	/*
	while(integral_disp == 0 & Sample_Z-1032<-20){
		//dead
	}
	*/
	int8_t restIndicator = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	717b      	strb	r3, [r7, #5]
	if(abs(Sample_Z-1032)>100)/*otherwise in noise range*/{
 8004d5e:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <getXYZ+0x150>)
 8004d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d64:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bfb8      	it	lt
 8004d6c:	425b      	neglt	r3, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	dd5c      	ble.n	8004e2c <getXYZ+0x13c>
			calibratedz = Sample_Z-1032;
 8004d72:	4b33      	ldr	r3, [pc, #204]	; (8004e40 <getXYZ+0x150>)
 8004d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d78:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004d7c:	4a31      	ldr	r2, [pc, #196]	; (8004e44 <getXYZ+0x154>)
 8004d7e:	6013      	str	r3, [r2, #0]
			integral_velo += calibratedz/100;
 8004d80:	4b30      	ldr	r3, [pc, #192]	; (8004e44 <getXYZ+0x154>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a30      	ldr	r2, [pc, #192]	; (8004e48 <getXYZ+0x158>)
 8004d86:	fb82 1203 	smull	r1, r2, r2, r3
 8004d8a:	1152      	asrs	r2, r2, #5
 8004d8c:	17db      	asrs	r3, r3, #31
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	4b2e      	ldr	r3, [pc, #184]	; (8004e4c <getXYZ+0x15c>)
 8004d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	b21a      	sxth	r2, r3
 8004da0:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <getXYZ+0x15c>)
 8004da2:	801a      	strh	r2, [r3, #0]
			integral_disp += integral_velo;
 8004da4:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <getXYZ+0x160>)
 8004da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <getXYZ+0x15c>)
 8004dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	4413      	add	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	b21a      	sxth	r2, r3
 8004dba:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <getXYZ+0x160>)
 8004dbc:	801a      	strh	r2, [r3, #0]
			max = maxval(max, calibratedz);
 8004dbe:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <getXYZ+0x164>)
 8004dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <getXYZ+0x154>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f7ff ff6f 	bl	8004cb0 <maxval>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	b21a      	sxth	r2, r3
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <getXYZ+0x164>)
 8004dd8:	801a      	strh	r2, [r3, #0]
			min = minval(min, calibratedz);
 8004dda:	4b1f      	ldr	r3, [pc, #124]	; (8004e58 <getXYZ+0x168>)
 8004ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <getXYZ+0x154>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f7ff ff71 	bl	8004cd0 <minval>
 8004dee:	4603      	mov	r3, r0
 8004df0:	b21a      	sxth	r2, r3
 8004df2:	4b19      	ldr	r3, [pc, #100]	; (8004e58 <getXYZ+0x168>)
 8004df4:	801a      	strh	r2, [r3, #0]
			if(calibratedz>900) restIndicator = 0;
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <getXYZ+0x154>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004dfe:	dd01      	ble.n	8004e04 <getXYZ+0x114>
 8004e00:	2300      	movs	r3, #0
 8004e02:	717b      	strb	r3, [r7, #5]
			if(calibratedz<-900 && restIndicator == 0){
 8004e04:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <getXYZ+0x154>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f513 7f61 	cmn.w	r3, #900	; 0x384
 8004e0c:	da0e      	bge.n	8004e2c <getXYZ+0x13c>
 8004e0e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <getXYZ+0x13c>
				num_pushups++;
 8004e16:	4b11      	ldr	r3, [pc, #68]	; (8004e5c <getXYZ+0x16c>)
 8004e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3301      	adds	r3, #1
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	b21a      	sxth	r2, r3
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <getXYZ+0x16c>)
 8004e26:	801a      	strh	r2, [r3, #0]
				restIndicator = 1;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	717b      	strb	r3, [r7, #5]
			}

		}

}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20000330 	.word	0x20000330
 8004e38:	20000114 	.word	0x20000114
 8004e3c:	20000294 	.word	0x20000294
 8004e40:	200001b0 	.word	0x200001b0
 8004e44:	20000128 	.word	0x20000128
 8004e48:	51eb851f 	.word	0x51eb851f
 8004e4c:	20000122 	.word	0x20000122
 8004e50:	20000124 	.word	0x20000124
 8004e54:	2000008c 	.word	0x2000008c
 8004e58:	2000008e 	.word	0x2000008e
 8004e5c:	2000012c 	.word	0x2000012c

08004e60 <calibrate>:


void calibrate() {
 8004e60:	b5b0      	push	{r4, r5, r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
	int16_t count1 = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	80fb      	strh	r3, [r7, #6]

	HAL_Delay(3000);
 8004e6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e6e:	f7fb fbf3 	bl	8000658 <HAL_Delay>

	do {
		getXYZ();
 8004e72:	f7ff ff3d 	bl	8004cf0 <getXYZ>
		sstatex = sstatex + Sample_X; // Accumulate Samples
 8004e76:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <calibrate+0xdc>)
 8004e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	4b30      	ldr	r3, [pc, #192]	; (8004f40 <calibrate+0xe0>)
 8004e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	b21a      	sxth	r2, r3
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <calibrate+0xdc>)
 8004e8e:	801a      	strh	r2, [r3, #0]
		sstatey = sstatey + Sample_Y;
 8004e90:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <calibrate+0xe4>)
 8004e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <calibrate+0xe8>)
 8004e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	b21a      	sxth	r2, r3
 8004ea6:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <calibrate+0xe4>)
 8004ea8:	801a      	strh	r2, [r3, #0]
		sstatez = sstatez + Sample_Z;
 8004eaa:	4b28      	ldr	r3, [pc, #160]	; (8004f4c <calibrate+0xec>)
 8004eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	4b27      	ldr	r3, [pc, #156]	; (8004f50 <calibrate+0xf0>)
 8004eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	4413      	add	r3, r2
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	b21a      	sxth	r2, r3
 8004ec0:	4b22      	ldr	r3, [pc, #136]	; (8004f4c <calibrate+0xec>)
 8004ec2:	801a      	strh	r2, [r3, #0]
		count1++;
 8004ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3301      	adds	r3, #1
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	80fb      	strh	r3, [r7, #6]
	} while (count1 != 0x0400); // 1024 times
 8004ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d1cb      	bne.n	8004e72 <calibrate+0x12>

	sstatex = sstatex>>10; // division between 1024
 8004eda:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <calibrate+0xdc>)
 8004edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ee0:	129b      	asrs	r3, r3, #10
 8004ee2:	b21a      	sxth	r2, r3
 8004ee4:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <calibrate+0xdc>)
 8004ee6:	801a      	strh	r2, [r3, #0]
	sstatey = sstatey>>10;
 8004ee8:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <calibrate+0xe4>)
 8004eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eee:	129b      	asrs	r3, r3, #10
 8004ef0:	b21a      	sxth	r2, r3
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <calibrate+0xe4>)
 8004ef4:	801a      	strh	r2, [r3, #0]
	sstatez = sstatez>>10;
 8004ef6:	4b15      	ldr	r3, [pc, #84]	; (8004f4c <calibrate+0xec>)
 8004ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004efc:	129b      	asrs	r3, r3, #10
 8004efe:	b21a      	sxth	r2, r3
 8004f00:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <calibrate+0xec>)
 8004f02:	801a      	strh	r2, [r3, #0]

	calibrated = 1;
 8004f04:	4b13      	ldr	r3, [pc, #76]	; (8004f54 <calibrate+0xf4>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]

	sprintf(accelerometerStr, "Calibration completed. \n");
 8004f0a:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <calibrate+0xf8>)
 8004f0c:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <calibrate+0xfc>)
 8004f0e:	4615      	mov	r5, r2
 8004f10:	461c      	mov	r4, r3
 8004f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f14:	6028      	str	r0, [r5, #0]
 8004f16:	6069      	str	r1, [r5, #4]
 8004f18:	60aa      	str	r2, [r5, #8]
 8004f1a:	60eb      	str	r3, [r5, #12]
 8004f1c:	cc03      	ldmia	r4!, {r0, r1}
 8004f1e:	6128      	str	r0, [r5, #16]
 8004f20:	6169      	str	r1, [r5, #20]
 8004f22:	7823      	ldrb	r3, [r4, #0]
 8004f24:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8004f26:	2364      	movs	r3, #100	; 0x64
 8004f28:	221e      	movs	r2, #30
 8004f2a:	490b      	ldr	r1, [pc, #44]	; (8004f58 <calibrate+0xf8>)
 8004f2c:	480c      	ldr	r0, [pc, #48]	; (8004f60 <calibrate+0x100>)
 8004f2e:	f7fe fcf1 	bl	8003914 <HAL_UART_Transmit>
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bdb0      	pop	{r4, r5, r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000296 	.word	0x20000296
 8004f40:	20000330 	.word	0x20000330
 8004f44:	200001f0 	.word	0x200001f0
 8004f48:	20000294 	.word	0x20000294
 8004f4c:	20000298 	.word	0x20000298
 8004f50:	200001b0 	.word	0x200001b0
 8004f54:	2000011a 	.word	0x2000011a
 8004f58:	200001f4 	.word	0x200001f4
 8004f5c:	080060cc 	.word	0x080060cc
 8004f60:	20000214 	.word	0x20000214

08004f64 <readAccelerometer>:

void readAccelerometer() {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0

	// get one
	getXYZ();
 8004f68:	f7ff fec2 	bl	8004cf0 <getXYZ>
	accelerationx[0] = Sample_X - sstatex;
 8004f6c:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <readAccelerometer+0x80>)
 8004f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <readAccelerometer+0x84>)
 8004f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	b21a      	sxth	r2, r3
 8004f82:	4b1a      	ldr	r3, [pc, #104]	; (8004fec <readAccelerometer+0x88>)
 8004f84:	801a      	strh	r2, [r3, #0]
	//velocityx[0] = velocityx[1] + accelerationx[1] + ((accelerationx[0] - accelerationx[1])>>1) ;

	// get one
	getXYZ();
 8004f86:	f7ff feb3 	bl	8004cf0 <getXYZ>
	accelerationx[1] = Sample_X - sstatex;
 8004f8a:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <readAccelerometer+0x80>)
 8004f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <readAccelerometer+0x84>)
 8004f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	b21a      	sxth	r2, r3
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <readAccelerometer+0x88>)
 8004fa2:	805a      	strh	r2, [r3, #2]
	//velocityx[1] = velocityx[0] + accelerationx[0] + ((accelerationx[1] - accelerationx[0])>>1) ;


	if (!is_checking && isMovementDetected()) {
 8004fa4:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <readAccelerometer+0x8c>)
 8004fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d115      	bne.n	8004fda <readAccelerometer+0x76>
 8004fae:	f000 f829 	bl	8005004 <isMovementDetected>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <readAccelerometer+0x76>
		is_checking = 1;
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <readAccelerometer+0x8c>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
		//num_pushups++;
		sprintf(accelerometerStr, "Pushup detected. %d\n", num_pushups);
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <readAccelerometer+0x90>)
 8004fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	490c      	ldr	r1, [pc, #48]	; (8004ff8 <readAccelerometer+0x94>)
 8004fc8:	480c      	ldr	r0, [pc, #48]	; (8004ffc <readAccelerometer+0x98>)
 8004fca:	f000 fc6d 	bl	80058a8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8004fce:	2364      	movs	r3, #100	; 0x64
 8004fd0:	221e      	movs	r2, #30
 8004fd2:	490a      	ldr	r1, [pc, #40]	; (8004ffc <readAccelerometer+0x98>)
 8004fd4:	480a      	ldr	r0, [pc, #40]	; (8005000 <readAccelerometer+0x9c>)
 8004fd6:	f7fe fc9d 	bl	8003914 <HAL_UART_Transmit>
	}
	is_checking = 0;
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <readAccelerometer+0x8c>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20000330 	.word	0x20000330
 8004fe8:	20000296 	.word	0x20000296
 8004fec:	2000011c 	.word	0x2000011c
 8004ff0:	20000120 	.word	0x20000120
 8004ff4:	2000012c 	.word	0x2000012c
 8004ff8:	080060e8 	.word	0x080060e8
 8004ffc:	200001f4 	.word	0x200001f4
 8005000:	20000214 	.word	0x20000214

08005004 <isMovementDetected>:

int isMovementDetected() {
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
	int16_t accelerationx_f = (accelerationx[0] + accelerationx[1]) / 2;
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <isMovementDetected+0x54>)
 800500c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005010:	461a      	mov	r2, r3
 8005012:	4b11      	ldr	r3, [pc, #68]	; (8005058 <isMovementDetected+0x54>)
 8005014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005018:	4413      	add	r3, r2
 800501a:	0fda      	lsrs	r2, r3, #31
 800501c:	4413      	add	r3, r2
 800501e:	105b      	asrs	r3, r3, #1
 8005020:	80fb      	strh	r3, [r7, #6]
	if (abs(accelerationx_f) > 100) {
 8005022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005026:	2b00      	cmp	r3, #0
 8005028:	bfb8      	it	lt
 800502a:	425b      	neglt	r3, r3
 800502c:	2b64      	cmp	r3, #100	; 0x64
 800502e:	dd0e      	ble.n	800504e <isMovementDetected+0x4a>
		sprintf(accelerometerStr, "Acceleration %d\n", accelerationx_f);
 8005030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005034:	461a      	mov	r2, r3
 8005036:	4909      	ldr	r1, [pc, #36]	; (800505c <isMovementDetected+0x58>)
 8005038:	4809      	ldr	r0, [pc, #36]	; (8005060 <isMovementDetected+0x5c>)
 800503a:	f000 fc35 	bl	80058a8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 800503e:	2364      	movs	r3, #100	; 0x64
 8005040:	221e      	movs	r2, #30
 8005042:	4907      	ldr	r1, [pc, #28]	; (8005060 <isMovementDetected+0x5c>)
 8005044:	4807      	ldr	r0, [pc, #28]	; (8005064 <isMovementDetected+0x60>)
 8005046:	f7fe fc65 	bl	8003914 <HAL_UART_Transmit>
		return 1;
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <isMovementDetected+0x4c>
	}

	return 0;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	2000011c 	.word	0x2000011c
 800505c:	08006100 	.word	0x08006100
 8005060:	200001f4 	.word	0x200001f4
 8005064:	20000214 	.word	0x20000214

08005068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800506c:	bf00      	nop
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	; 0x28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005080:	4b27      	ldr	r3, [pc, #156]	; (8005120 <I2Cx_MspInit+0xa8>)
 8005082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005084:	4a26      	ldr	r2, [pc, #152]	; (8005120 <I2Cx_MspInit+0xa8>)
 8005086:	f043 0302 	orr.w	r3, r3, #2
 800508a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800508c:	4b24      	ldr	r3, [pc, #144]	; (8005120 <I2Cx_MspInit+0xa8>)
 800508e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8005098:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800509c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800509e:	2312      	movs	r3, #18
 80050a0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80050a2:	2301      	movs	r3, #1
 80050a4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050a6:	2303      	movs	r3, #3
 80050a8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80050aa:	2304      	movs	r3, #4
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80050ae:	f107 0314 	add.w	r3, r7, #20
 80050b2:	4619      	mov	r1, r3
 80050b4:	481b      	ldr	r0, [pc, #108]	; (8005124 <I2Cx_MspInit+0xac>)
 80050b6:	f7fb fc03 	bl	80008c0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80050ba:	f107 0314 	add.w	r3, r7, #20
 80050be:	4619      	mov	r1, r3
 80050c0:	4818      	ldr	r0, [pc, #96]	; (8005124 <I2Cx_MspInit+0xac>)
 80050c2:	f7fb fbfd 	bl	80008c0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80050c6:	4b16      	ldr	r3, [pc, #88]	; (8005120 <I2Cx_MspInit+0xa8>)
 80050c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ca:	4a15      	ldr	r2, [pc, #84]	; (8005120 <I2Cx_MspInit+0xa8>)
 80050cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050d0:	6593      	str	r3, [r2, #88]	; 0x58
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <I2Cx_MspInit+0xa8>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <I2Cx_MspInit+0xa8>)
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	4a0f      	ldr	r2, [pc, #60]	; (8005120 <I2Cx_MspInit+0xa8>)
 80050e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050e8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <I2Cx_MspInit+0xa8>)
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	4a0c      	ldr	r2, [pc, #48]	; (8005120 <I2Cx_MspInit+0xa8>)
 80050f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80050f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80050f6:	2200      	movs	r2, #0
 80050f8:	210f      	movs	r1, #15
 80050fa:	2021      	movs	r0, #33	; 0x21
 80050fc:	f7fb fba9 	bl	8000852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8005100:	2021      	movs	r0, #33	; 0x21
 8005102:	f7fb fbc2 	bl	800088a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8005106:	2200      	movs	r2, #0
 8005108:	210f      	movs	r1, #15
 800510a:	2022      	movs	r0, #34	; 0x22
 800510c:	f7fb fba1 	bl	8000852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8005110:	2022      	movs	r0, #34	; 0x22
 8005112:	f7fb fbba 	bl	800088a <HAL_NVIC_EnableIRQ>
}
 8005116:	bf00      	nop
 8005118:	3728      	adds	r7, #40	; 0x28
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40021000 	.word	0x40021000
 8005124:	48000400 	.word	0x48000400

08005128 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a12      	ldr	r2, [pc, #72]	; (800517c <I2Cx_Init+0x54>)
 8005134:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a11      	ldr	r2, [pc, #68]	; (8005180 <I2Cx_Init+0x58>)
 800513a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ff89 	bl	8005078 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fb fe46 	bl	8000df8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800516c:	2100      	movs	r1, #0
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fc fb4a 	bl	8001808 <HAL_I2CEx_ConfigAnalogFilter>
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40005800 	.word	0x40005800
 8005180:	00702681 	.word	0x00702681

08005184 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af04      	add	r7, sp, #16
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	4608      	mov	r0, r1
 800518e:	4611      	mov	r1, r2
 8005190:	461a      	mov	r2, r3
 8005192:	4603      	mov	r3, r0
 8005194:	72fb      	strb	r3, [r7, #11]
 8005196:	460b      	mov	r3, r1
 8005198:	813b      	strh	r3, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80051a2:	7afb      	ldrb	r3, [r7, #11]
 80051a4:	b299      	uxth	r1, r3
 80051a6:	88f8      	ldrh	r0, [r7, #6]
 80051a8:	893a      	ldrh	r2, [r7, #8]
 80051aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051ae:	9302      	str	r3, [sp, #8]
 80051b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	4603      	mov	r3, r0
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7fb ffee 	bl	800119c <HAL_I2C_Mem_Read>
 80051c0:	4603      	mov	r3, r0
 80051c2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80051c4:	7dfb      	ldrb	r3, [r7, #23]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80051ca:	7afb      	ldrb	r3, [r7, #11]
 80051cc:	4619      	mov	r1, r3
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f832 	bl	8005238 <I2Cx_Error>
  }
  return status;
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b08a      	sub	sp, #40	; 0x28
 80051e2:	af04      	add	r7, sp, #16
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	4608      	mov	r0, r1
 80051e8:	4611      	mov	r1, r2
 80051ea:	461a      	mov	r2, r3
 80051ec:	4603      	mov	r3, r0
 80051ee:	72fb      	strb	r3, [r7, #11]
 80051f0:	460b      	mov	r3, r1
 80051f2:	813b      	strh	r3, [r7, #8]
 80051f4:	4613      	mov	r3, r2
 80051f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80051fc:	7afb      	ldrb	r3, [r7, #11]
 80051fe:	b299      	uxth	r1, r3
 8005200:	88f8      	ldrh	r0, [r7, #6]
 8005202:	893a      	ldrh	r2, [r7, #8]
 8005204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005208:	9302      	str	r3, [sp, #8]
 800520a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4603      	mov	r3, r0
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7fb fead 	bl	8000f74 <HAL_I2C_Mem_Write>
 800521a:	4603      	mov	r3, r0
 800521c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005224:	7afb      	ldrb	r3, [r7, #11]
 8005226:	4619      	mov	r1, r3
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f805 	bl	8005238 <I2Cx_Error>
  }
  return status;
 800522e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fb fe66 	bl	8000f16 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff ff6c 	bl	8005128 <I2Cx_Init>
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800525c:	4802      	ldr	r0, [pc, #8]	; (8005268 <SENSOR_IO_Init+0x10>)
 800525e:	f7ff ff63 	bl	8005128 <I2Cx_Init>
}
 8005262:	bf00      	nop
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	200003c8 	.word	0x200003c8

0800526c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af02      	add	r7, sp, #8
 8005272:	4603      	mov	r3, r0
 8005274:	71fb      	strb	r3, [r7, #7]
 8005276:	460b      	mov	r3, r1
 8005278:	71bb      	strb	r3, [r7, #6]
 800527a:	4613      	mov	r3, r2
 800527c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800527e:	79bb      	ldrb	r3, [r7, #6]
 8005280:	b29a      	uxth	r2, r3
 8005282:	79f9      	ldrb	r1, [r7, #7]
 8005284:	2301      	movs	r3, #1
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	1d7b      	adds	r3, r7, #5
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	2301      	movs	r3, #1
 800528e:	4803      	ldr	r0, [pc, #12]	; (800529c <SENSOR_IO_Write+0x30>)
 8005290:	f7ff ffa5 	bl	80051de <I2Cx_WriteMultiple>
}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	200003c8 	.word	0x200003c8

080052a0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	4603      	mov	r3, r0
 80052a8:	460a      	mov	r2, r1
 80052aa:	71fb      	strb	r3, [r7, #7]
 80052ac:	4613      	mov	r3, r2
 80052ae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80052b4:	79bb      	ldrb	r3, [r7, #6]
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	79f9      	ldrb	r1, [r7, #7]
 80052ba:	2301      	movs	r3, #1
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	f107 030f 	add.w	r3, r7, #15
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	2301      	movs	r3, #1
 80052c6:	4804      	ldr	r0, [pc, #16]	; (80052d8 <SENSOR_IO_Read+0x38>)
 80052c8:	f7ff ff5c 	bl	8005184 <I2Cx_ReadMultiple>

  return read_value;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	200003c8 	.word	0x200003c8

080052dc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	603a      	str	r2, [r7, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	4603      	mov	r3, r0
 80052e8:	71fb      	strb	r3, [r7, #7]
 80052ea:	460b      	mov	r3, r1
 80052ec:	71bb      	strb	r3, [r7, #6]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80052f2:	79bb      	ldrb	r3, [r7, #6]
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	79f9      	ldrb	r1, [r7, #7]
 80052f8:	88bb      	ldrh	r3, [r7, #4]
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2301      	movs	r3, #1
 8005302:	4804      	ldr	r0, [pc, #16]	; (8005314 <SENSOR_IO_ReadMultiple+0x38>)
 8005304:	f7ff ff3e 	bl	8005184 <I2Cx_ReadMultiple>
 8005308:	4603      	mov	r3, r0
 800530a:	b29b      	uxth	r3, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	200003c8 	.word	0x200003c8

08005318 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8005322:	2300      	movs	r3, #0
 8005324:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8005326:	4b19      	ldr	r3, [pc, #100]	; (800538c <BSP_ACCELERO_Init+0x74>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4798      	blx	r3
 800532c:	4603      	mov	r3, r0
 800532e:	2b6a      	cmp	r3, #106	; 0x6a
 8005330:	d002      	beq.n	8005338 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
 8005336:	e024      	b.n	8005382 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8005338:	4b15      	ldr	r3, [pc, #84]	; (8005390 <BSP_ACCELERO_Init+0x78>)
 800533a:	4a14      	ldr	r2, [pc, #80]	; (800538c <BSP_ACCELERO_Init+0x74>)
 800533c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800533e:	2330      	movs	r3, #48	; 0x30
 8005340:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8005346:	2300      	movs	r3, #0
 8005348:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800534a:	2340      	movs	r3, #64	; 0x40
 800534c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8005356:	797a      	ldrb	r2, [r7, #5]
 8005358:	7abb      	ldrb	r3, [r7, #10]
 800535a:	4313      	orrs	r3, r2
 800535c:	b2db      	uxtb	r3, r3
 800535e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8005360:	7a3b      	ldrb	r3, [r7, #8]
 8005362:	f043 0304 	orr.w	r3, r3, #4
 8005366:	b2db      	uxtb	r3, r3
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	b21a      	sxth	r2, r3
 800536c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	b21b      	sxth	r3, r3
 8005374:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <BSP_ACCELERO_Init+0x78>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	89ba      	ldrh	r2, [r7, #12]
 800537e:	4610      	mov	r0, r2
 8005380:	4798      	blx	r3
  }  

  return ret;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000024 	.word	0x20000024
 8005390:	20000130 	.word	0x20000130

08005394 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800539c:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d009      	beq.n	80053b8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d004      	beq.n	80053b8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
    }
  }
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000130 	.word	0x20000130

080053c4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80053ce:	2300      	movs	r3, #0
 80053d0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80053d2:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <BSP_GYRO_Init+0x7c>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	4798      	blx	r3
 80053d8:	4603      	mov	r3, r0
 80053da:	2b6a      	cmp	r3, #106	; 0x6a
 80053dc:	d002      	beq.n	80053e4 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
 80053e2:	e028      	b.n	8005436 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80053e4:	4b17      	ldr	r3, [pc, #92]	; (8005444 <BSP_GYRO_Init+0x80>)
 80053e6:	4a16      	ldr	r2, [pc, #88]	; (8005440 <BSP_GYRO_Init+0x7c>)
 80053e8:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80053ee:	2330      	movs	r3, #48	; 0x30
 80053f0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80053fa:	2340      	movs	r3, #64	; 0x40
 80053fc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80053fe:	2300      	movs	r3, #0
 8005400:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8005402:	230c      	movs	r3, #12
 8005404:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8005406:	7aba      	ldrb	r2, [r7, #10]
 8005408:	797b      	ldrb	r3, [r7, #5]
 800540a:	4313      	orrs	r3, r2
 800540c:	b2db      	uxtb	r3, r3
 800540e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8005410:	7a3b      	ldrb	r3, [r7, #8]
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	b2db      	uxtb	r3, r3
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	b21a      	sxth	r2, r3
 800541c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	b21b      	sxth	r3, r3
 8005424:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8005426:	4b07      	ldr	r3, [pc, #28]	; (8005444 <BSP_GYRO_Init+0x80>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	89ba      	ldrh	r2, [r7, #12]
 800542e:	4610      	mov	r0, r2
 8005430:	4798      	blx	r3
    
    ret = GYRO_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20000058 	.word	0x20000058
 8005444:	20000134 	.word	0x20000134

08005448 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <BSP_HSENSOR_Init+0x38>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	20be      	movs	r0, #190	; 0xbe
 8005454:	4798      	blx	r3
 8005456:	4603      	mov	r3, r0
 8005458:	2bbc      	cmp	r3, #188	; 0xbc
 800545a:	d002      	beq.n	8005462 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	e009      	b.n	8005476 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8005462:	4b08      	ldr	r3, [pc, #32]	; (8005484 <BSP_HSENSOR_Init+0x3c>)
 8005464:	4a06      	ldr	r2, [pc, #24]	; (8005480 <BSP_HSENSOR_Init+0x38>)
 8005466:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <BSP_HSENSOR_Init+0x3c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	20be      	movs	r0, #190	; 0xbe
 8005470:	4798      	blx	r3
    ret = HSENSOR_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8005476:	687b      	ldr	r3, [r7, #4]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20000008 	.word	0x20000008
 8005484:	20000138 	.word	0x20000138

08005488 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <BSP_TSENSOR_Init+0x30>)
 8005494:	4a09      	ldr	r2, [pc, #36]	; (80054bc <BSP_TSENSOR_Init+0x34>)
 8005496:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8005498:	f7ff fede 	bl	8005258 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <BSP_TSENSOR_Init+0x30>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2100      	movs	r1, #0
 80054a4:	20be      	movs	r0, #190	; 0xbe
 80054a6:	4798      	blx	r3

  ret = TSENSOR_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80054ac:	79fb      	ldrb	r3, [r7, #7]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	2000013c 	.word	0x2000013c
 80054bc:	20000014 	.word	0x20000014

080054c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054c6:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <HAL_MspInit+0x44>)
 80054c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ca:	4a0e      	ldr	r2, [pc, #56]	; (8005504 <HAL_MspInit+0x44>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	6613      	str	r3, [r2, #96]	; 0x60
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <HAL_MspInit+0x44>)
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054de:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_MspInit+0x44>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <HAL_MspInit+0x44>)
 80054e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e8:	6593      	str	r3, [r2, #88]	; 0x58
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_MspInit+0x44>)
 80054ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000

08005508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	605a      	str	r2, [r3, #4]
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	60da      	str	r2, [r3, #12]
 800551e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a17      	ldr	r2, [pc, #92]	; (8005584 <HAL_I2C_MspInit+0x7c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d128      	bne.n	800557c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800552a:	4b17      	ldr	r3, [pc, #92]	; (8005588 <HAL_I2C_MspInit+0x80>)
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	4a16      	ldr	r2, [pc, #88]	; (8005588 <HAL_I2C_MspInit+0x80>)
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <HAL_I2C_MspInit+0x80>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005542:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005548:	2312      	movs	r3, #18
 800554a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800554c:	2301      	movs	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005550:	2303      	movs	r3, #3
 8005552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005554:	2304      	movs	r3, #4
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005558:	f107 0314 	add.w	r3, r7, #20
 800555c:	4619      	mov	r1, r3
 800555e:	480b      	ldr	r0, [pc, #44]	; (800558c <HAL_I2C_MspInit+0x84>)
 8005560:	f7fb f9ae 	bl	80008c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005564:	4b08      	ldr	r3, [pc, #32]	; (8005588 <HAL_I2C_MspInit+0x80>)
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	4a07      	ldr	r2, [pc, #28]	; (8005588 <HAL_I2C_MspInit+0x80>)
 800556a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800556e:	6593      	str	r3, [r2, #88]	; 0x58
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_I2C_MspInit+0x80>)
 8005572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800557c:	bf00      	nop
 800557e:	3728      	adds	r7, #40	; 0x28
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40005400 	.word	0x40005400
 8005588:	40021000 	.word	0x40021000
 800558c:	48000400 	.word	0x48000400

08005590 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a0b      	ldr	r2, [pc, #44]	; (80055cc <HAL_I2C_MspDeInit+0x3c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10f      	bne.n	80055c2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80055a2:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_I2C_MspDeInit+0x40>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <HAL_I2C_MspDeInit+0x40>)
 80055a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ac:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80055ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055b2:	4808      	ldr	r0, [pc, #32]	; (80055d4 <HAL_I2C_MspDeInit+0x44>)
 80055b4:	f7fb fb2c 	bl	8000c10 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80055b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055bc:	4805      	ldr	r0, [pc, #20]	; (80055d4 <HAL_I2C_MspDeInit+0x44>)
 80055be:	f7fb fb27 	bl	8000c10 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40005400 	.word	0x40005400
 80055d0:	40021000 	.word	0x40021000
 80055d4:	48000400 	.word	0x48000400

080055d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d113      	bne.n	8005612 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <HAL_TIM_Base_MspInit+0x44>)
 80055ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ee:	4a0b      	ldr	r2, [pc, #44]	; (800561c <HAL_TIM_Base_MspInit+0x44>)
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	6593      	str	r3, [r2, #88]	; 0x58
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_TIM_Base_MspInit+0x44>)
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005602:	2200      	movs	r2, #0
 8005604:	2100      	movs	r1, #0
 8005606:	201c      	movs	r0, #28
 8005608:	f7fb f923 	bl	8000852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800560c:	201c      	movs	r0, #28
 800560e:	f7fb f93c 	bl	800088a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000

08005620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08a      	sub	sp, #40	; 0x28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005628:	f107 0314 	add.w	r3, r7, #20
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	609a      	str	r2, [r3, #8]
 8005634:	60da      	str	r2, [r3, #12]
 8005636:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a17      	ldr	r2, [pc, #92]	; (800569c <HAL_UART_MspInit+0x7c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d127      	bne.n	8005692 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005642:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <HAL_UART_MspInit+0x80>)
 8005644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005646:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <HAL_UART_MspInit+0x80>)
 8005648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800564c:	6613      	str	r3, [r2, #96]	; 0x60
 800564e:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <HAL_UART_MspInit+0x80>)
 8005650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800565a:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_UART_MspInit+0x80>)
 800565c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565e:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_UART_MspInit+0x80>)
 8005660:	f043 0302 	orr.w	r3, r3, #2
 8005664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005666:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_UART_MspInit+0x80>)
 8005668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005672:	23c0      	movs	r3, #192	; 0xc0
 8005674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005676:	2302      	movs	r3, #2
 8005678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800567e:	2303      	movs	r3, #3
 8005680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005682:	2307      	movs	r3, #7
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005686:	f107 0314 	add.w	r3, r7, #20
 800568a:	4619      	mov	r1, r3
 800568c:	4805      	ldr	r0, [pc, #20]	; (80056a4 <HAL_UART_MspInit+0x84>)
 800568e:	f7fb f917 	bl	80008c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005692:	bf00      	nop
 8005694:	3728      	adds	r7, #40	; 0x28
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40013800 	.word	0x40013800
 80056a0:	40021000 	.word	0x40021000
 80056a4:	48000400 	.word	0x48000400

080056a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80056ac:	bf00      	nop
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056b6:	b480      	push	{r7}
 80056b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056ba:	e7fe      	b.n	80056ba <HardFault_Handler+0x4>

080056bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056c0:	e7fe      	b.n	80056c0 <MemManage_Handler+0x4>

080056c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056c2:	b480      	push	{r7}
 80056c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056c6:	e7fe      	b.n	80056c6 <BusFault_Handler+0x4>

080056c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056cc:	e7fe      	b.n	80056cc <UsageFault_Handler+0x4>

080056ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056ce:	b480      	push	{r7}
 80056d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056d2:	bf00      	nop
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056e0:	bf00      	nop
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056ea:	b480      	push	{r7}
 80056ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056ee:	bf00      	nop
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056fc:	f7fa ff8c 	bl	8000618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005700:	bf00      	nop
 8005702:	bd80      	pop	{r7, pc}

08005704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005708:	4802      	ldr	r0, [pc, #8]	; (8005714 <TIM2_IRQHandler+0x10>)
 800570a:	f7fd fcdb 	bl	80030c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	200002bc 	.word	0x200002bc

08005718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005720:	4a14      	ldr	r2, [pc, #80]	; (8005774 <_sbrk+0x5c>)
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <_sbrk+0x60>)
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800572c:	4b13      	ldr	r3, [pc, #76]	; (800577c <_sbrk+0x64>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005734:	4b11      	ldr	r3, [pc, #68]	; (800577c <_sbrk+0x64>)
 8005736:	4a12      	ldr	r2, [pc, #72]	; (8005780 <_sbrk+0x68>)
 8005738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800573a:	4b10      	ldr	r3, [pc, #64]	; (800577c <_sbrk+0x64>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4413      	add	r3, r2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	429a      	cmp	r2, r3
 8005746:	d207      	bcs.n	8005758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005748:	f000 f87c 	bl	8005844 <__errno>
 800574c:	4602      	mov	r2, r0
 800574e:	230c      	movs	r3, #12
 8005750:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005756:	e009      	b.n	800576c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005758:	4b08      	ldr	r3, [pc, #32]	; (800577c <_sbrk+0x64>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800575e:	4b07      	ldr	r3, [pc, #28]	; (800577c <_sbrk+0x64>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	4a05      	ldr	r2, [pc, #20]	; (800577c <_sbrk+0x64>)
 8005768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800576a:	68fb      	ldr	r3, [r7, #12]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20018000 	.word	0x20018000
 8005778:	00000400 	.word	0x00000400
 800577c:	20000140 	.word	0x20000140
 8005780:	20000418 	.word	0x20000418

08005784 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005788:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <SystemInit+0x64>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <SystemInit+0x64>)
 8005790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005798:	4b14      	ldr	r3, [pc, #80]	; (80057ec <SystemInit+0x68>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a13      	ldr	r2, [pc, #76]	; (80057ec <SystemInit+0x68>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80057a4:	4b11      	ldr	r3, [pc, #68]	; (80057ec <SystemInit+0x68>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80057aa:	4b10      	ldr	r3, [pc, #64]	; (80057ec <SystemInit+0x68>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a0f      	ldr	r2, [pc, #60]	; (80057ec <SystemInit+0x68>)
 80057b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80057b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80057b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80057ba:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <SystemInit+0x68>)
 80057bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <SystemInit+0x68>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a09      	ldr	r2, [pc, #36]	; (80057ec <SystemInit+0x68>)
 80057c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <SystemInit+0x68>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <SystemInit+0x64>)
 80057d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057da:	609a      	str	r2, [r3, #8]
#endif
}
 80057dc:	bf00      	nop
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	e000ed00 	.word	0xe000ed00
 80057ec:	40021000 	.word	0x40021000

080057f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80057f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005828 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80057f4:	f7ff ffc6 	bl	8005784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80057f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80057fa:	e003      	b.n	8005804 <LoopCopyDataInit>

080057fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80057fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005800:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005802:	3104      	adds	r1, #4

08005804 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005804:	480a      	ldr	r0, [pc, #40]	; (8005830 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005808:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800580a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800580c:	d3f6      	bcc.n	80057fc <CopyDataInit>
	ldr	r2, =_sbss
 800580e:	4a0a      	ldr	r2, [pc, #40]	; (8005838 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005810:	e002      	b.n	8005818 <LoopFillZerobss>

08005812 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005812:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005814:	f842 3b04 	str.w	r3, [r2], #4

08005818 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005818:	4b08      	ldr	r3, [pc, #32]	; (800583c <LoopForever+0x16>)
	cmp	r2, r3
 800581a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800581c:	d3f9      	bcc.n	8005812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800581e:	f000 f817 	bl	8005850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005822:	f7ff f8b9 	bl	8004998 <main>

08005826 <LoopForever>:

LoopForever:
    b LoopForever
 8005826:	e7fe      	b.n	8005826 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005828:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800582c:	080061a0 	.word	0x080061a0
	ldr	r0, =_sdata
 8005830:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005834:	200000f8 	.word	0x200000f8
	ldr	r2, =_sbss
 8005838:	200000f8 	.word	0x200000f8
	ldr	r3, = _ebss
 800583c:	20000418 	.word	0x20000418

08005840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005840:	e7fe      	b.n	8005840 <ADC1_2_IRQHandler>
	...

08005844 <__errno>:
 8005844:	4b01      	ldr	r3, [pc, #4]	; (800584c <__errno+0x8>)
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000094 	.word	0x20000094

08005850 <__libc_init_array>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	4e0d      	ldr	r6, [pc, #52]	; (8005888 <__libc_init_array+0x38>)
 8005854:	4c0d      	ldr	r4, [pc, #52]	; (800588c <__libc_init_array+0x3c>)
 8005856:	1ba4      	subs	r4, r4, r6
 8005858:	10a4      	asrs	r4, r4, #2
 800585a:	2500      	movs	r5, #0
 800585c:	42a5      	cmp	r5, r4
 800585e:	d109      	bne.n	8005874 <__libc_init_array+0x24>
 8005860:	4e0b      	ldr	r6, [pc, #44]	; (8005890 <__libc_init_array+0x40>)
 8005862:	4c0c      	ldr	r4, [pc, #48]	; (8005894 <__libc_init_array+0x44>)
 8005864:	f000 fc26 	bl	80060b4 <_init>
 8005868:	1ba4      	subs	r4, r4, r6
 800586a:	10a4      	asrs	r4, r4, #2
 800586c:	2500      	movs	r5, #0
 800586e:	42a5      	cmp	r5, r4
 8005870:	d105      	bne.n	800587e <__libc_init_array+0x2e>
 8005872:	bd70      	pop	{r4, r5, r6, pc}
 8005874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005878:	4798      	blx	r3
 800587a:	3501      	adds	r5, #1
 800587c:	e7ee      	b.n	800585c <__libc_init_array+0xc>
 800587e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005882:	4798      	blx	r3
 8005884:	3501      	adds	r5, #1
 8005886:	e7f2      	b.n	800586e <__libc_init_array+0x1e>
 8005888:	08006198 	.word	0x08006198
 800588c:	08006198 	.word	0x08006198
 8005890:	08006198 	.word	0x08006198
 8005894:	0800619c 	.word	0x0800619c

08005898 <memset>:
 8005898:	4402      	add	r2, r0
 800589a:	4603      	mov	r3, r0
 800589c:	4293      	cmp	r3, r2
 800589e:	d100      	bne.n	80058a2 <memset+0xa>
 80058a0:	4770      	bx	lr
 80058a2:	f803 1b01 	strb.w	r1, [r3], #1
 80058a6:	e7f9      	b.n	800589c <memset+0x4>

080058a8 <siprintf>:
 80058a8:	b40e      	push	{r1, r2, r3}
 80058aa:	b500      	push	{lr}
 80058ac:	b09c      	sub	sp, #112	; 0x70
 80058ae:	ab1d      	add	r3, sp, #116	; 0x74
 80058b0:	9002      	str	r0, [sp, #8]
 80058b2:	9006      	str	r0, [sp, #24]
 80058b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058b8:	4809      	ldr	r0, [pc, #36]	; (80058e0 <siprintf+0x38>)
 80058ba:	9107      	str	r1, [sp, #28]
 80058bc:	9104      	str	r1, [sp, #16]
 80058be:	4909      	ldr	r1, [pc, #36]	; (80058e4 <siprintf+0x3c>)
 80058c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c4:	9105      	str	r1, [sp, #20]
 80058c6:	6800      	ldr	r0, [r0, #0]
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	a902      	add	r1, sp, #8
 80058cc:	f000 f866 	bl	800599c <_svfiprintf_r>
 80058d0:	9b02      	ldr	r3, [sp, #8]
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	b01c      	add	sp, #112	; 0x70
 80058d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058dc:	b003      	add	sp, #12
 80058de:	4770      	bx	lr
 80058e0:	20000094 	.word	0x20000094
 80058e4:	ffff0208 	.word	0xffff0208

080058e8 <__ssputs_r>:
 80058e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ec:	688e      	ldr	r6, [r1, #8]
 80058ee:	429e      	cmp	r6, r3
 80058f0:	4682      	mov	sl, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4690      	mov	r8, r2
 80058f6:	4699      	mov	r9, r3
 80058f8:	d837      	bhi.n	800596a <__ssputs_r+0x82>
 80058fa:	898a      	ldrh	r2, [r1, #12]
 80058fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005900:	d031      	beq.n	8005966 <__ssputs_r+0x7e>
 8005902:	6825      	ldr	r5, [r4, #0]
 8005904:	6909      	ldr	r1, [r1, #16]
 8005906:	1a6f      	subs	r7, r5, r1
 8005908:	6965      	ldr	r5, [r4, #20]
 800590a:	2302      	movs	r3, #2
 800590c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005910:	fb95 f5f3 	sdiv	r5, r5, r3
 8005914:	f109 0301 	add.w	r3, r9, #1
 8005918:	443b      	add	r3, r7
 800591a:	429d      	cmp	r5, r3
 800591c:	bf38      	it	cc
 800591e:	461d      	movcc	r5, r3
 8005920:	0553      	lsls	r3, r2, #21
 8005922:	d530      	bpl.n	8005986 <__ssputs_r+0x9e>
 8005924:	4629      	mov	r1, r5
 8005926:	f000 fb2b 	bl	8005f80 <_malloc_r>
 800592a:	4606      	mov	r6, r0
 800592c:	b950      	cbnz	r0, 8005944 <__ssputs_r+0x5c>
 800592e:	230c      	movs	r3, #12
 8005930:	f8ca 3000 	str.w	r3, [sl]
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005944:	463a      	mov	r2, r7
 8005946:	6921      	ldr	r1, [r4, #16]
 8005948:	f000 faa8 	bl	8005e9c <memcpy>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	6126      	str	r6, [r4, #16]
 800595a:	6165      	str	r5, [r4, #20]
 800595c:	443e      	add	r6, r7
 800595e:	1bed      	subs	r5, r5, r7
 8005960:	6026      	str	r6, [r4, #0]
 8005962:	60a5      	str	r5, [r4, #8]
 8005964:	464e      	mov	r6, r9
 8005966:	454e      	cmp	r6, r9
 8005968:	d900      	bls.n	800596c <__ssputs_r+0x84>
 800596a:	464e      	mov	r6, r9
 800596c:	4632      	mov	r2, r6
 800596e:	4641      	mov	r1, r8
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	f000 fa9e 	bl	8005eb2 <memmove>
 8005976:	68a3      	ldr	r3, [r4, #8]
 8005978:	1b9b      	subs	r3, r3, r6
 800597a:	60a3      	str	r3, [r4, #8]
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	441e      	add	r6, r3
 8005980:	6026      	str	r6, [r4, #0]
 8005982:	2000      	movs	r0, #0
 8005984:	e7dc      	b.n	8005940 <__ssputs_r+0x58>
 8005986:	462a      	mov	r2, r5
 8005988:	f000 fb54 	bl	8006034 <_realloc_r>
 800598c:	4606      	mov	r6, r0
 800598e:	2800      	cmp	r0, #0
 8005990:	d1e2      	bne.n	8005958 <__ssputs_r+0x70>
 8005992:	6921      	ldr	r1, [r4, #16]
 8005994:	4650      	mov	r0, sl
 8005996:	f000 faa5 	bl	8005ee4 <_free_r>
 800599a:	e7c8      	b.n	800592e <__ssputs_r+0x46>

0800599c <_svfiprintf_r>:
 800599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a0:	461d      	mov	r5, r3
 80059a2:	898b      	ldrh	r3, [r1, #12]
 80059a4:	061f      	lsls	r7, r3, #24
 80059a6:	b09d      	sub	sp, #116	; 0x74
 80059a8:	4680      	mov	r8, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	4616      	mov	r6, r2
 80059ae:	d50f      	bpl.n	80059d0 <_svfiprintf_r+0x34>
 80059b0:	690b      	ldr	r3, [r1, #16]
 80059b2:	b96b      	cbnz	r3, 80059d0 <_svfiprintf_r+0x34>
 80059b4:	2140      	movs	r1, #64	; 0x40
 80059b6:	f000 fae3 	bl	8005f80 <_malloc_r>
 80059ba:	6020      	str	r0, [r4, #0]
 80059bc:	6120      	str	r0, [r4, #16]
 80059be:	b928      	cbnz	r0, 80059cc <_svfiprintf_r+0x30>
 80059c0:	230c      	movs	r3, #12
 80059c2:	f8c8 3000 	str.w	r3, [r8]
 80059c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ca:	e0c8      	b.n	8005b5e <_svfiprintf_r+0x1c2>
 80059cc:	2340      	movs	r3, #64	; 0x40
 80059ce:	6163      	str	r3, [r4, #20]
 80059d0:	2300      	movs	r3, #0
 80059d2:	9309      	str	r3, [sp, #36]	; 0x24
 80059d4:	2320      	movs	r3, #32
 80059d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059da:	2330      	movs	r3, #48	; 0x30
 80059dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059e0:	9503      	str	r5, [sp, #12]
 80059e2:	f04f 0b01 	mov.w	fp, #1
 80059e6:	4637      	mov	r7, r6
 80059e8:	463d      	mov	r5, r7
 80059ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059ee:	b10b      	cbz	r3, 80059f4 <_svfiprintf_r+0x58>
 80059f0:	2b25      	cmp	r3, #37	; 0x25
 80059f2:	d13e      	bne.n	8005a72 <_svfiprintf_r+0xd6>
 80059f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80059f8:	d00b      	beq.n	8005a12 <_svfiprintf_r+0x76>
 80059fa:	4653      	mov	r3, sl
 80059fc:	4632      	mov	r2, r6
 80059fe:	4621      	mov	r1, r4
 8005a00:	4640      	mov	r0, r8
 8005a02:	f7ff ff71 	bl	80058e8 <__ssputs_r>
 8005a06:	3001      	adds	r0, #1
 8005a08:	f000 80a4 	beq.w	8005b54 <_svfiprintf_r+0x1b8>
 8005a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0e:	4453      	add	r3, sl
 8005a10:	9309      	str	r3, [sp, #36]	; 0x24
 8005a12:	783b      	ldrb	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 809d 	beq.w	8005b54 <_svfiprintf_r+0x1b8>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	9307      	str	r3, [sp, #28]
 8005a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a2e:	462f      	mov	r7, r5
 8005a30:	2205      	movs	r2, #5
 8005a32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a36:	4850      	ldr	r0, [pc, #320]	; (8005b78 <_svfiprintf_r+0x1dc>)
 8005a38:	f7fa fbca 	bl	80001d0 <memchr>
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	b9d0      	cbnz	r0, 8005a76 <_svfiprintf_r+0xda>
 8005a40:	06d9      	lsls	r1, r3, #27
 8005a42:	bf44      	itt	mi
 8005a44:	2220      	movmi	r2, #32
 8005a46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a4a:	071a      	lsls	r2, r3, #28
 8005a4c:	bf44      	itt	mi
 8005a4e:	222b      	movmi	r2, #43	; 0x2b
 8005a50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a54:	782a      	ldrb	r2, [r5, #0]
 8005a56:	2a2a      	cmp	r2, #42	; 0x2a
 8005a58:	d015      	beq.n	8005a86 <_svfiprintf_r+0xea>
 8005a5a:	9a07      	ldr	r2, [sp, #28]
 8005a5c:	462f      	mov	r7, r5
 8005a5e:	2000      	movs	r0, #0
 8005a60:	250a      	movs	r5, #10
 8005a62:	4639      	mov	r1, r7
 8005a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a68:	3b30      	subs	r3, #48	; 0x30
 8005a6a:	2b09      	cmp	r3, #9
 8005a6c:	d94d      	bls.n	8005b0a <_svfiprintf_r+0x16e>
 8005a6e:	b1b8      	cbz	r0, 8005aa0 <_svfiprintf_r+0x104>
 8005a70:	e00f      	b.n	8005a92 <_svfiprintf_r+0xf6>
 8005a72:	462f      	mov	r7, r5
 8005a74:	e7b8      	b.n	80059e8 <_svfiprintf_r+0x4c>
 8005a76:	4a40      	ldr	r2, [pc, #256]	; (8005b78 <_svfiprintf_r+0x1dc>)
 8005a78:	1a80      	subs	r0, r0, r2
 8005a7a:	fa0b f000 	lsl.w	r0, fp, r0
 8005a7e:	4318      	orrs	r0, r3
 8005a80:	9004      	str	r0, [sp, #16]
 8005a82:	463d      	mov	r5, r7
 8005a84:	e7d3      	b.n	8005a2e <_svfiprintf_r+0x92>
 8005a86:	9a03      	ldr	r2, [sp, #12]
 8005a88:	1d11      	adds	r1, r2, #4
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	9103      	str	r1, [sp, #12]
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	db01      	blt.n	8005a96 <_svfiprintf_r+0xfa>
 8005a92:	9207      	str	r2, [sp, #28]
 8005a94:	e004      	b.n	8005aa0 <_svfiprintf_r+0x104>
 8005a96:	4252      	negs	r2, r2
 8005a98:	f043 0302 	orr.w	r3, r3, #2
 8005a9c:	9207      	str	r2, [sp, #28]
 8005a9e:	9304      	str	r3, [sp, #16]
 8005aa0:	783b      	ldrb	r3, [r7, #0]
 8005aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa4:	d10c      	bne.n	8005ac0 <_svfiprintf_r+0x124>
 8005aa6:	787b      	ldrb	r3, [r7, #1]
 8005aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aaa:	d133      	bne.n	8005b14 <_svfiprintf_r+0x178>
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	1d1a      	adds	r2, r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	9203      	str	r2, [sp, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bfb8      	it	lt
 8005ab8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005abc:	3702      	adds	r7, #2
 8005abe:	9305      	str	r3, [sp, #20]
 8005ac0:	4d2e      	ldr	r5, [pc, #184]	; (8005b7c <_svfiprintf_r+0x1e0>)
 8005ac2:	7839      	ldrb	r1, [r7, #0]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f7fa fb82 	bl	80001d0 <memchr>
 8005acc:	b138      	cbz	r0, 8005ade <_svfiprintf_r+0x142>
 8005ace:	2340      	movs	r3, #64	; 0x40
 8005ad0:	1b40      	subs	r0, r0, r5
 8005ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ad6:	9b04      	ldr	r3, [sp, #16]
 8005ad8:	4303      	orrs	r3, r0
 8005ada:	3701      	adds	r7, #1
 8005adc:	9304      	str	r3, [sp, #16]
 8005ade:	7839      	ldrb	r1, [r7, #0]
 8005ae0:	4827      	ldr	r0, [pc, #156]	; (8005b80 <_svfiprintf_r+0x1e4>)
 8005ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ae6:	2206      	movs	r2, #6
 8005ae8:	1c7e      	adds	r6, r7, #1
 8005aea:	f7fa fb71 	bl	80001d0 <memchr>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d038      	beq.n	8005b64 <_svfiprintf_r+0x1c8>
 8005af2:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <_svfiprintf_r+0x1e8>)
 8005af4:	bb13      	cbnz	r3, 8005b3c <_svfiprintf_r+0x1a0>
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	3307      	adds	r3, #7
 8005afa:	f023 0307 	bic.w	r3, r3, #7
 8005afe:	3308      	adds	r3, #8
 8005b00:	9303      	str	r3, [sp, #12]
 8005b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b04:	444b      	add	r3, r9
 8005b06:	9309      	str	r3, [sp, #36]	; 0x24
 8005b08:	e76d      	b.n	80059e6 <_svfiprintf_r+0x4a>
 8005b0a:	fb05 3202 	mla	r2, r5, r2, r3
 8005b0e:	2001      	movs	r0, #1
 8005b10:	460f      	mov	r7, r1
 8005b12:	e7a6      	b.n	8005a62 <_svfiprintf_r+0xc6>
 8005b14:	2300      	movs	r3, #0
 8005b16:	3701      	adds	r7, #1
 8005b18:	9305      	str	r3, [sp, #20]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	250a      	movs	r5, #10
 8005b1e:	4638      	mov	r0, r7
 8005b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b24:	3a30      	subs	r2, #48	; 0x30
 8005b26:	2a09      	cmp	r2, #9
 8005b28:	d903      	bls.n	8005b32 <_svfiprintf_r+0x196>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0c8      	beq.n	8005ac0 <_svfiprintf_r+0x124>
 8005b2e:	9105      	str	r1, [sp, #20]
 8005b30:	e7c6      	b.n	8005ac0 <_svfiprintf_r+0x124>
 8005b32:	fb05 2101 	mla	r1, r5, r1, r2
 8005b36:	2301      	movs	r3, #1
 8005b38:	4607      	mov	r7, r0
 8005b3a:	e7f0      	b.n	8005b1e <_svfiprintf_r+0x182>
 8005b3c:	ab03      	add	r3, sp, #12
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	4622      	mov	r2, r4
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <_svfiprintf_r+0x1ec>)
 8005b44:	a904      	add	r1, sp, #16
 8005b46:	4640      	mov	r0, r8
 8005b48:	f3af 8000 	nop.w
 8005b4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b50:	4681      	mov	r9, r0
 8005b52:	d1d6      	bne.n	8005b02 <_svfiprintf_r+0x166>
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	065b      	lsls	r3, r3, #25
 8005b58:	f53f af35 	bmi.w	80059c6 <_svfiprintf_r+0x2a>
 8005b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b5e:	b01d      	add	sp, #116	; 0x74
 8005b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b64:	ab03      	add	r3, sp, #12
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <_svfiprintf_r+0x1ec>)
 8005b6c:	a904      	add	r1, sp, #16
 8005b6e:	4640      	mov	r0, r8
 8005b70:	f000 f882 	bl	8005c78 <_printf_i>
 8005b74:	e7ea      	b.n	8005b4c <_svfiprintf_r+0x1b0>
 8005b76:	bf00      	nop
 8005b78:	0800615c 	.word	0x0800615c
 8005b7c:	08006162 	.word	0x08006162
 8005b80:	08006166 	.word	0x08006166
 8005b84:	00000000 	.word	0x00000000
 8005b88:	080058e9 	.word	0x080058e9

08005b8c <_printf_common>:
 8005b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	4691      	mov	r9, r2
 8005b92:	461f      	mov	r7, r3
 8005b94:	688a      	ldr	r2, [r1, #8]
 8005b96:	690b      	ldr	r3, [r1, #16]
 8005b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	bfb8      	it	lt
 8005ba0:	4613      	movlt	r3, r2
 8005ba2:	f8c9 3000 	str.w	r3, [r9]
 8005ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005baa:	4606      	mov	r6, r0
 8005bac:	460c      	mov	r4, r1
 8005bae:	b112      	cbz	r2, 8005bb6 <_printf_common+0x2a>
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	f8c9 3000 	str.w	r3, [r9]
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	0699      	lsls	r1, r3, #26
 8005bba:	bf42      	ittt	mi
 8005bbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bc0:	3302      	addmi	r3, #2
 8005bc2:	f8c9 3000 	strmi.w	r3, [r9]
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	f015 0506 	ands.w	r5, r5, #6
 8005bcc:	d107      	bne.n	8005bde <_printf_common+0x52>
 8005bce:	f104 0a19 	add.w	sl, r4, #25
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	42ab      	cmp	r3, r5
 8005bdc:	dc28      	bgt.n	8005c30 <_printf_common+0xa4>
 8005bde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	3300      	adds	r3, #0
 8005be6:	bf18      	it	ne
 8005be8:	2301      	movne	r3, #1
 8005bea:	0692      	lsls	r2, r2, #26
 8005bec:	d42d      	bmi.n	8005c4a <_printf_common+0xbe>
 8005bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	47c0      	blx	r8
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d020      	beq.n	8005c3e <_printf_common+0xb2>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	68e5      	ldr	r5, [r4, #12]
 8005c00:	f8d9 2000 	ldr.w	r2, [r9]
 8005c04:	f003 0306 	and.w	r3, r3, #6
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	bf08      	it	eq
 8005c0c:	1aad      	subeq	r5, r5, r2
 8005c0e:	68a3      	ldr	r3, [r4, #8]
 8005c10:	6922      	ldr	r2, [r4, #16]
 8005c12:	bf0c      	ite	eq
 8005c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c18:	2500      	movne	r5, #0
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	bfc4      	itt	gt
 8005c1e:	1a9b      	subgt	r3, r3, r2
 8005c20:	18ed      	addgt	r5, r5, r3
 8005c22:	f04f 0900 	mov.w	r9, #0
 8005c26:	341a      	adds	r4, #26
 8005c28:	454d      	cmp	r5, r9
 8005c2a:	d11a      	bne.n	8005c62 <_printf_common+0xd6>
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e008      	b.n	8005c42 <_printf_common+0xb6>
 8005c30:	2301      	movs	r3, #1
 8005c32:	4652      	mov	r2, sl
 8005c34:	4639      	mov	r1, r7
 8005c36:	4630      	mov	r0, r6
 8005c38:	47c0      	blx	r8
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	d103      	bne.n	8005c46 <_printf_common+0xba>
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c46:	3501      	adds	r5, #1
 8005c48:	e7c3      	b.n	8005bd2 <_printf_common+0x46>
 8005c4a:	18e1      	adds	r1, r4, r3
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	2030      	movs	r0, #48	; 0x30
 8005c50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c54:	4422      	add	r2, r4
 8005c56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c5e:	3302      	adds	r3, #2
 8005c60:	e7c5      	b.n	8005bee <_printf_common+0x62>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4622      	mov	r2, r4
 8005c66:	4639      	mov	r1, r7
 8005c68:	4630      	mov	r0, r6
 8005c6a:	47c0      	blx	r8
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d0e6      	beq.n	8005c3e <_printf_common+0xb2>
 8005c70:	f109 0901 	add.w	r9, r9, #1
 8005c74:	e7d8      	b.n	8005c28 <_printf_common+0x9c>
	...

08005c78 <_printf_i>:
 8005c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c80:	460c      	mov	r4, r1
 8005c82:	7e09      	ldrb	r1, [r1, #24]
 8005c84:	b085      	sub	sp, #20
 8005c86:	296e      	cmp	r1, #110	; 0x6e
 8005c88:	4617      	mov	r7, r2
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	4698      	mov	r8, r3
 8005c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c90:	f000 80b3 	beq.w	8005dfa <_printf_i+0x182>
 8005c94:	d822      	bhi.n	8005cdc <_printf_i+0x64>
 8005c96:	2963      	cmp	r1, #99	; 0x63
 8005c98:	d036      	beq.n	8005d08 <_printf_i+0x90>
 8005c9a:	d80a      	bhi.n	8005cb2 <_printf_i+0x3a>
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	f000 80b9 	beq.w	8005e14 <_printf_i+0x19c>
 8005ca2:	2958      	cmp	r1, #88	; 0x58
 8005ca4:	f000 8083 	beq.w	8005dae <_printf_i+0x136>
 8005ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005cb0:	e032      	b.n	8005d18 <_printf_i+0xa0>
 8005cb2:	2964      	cmp	r1, #100	; 0x64
 8005cb4:	d001      	beq.n	8005cba <_printf_i+0x42>
 8005cb6:	2969      	cmp	r1, #105	; 0x69
 8005cb8:	d1f6      	bne.n	8005ca8 <_printf_i+0x30>
 8005cba:	6820      	ldr	r0, [r4, #0]
 8005cbc:	6813      	ldr	r3, [r2, #0]
 8005cbe:	0605      	lsls	r5, r0, #24
 8005cc0:	f103 0104 	add.w	r1, r3, #4
 8005cc4:	d52a      	bpl.n	8005d1c <_printf_i+0xa4>
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6011      	str	r1, [r2, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	da03      	bge.n	8005cd6 <_printf_i+0x5e>
 8005cce:	222d      	movs	r2, #45	; 0x2d
 8005cd0:	425b      	negs	r3, r3
 8005cd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cd6:	486f      	ldr	r0, [pc, #444]	; (8005e94 <_printf_i+0x21c>)
 8005cd8:	220a      	movs	r2, #10
 8005cda:	e039      	b.n	8005d50 <_printf_i+0xd8>
 8005cdc:	2973      	cmp	r1, #115	; 0x73
 8005cde:	f000 809d 	beq.w	8005e1c <_printf_i+0x1a4>
 8005ce2:	d808      	bhi.n	8005cf6 <_printf_i+0x7e>
 8005ce4:	296f      	cmp	r1, #111	; 0x6f
 8005ce6:	d020      	beq.n	8005d2a <_printf_i+0xb2>
 8005ce8:	2970      	cmp	r1, #112	; 0x70
 8005cea:	d1dd      	bne.n	8005ca8 <_printf_i+0x30>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	f043 0320 	orr.w	r3, r3, #32
 8005cf2:	6023      	str	r3, [r4, #0]
 8005cf4:	e003      	b.n	8005cfe <_printf_i+0x86>
 8005cf6:	2975      	cmp	r1, #117	; 0x75
 8005cf8:	d017      	beq.n	8005d2a <_printf_i+0xb2>
 8005cfa:	2978      	cmp	r1, #120	; 0x78
 8005cfc:	d1d4      	bne.n	8005ca8 <_printf_i+0x30>
 8005cfe:	2378      	movs	r3, #120	; 0x78
 8005d00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d04:	4864      	ldr	r0, [pc, #400]	; (8005e98 <_printf_i+0x220>)
 8005d06:	e055      	b.n	8005db4 <_printf_i+0x13c>
 8005d08:	6813      	ldr	r3, [r2, #0]
 8005d0a:	1d19      	adds	r1, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6011      	str	r1, [r2, #0]
 8005d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e08c      	b.n	8005e36 <_printf_i+0x1be>
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6011      	str	r1, [r2, #0]
 8005d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d24:	bf18      	it	ne
 8005d26:	b21b      	sxthne	r3, r3
 8005d28:	e7cf      	b.n	8005cca <_printf_i+0x52>
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	6825      	ldr	r5, [r4, #0]
 8005d2e:	1d18      	adds	r0, r3, #4
 8005d30:	6010      	str	r0, [r2, #0]
 8005d32:	0628      	lsls	r0, r5, #24
 8005d34:	d501      	bpl.n	8005d3a <_printf_i+0xc2>
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	e002      	b.n	8005d40 <_printf_i+0xc8>
 8005d3a:	0668      	lsls	r0, r5, #25
 8005d3c:	d5fb      	bpl.n	8005d36 <_printf_i+0xbe>
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	4854      	ldr	r0, [pc, #336]	; (8005e94 <_printf_i+0x21c>)
 8005d42:	296f      	cmp	r1, #111	; 0x6f
 8005d44:	bf14      	ite	ne
 8005d46:	220a      	movne	r2, #10
 8005d48:	2208      	moveq	r2, #8
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d50:	6865      	ldr	r5, [r4, #4]
 8005d52:	60a5      	str	r5, [r4, #8]
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	f2c0 8095 	blt.w	8005e84 <_printf_i+0x20c>
 8005d5a:	6821      	ldr	r1, [r4, #0]
 8005d5c:	f021 0104 	bic.w	r1, r1, #4
 8005d60:	6021      	str	r1, [r4, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d13d      	bne.n	8005de2 <_printf_i+0x16a>
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	f040 808e 	bne.w	8005e88 <_printf_i+0x210>
 8005d6c:	4665      	mov	r5, ip
 8005d6e:	2a08      	cmp	r2, #8
 8005d70:	d10b      	bne.n	8005d8a <_printf_i+0x112>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	07db      	lsls	r3, r3, #31
 8005d76:	d508      	bpl.n	8005d8a <_printf_i+0x112>
 8005d78:	6923      	ldr	r3, [r4, #16]
 8005d7a:	6862      	ldr	r2, [r4, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	bfde      	ittt	le
 8005d80:	2330      	movle	r3, #48	; 0x30
 8005d82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d86:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d8a:	ebac 0305 	sub.w	r3, ip, r5
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	f8cd 8000 	str.w	r8, [sp]
 8005d94:	463b      	mov	r3, r7
 8005d96:	aa03      	add	r2, sp, #12
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff fef6 	bl	8005b8c <_printf_common>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d14d      	bne.n	8005e40 <_printf_i+0x1c8>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005da8:	b005      	add	sp, #20
 8005daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dae:	4839      	ldr	r0, [pc, #228]	; (8005e94 <_printf_i+0x21c>)
 8005db0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005db4:	6813      	ldr	r3, [r2, #0]
 8005db6:	6821      	ldr	r1, [r4, #0]
 8005db8:	1d1d      	adds	r5, r3, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6015      	str	r5, [r2, #0]
 8005dbe:	060a      	lsls	r2, r1, #24
 8005dc0:	d50b      	bpl.n	8005dda <_printf_i+0x162>
 8005dc2:	07ca      	lsls	r2, r1, #31
 8005dc4:	bf44      	itt	mi
 8005dc6:	f041 0120 	orrmi.w	r1, r1, #32
 8005dca:	6021      	strmi	r1, [r4, #0]
 8005dcc:	b91b      	cbnz	r3, 8005dd6 <_printf_i+0x15e>
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	f022 0220 	bic.w	r2, r2, #32
 8005dd4:	6022      	str	r2, [r4, #0]
 8005dd6:	2210      	movs	r2, #16
 8005dd8:	e7b7      	b.n	8005d4a <_printf_i+0xd2>
 8005dda:	064d      	lsls	r5, r1, #25
 8005ddc:	bf48      	it	mi
 8005dde:	b29b      	uxthmi	r3, r3
 8005de0:	e7ef      	b.n	8005dc2 <_printf_i+0x14a>
 8005de2:	4665      	mov	r5, ip
 8005de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005de8:	fb02 3311 	mls	r3, r2, r1, r3
 8005dec:	5cc3      	ldrb	r3, [r0, r3]
 8005dee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005df2:	460b      	mov	r3, r1
 8005df4:	2900      	cmp	r1, #0
 8005df6:	d1f5      	bne.n	8005de4 <_printf_i+0x16c>
 8005df8:	e7b9      	b.n	8005d6e <_printf_i+0xf6>
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	6825      	ldr	r5, [r4, #0]
 8005dfe:	6961      	ldr	r1, [r4, #20]
 8005e00:	1d18      	adds	r0, r3, #4
 8005e02:	6010      	str	r0, [r2, #0]
 8005e04:	0628      	lsls	r0, r5, #24
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	d501      	bpl.n	8005e0e <_printf_i+0x196>
 8005e0a:	6019      	str	r1, [r3, #0]
 8005e0c:	e002      	b.n	8005e14 <_printf_i+0x19c>
 8005e0e:	066a      	lsls	r2, r5, #25
 8005e10:	d5fb      	bpl.n	8005e0a <_printf_i+0x192>
 8005e12:	8019      	strh	r1, [r3, #0]
 8005e14:	2300      	movs	r3, #0
 8005e16:	6123      	str	r3, [r4, #16]
 8005e18:	4665      	mov	r5, ip
 8005e1a:	e7b9      	b.n	8005d90 <_printf_i+0x118>
 8005e1c:	6813      	ldr	r3, [r2, #0]
 8005e1e:	1d19      	adds	r1, r3, #4
 8005e20:	6011      	str	r1, [r2, #0]
 8005e22:	681d      	ldr	r5, [r3, #0]
 8005e24:	6862      	ldr	r2, [r4, #4]
 8005e26:	2100      	movs	r1, #0
 8005e28:	4628      	mov	r0, r5
 8005e2a:	f7fa f9d1 	bl	80001d0 <memchr>
 8005e2e:	b108      	cbz	r0, 8005e34 <_printf_i+0x1bc>
 8005e30:	1b40      	subs	r0, r0, r5
 8005e32:	6060      	str	r0, [r4, #4]
 8005e34:	6863      	ldr	r3, [r4, #4]
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3e:	e7a7      	b.n	8005d90 <_printf_i+0x118>
 8005e40:	6923      	ldr	r3, [r4, #16]
 8005e42:	462a      	mov	r2, r5
 8005e44:	4639      	mov	r1, r7
 8005e46:	4630      	mov	r0, r6
 8005e48:	47c0      	blx	r8
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	d0aa      	beq.n	8005da4 <_printf_i+0x12c>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	079b      	lsls	r3, r3, #30
 8005e52:	d413      	bmi.n	8005e7c <_printf_i+0x204>
 8005e54:	68e0      	ldr	r0, [r4, #12]
 8005e56:	9b03      	ldr	r3, [sp, #12]
 8005e58:	4298      	cmp	r0, r3
 8005e5a:	bfb8      	it	lt
 8005e5c:	4618      	movlt	r0, r3
 8005e5e:	e7a3      	b.n	8005da8 <_printf_i+0x130>
 8005e60:	2301      	movs	r3, #1
 8005e62:	464a      	mov	r2, r9
 8005e64:	4639      	mov	r1, r7
 8005e66:	4630      	mov	r0, r6
 8005e68:	47c0      	blx	r8
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d09a      	beq.n	8005da4 <_printf_i+0x12c>
 8005e6e:	3501      	adds	r5, #1
 8005e70:	68e3      	ldr	r3, [r4, #12]
 8005e72:	9a03      	ldr	r2, [sp, #12]
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	42ab      	cmp	r3, r5
 8005e78:	dcf2      	bgt.n	8005e60 <_printf_i+0x1e8>
 8005e7a:	e7eb      	b.n	8005e54 <_printf_i+0x1dc>
 8005e7c:	2500      	movs	r5, #0
 8005e7e:	f104 0919 	add.w	r9, r4, #25
 8005e82:	e7f5      	b.n	8005e70 <_printf_i+0x1f8>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1ac      	bne.n	8005de2 <_printf_i+0x16a>
 8005e88:	7803      	ldrb	r3, [r0, #0]
 8005e8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e92:	e76c      	b.n	8005d6e <_printf_i+0xf6>
 8005e94:	0800616d 	.word	0x0800616d
 8005e98:	0800617e 	.word	0x0800617e

08005e9c <memcpy>:
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	1e43      	subs	r3, r0, #1
 8005ea0:	440a      	add	r2, r1
 8005ea2:	4291      	cmp	r1, r2
 8005ea4:	d100      	bne.n	8005ea8 <memcpy+0xc>
 8005ea6:	bd10      	pop	{r4, pc}
 8005ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eb0:	e7f7      	b.n	8005ea2 <memcpy+0x6>

08005eb2 <memmove>:
 8005eb2:	4288      	cmp	r0, r1
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	eb01 0302 	add.w	r3, r1, r2
 8005eba:	d807      	bhi.n	8005ecc <memmove+0x1a>
 8005ebc:	1e42      	subs	r2, r0, #1
 8005ebe:	4299      	cmp	r1, r3
 8005ec0:	d00a      	beq.n	8005ed8 <memmove+0x26>
 8005ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ec6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005eca:	e7f8      	b.n	8005ebe <memmove+0xc>
 8005ecc:	4283      	cmp	r3, r0
 8005ece:	d9f5      	bls.n	8005ebc <memmove+0xa>
 8005ed0:	1881      	adds	r1, r0, r2
 8005ed2:	1ad2      	subs	r2, r2, r3
 8005ed4:	42d3      	cmn	r3, r2
 8005ed6:	d100      	bne.n	8005eda <memmove+0x28>
 8005ed8:	bd10      	pop	{r4, pc}
 8005eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ede:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ee2:	e7f7      	b.n	8005ed4 <memmove+0x22>

08005ee4 <_free_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	2900      	cmp	r1, #0
 8005eea:	d045      	beq.n	8005f78 <_free_r+0x94>
 8005eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef0:	1f0c      	subs	r4, r1, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bfb8      	it	lt
 8005ef6:	18e4      	addlt	r4, r4, r3
 8005ef8:	f000 f8d2 	bl	80060a0 <__malloc_lock>
 8005efc:	4a1f      	ldr	r2, [pc, #124]	; (8005f7c <_free_r+0x98>)
 8005efe:	6813      	ldr	r3, [r2, #0]
 8005f00:	4610      	mov	r0, r2
 8005f02:	b933      	cbnz	r3, 8005f12 <_free_r+0x2e>
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	6014      	str	r4, [r2, #0]
 8005f08:	4628      	mov	r0, r5
 8005f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f0e:	f000 b8c8 	b.w	80060a2 <__malloc_unlock>
 8005f12:	42a3      	cmp	r3, r4
 8005f14:	d90c      	bls.n	8005f30 <_free_r+0x4c>
 8005f16:	6821      	ldr	r1, [r4, #0]
 8005f18:	1862      	adds	r2, r4, r1
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	bf04      	itt	eq
 8005f1e:	681a      	ldreq	r2, [r3, #0]
 8005f20:	685b      	ldreq	r3, [r3, #4]
 8005f22:	6063      	str	r3, [r4, #4]
 8005f24:	bf04      	itt	eq
 8005f26:	1852      	addeq	r2, r2, r1
 8005f28:	6022      	streq	r2, [r4, #0]
 8005f2a:	6004      	str	r4, [r0, #0]
 8005f2c:	e7ec      	b.n	8005f08 <_free_r+0x24>
 8005f2e:	4613      	mov	r3, r2
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	b10a      	cbz	r2, 8005f38 <_free_r+0x54>
 8005f34:	42a2      	cmp	r2, r4
 8005f36:	d9fa      	bls.n	8005f2e <_free_r+0x4a>
 8005f38:	6819      	ldr	r1, [r3, #0]
 8005f3a:	1858      	adds	r0, r3, r1
 8005f3c:	42a0      	cmp	r0, r4
 8005f3e:	d10b      	bne.n	8005f58 <_free_r+0x74>
 8005f40:	6820      	ldr	r0, [r4, #0]
 8005f42:	4401      	add	r1, r0
 8005f44:	1858      	adds	r0, r3, r1
 8005f46:	4282      	cmp	r2, r0
 8005f48:	6019      	str	r1, [r3, #0]
 8005f4a:	d1dd      	bne.n	8005f08 <_free_r+0x24>
 8005f4c:	6810      	ldr	r0, [r2, #0]
 8005f4e:	6852      	ldr	r2, [r2, #4]
 8005f50:	605a      	str	r2, [r3, #4]
 8005f52:	4401      	add	r1, r0
 8005f54:	6019      	str	r1, [r3, #0]
 8005f56:	e7d7      	b.n	8005f08 <_free_r+0x24>
 8005f58:	d902      	bls.n	8005f60 <_free_r+0x7c>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	e7d3      	b.n	8005f08 <_free_r+0x24>
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	1821      	adds	r1, r4, r0
 8005f64:	428a      	cmp	r2, r1
 8005f66:	bf04      	itt	eq
 8005f68:	6811      	ldreq	r1, [r2, #0]
 8005f6a:	6852      	ldreq	r2, [r2, #4]
 8005f6c:	6062      	str	r2, [r4, #4]
 8005f6e:	bf04      	itt	eq
 8005f70:	1809      	addeq	r1, r1, r0
 8005f72:	6021      	streq	r1, [r4, #0]
 8005f74:	605c      	str	r4, [r3, #4]
 8005f76:	e7c7      	b.n	8005f08 <_free_r+0x24>
 8005f78:	bd38      	pop	{r3, r4, r5, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000144 	.word	0x20000144

08005f80 <_malloc_r>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	1ccd      	adds	r5, r1, #3
 8005f84:	f025 0503 	bic.w	r5, r5, #3
 8005f88:	3508      	adds	r5, #8
 8005f8a:	2d0c      	cmp	r5, #12
 8005f8c:	bf38      	it	cc
 8005f8e:	250c      	movcc	r5, #12
 8005f90:	2d00      	cmp	r5, #0
 8005f92:	4606      	mov	r6, r0
 8005f94:	db01      	blt.n	8005f9a <_malloc_r+0x1a>
 8005f96:	42a9      	cmp	r1, r5
 8005f98:	d903      	bls.n	8005fa2 <_malloc_r+0x22>
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	6033      	str	r3, [r6, #0]
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
 8005fa2:	f000 f87d 	bl	80060a0 <__malloc_lock>
 8005fa6:	4a21      	ldr	r2, [pc, #132]	; (800602c <_malloc_r+0xac>)
 8005fa8:	6814      	ldr	r4, [r2, #0]
 8005faa:	4621      	mov	r1, r4
 8005fac:	b991      	cbnz	r1, 8005fd4 <_malloc_r+0x54>
 8005fae:	4c20      	ldr	r4, [pc, #128]	; (8006030 <_malloc_r+0xb0>)
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	b91b      	cbnz	r3, 8005fbc <_malloc_r+0x3c>
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f000 f863 	bl	8006080 <_sbrk_r>
 8005fba:	6020      	str	r0, [r4, #0]
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f000 f85e 	bl	8006080 <_sbrk_r>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d124      	bne.n	8006012 <_malloc_r+0x92>
 8005fc8:	230c      	movs	r3, #12
 8005fca:	6033      	str	r3, [r6, #0]
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 f868 	bl	80060a2 <__malloc_unlock>
 8005fd2:	e7e4      	b.n	8005f9e <_malloc_r+0x1e>
 8005fd4:	680b      	ldr	r3, [r1, #0]
 8005fd6:	1b5b      	subs	r3, r3, r5
 8005fd8:	d418      	bmi.n	800600c <_malloc_r+0x8c>
 8005fda:	2b0b      	cmp	r3, #11
 8005fdc:	d90f      	bls.n	8005ffe <_malloc_r+0x7e>
 8005fde:	600b      	str	r3, [r1, #0]
 8005fe0:	50cd      	str	r5, [r1, r3]
 8005fe2:	18cc      	adds	r4, r1, r3
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f000 f85c 	bl	80060a2 <__malloc_unlock>
 8005fea:	f104 000b 	add.w	r0, r4, #11
 8005fee:	1d23      	adds	r3, r4, #4
 8005ff0:	f020 0007 	bic.w	r0, r0, #7
 8005ff4:	1ac3      	subs	r3, r0, r3
 8005ff6:	d0d3      	beq.n	8005fa0 <_malloc_r+0x20>
 8005ff8:	425a      	negs	r2, r3
 8005ffa:	50e2      	str	r2, [r4, r3]
 8005ffc:	e7d0      	b.n	8005fa0 <_malloc_r+0x20>
 8005ffe:	428c      	cmp	r4, r1
 8006000:	684b      	ldr	r3, [r1, #4]
 8006002:	bf16      	itet	ne
 8006004:	6063      	strne	r3, [r4, #4]
 8006006:	6013      	streq	r3, [r2, #0]
 8006008:	460c      	movne	r4, r1
 800600a:	e7eb      	b.n	8005fe4 <_malloc_r+0x64>
 800600c:	460c      	mov	r4, r1
 800600e:	6849      	ldr	r1, [r1, #4]
 8006010:	e7cc      	b.n	8005fac <_malloc_r+0x2c>
 8006012:	1cc4      	adds	r4, r0, #3
 8006014:	f024 0403 	bic.w	r4, r4, #3
 8006018:	42a0      	cmp	r0, r4
 800601a:	d005      	beq.n	8006028 <_malloc_r+0xa8>
 800601c:	1a21      	subs	r1, r4, r0
 800601e:	4630      	mov	r0, r6
 8006020:	f000 f82e 	bl	8006080 <_sbrk_r>
 8006024:	3001      	adds	r0, #1
 8006026:	d0cf      	beq.n	8005fc8 <_malloc_r+0x48>
 8006028:	6025      	str	r5, [r4, #0]
 800602a:	e7db      	b.n	8005fe4 <_malloc_r+0x64>
 800602c:	20000144 	.word	0x20000144
 8006030:	20000148 	.word	0x20000148

08006034 <_realloc_r>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	4607      	mov	r7, r0
 8006038:	4614      	mov	r4, r2
 800603a:	460e      	mov	r6, r1
 800603c:	b921      	cbnz	r1, 8006048 <_realloc_r+0x14>
 800603e:	4611      	mov	r1, r2
 8006040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006044:	f7ff bf9c 	b.w	8005f80 <_malloc_r>
 8006048:	b922      	cbnz	r2, 8006054 <_realloc_r+0x20>
 800604a:	f7ff ff4b 	bl	8005ee4 <_free_r>
 800604e:	4625      	mov	r5, r4
 8006050:	4628      	mov	r0, r5
 8006052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006054:	f000 f826 	bl	80060a4 <_malloc_usable_size_r>
 8006058:	42a0      	cmp	r0, r4
 800605a:	d20f      	bcs.n	800607c <_realloc_r+0x48>
 800605c:	4621      	mov	r1, r4
 800605e:	4638      	mov	r0, r7
 8006060:	f7ff ff8e 	bl	8005f80 <_malloc_r>
 8006064:	4605      	mov	r5, r0
 8006066:	2800      	cmp	r0, #0
 8006068:	d0f2      	beq.n	8006050 <_realloc_r+0x1c>
 800606a:	4631      	mov	r1, r6
 800606c:	4622      	mov	r2, r4
 800606e:	f7ff ff15 	bl	8005e9c <memcpy>
 8006072:	4631      	mov	r1, r6
 8006074:	4638      	mov	r0, r7
 8006076:	f7ff ff35 	bl	8005ee4 <_free_r>
 800607a:	e7e9      	b.n	8006050 <_realloc_r+0x1c>
 800607c:	4635      	mov	r5, r6
 800607e:	e7e7      	b.n	8006050 <_realloc_r+0x1c>

08006080 <_sbrk_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4c06      	ldr	r4, [pc, #24]	; (800609c <_sbrk_r+0x1c>)
 8006084:	2300      	movs	r3, #0
 8006086:	4605      	mov	r5, r0
 8006088:	4608      	mov	r0, r1
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	f7ff fb44 	bl	8005718 <_sbrk>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d102      	bne.n	800609a <_sbrk_r+0x1a>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	b103      	cbz	r3, 800609a <_sbrk_r+0x1a>
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	bd38      	pop	{r3, r4, r5, pc}
 800609c:	20000414 	.word	0x20000414

080060a0 <__malloc_lock>:
 80060a0:	4770      	bx	lr

080060a2 <__malloc_unlock>:
 80060a2:	4770      	bx	lr

080060a4 <_malloc_usable_size_r>:
 80060a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a8:	1f18      	subs	r0, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bfbc      	itt	lt
 80060ae:	580b      	ldrlt	r3, [r1, r0]
 80060b0:	18c0      	addlt	r0, r0, r3
 80060b2:	4770      	bx	lr

080060b4 <_init>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr

080060c0 <_fini>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr
