
utp_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d8  080058d8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e0  080058e0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080058e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000098  08005980  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08005980  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015789  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002918  00000000  00000000  00035851  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  00038170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  00039510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002806b  00000000  00000000  0003a748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d38  00000000  00000000  000627b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6d05  00000000  00000000  000734eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a1f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b4  00000000  00000000  0016a26c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005840 	.word	0x08005840

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08005840 	.word	0x08005840

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d2:	2003      	movs	r0, #3
 80004d4:	f000 f95e 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 f80d 	bl	80004f8 <HAL_InitTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e4:	2301      	movs	r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	e001      	b.n	80004ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ea:	f004 fff1 	bl	80054d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_InitTick+0x6c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d023      	beq.n	8000554 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <HAL_InitTick+0x70>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_InitTick+0x6c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	fbb3 f3f1 	udiv	r3, r3, r1
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f96b 	bl	80007fe <HAL_SYSTICK_Config>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10f      	bne.n	800054e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b0f      	cmp	r3, #15
 8000532:	d809      	bhi.n	8000548 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000534:	2200      	movs	r2, #0
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800053c:	f000 f935 	bl	80007aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_InitTick+0x74>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e007      	b.n	8000558 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000548:	2301      	movs	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	e004      	b.n	8000558 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e001      	b.n	8000558 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000004 	.word	0x20000004
 8000568:	20000094 	.word	0x20000094
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x20>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x24>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_IncTick+0x24>)
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000004 	.word	0x20000004
 8000594:	200000f0 	.word	0x200000f0

08000598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return uwTick;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_GetTick+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200000f0 	.word	0x200000f0

080005b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff ffee 	bl	8000598 <HAL_GetTick>
 80005bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c8:	d005      	beq.n	80005d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_Delay+0x40>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005d6:	bf00      	nop
 80005d8:	f7ff ffde 	bl	8000598 <HAL_GetTick>
 80005dc:	4602      	mov	r2, r0
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d8f7      	bhi.n	80005d8 <HAL_Delay+0x28>
  {
  }
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000004 	.word	0x20000004

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff29 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff3e 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff8e 	bl	80006e8 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5d 	bl	8000694 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff31 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000826:	e17f      	b.n	8000b28 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	2101      	movs	r1, #1
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	4013      	ands	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f000 8171 	beq.w	8000b22 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d00b      	beq.n	8000860 <HAL_GPIO_Init+0x48>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d007      	beq.n	8000860 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000854:	2b11      	cmp	r3, #17
 8000856:	d003      	beq.n	8000860 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b12      	cmp	r3, #18
 800085e:	d130      	bne.n	80008c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	2203      	movs	r2, #3
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	4313      	orrs	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000896:	2201      	movs	r2, #1
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	f003 0201 	and.w	r2, r3, #1
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d118      	bne.n	8000900 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008d4:	2201      	movs	r2, #1
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	f003 0201 	and.w	r2, r3, #1
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d003      	beq.n	8000940 <HAL_GPIO_Init+0x128>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b12      	cmp	r3, #18
 800093e:	d123      	bne.n	8000988 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3208      	adds	r2, #8
 8000948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	220f      	movs	r2, #15
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	691a      	ldr	r2, [r3, #16]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	6939      	ldr	r1, [r7, #16]
 8000984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0203 	and.w	r2, r3, #3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f000 80ac 	beq.w	8000b22 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b5e      	ldr	r3, [pc, #376]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	4a5d      	ldr	r2, [pc, #372]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6613      	str	r3, [r2, #96]	; 0x60
 80009d6:	4b5b      	ldr	r3, [pc, #364]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009e2:	4a59      	ldr	r2, [pc, #356]	; (8000b48 <HAL_GPIO_Init+0x330>)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	3302      	adds	r3, #2
 80009ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	220f      	movs	r2, #15
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a0c:	d025      	beq.n	8000a5a <HAL_GPIO_Init+0x242>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <HAL_GPIO_Init+0x334>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d01f      	beq.n	8000a56 <HAL_GPIO_Init+0x23e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4d      	ldr	r2, [pc, #308]	; (8000b50 <HAL_GPIO_Init+0x338>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d019      	beq.n	8000a52 <HAL_GPIO_Init+0x23a>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4c      	ldr	r2, [pc, #304]	; (8000b54 <HAL_GPIO_Init+0x33c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d013      	beq.n	8000a4e <HAL_GPIO_Init+0x236>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4b      	ldr	r2, [pc, #300]	; (8000b58 <HAL_GPIO_Init+0x340>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d00d      	beq.n	8000a4a <HAL_GPIO_Init+0x232>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4a      	ldr	r2, [pc, #296]	; (8000b5c <HAL_GPIO_Init+0x344>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d007      	beq.n	8000a46 <HAL_GPIO_Init+0x22e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a49      	ldr	r2, [pc, #292]	; (8000b60 <HAL_GPIO_Init+0x348>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_GPIO_Init+0x22a>
 8000a3e:	2306      	movs	r3, #6
 8000a40:	e00c      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a42:	2307      	movs	r3, #7
 8000a44:	e00a      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a46:	2305      	movs	r3, #5
 8000a48:	e008      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e004      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a52:	2302      	movs	r3, #2
 8000a54:	e002      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	f002 0203 	and.w	r2, r2, #3
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	4093      	lsls	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a6c:	4936      	ldr	r1, [pc, #216]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	3302      	adds	r3, #2
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a9e:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000aa4:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b1c:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f47f ae78 	bne.w	8000828 <HAL_GPIO_Init+0x10>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	371c      	adds	r7, #28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	48000800 	.word	0x48000800
 8000b54:	48000c00 	.word	0x48000c00
 8000b58:	48001000 	.word	0x48001000
 8000b5c:	48001400 	.word	0x48001400
 8000b60:	48001800 	.word	0x48001800
 8000b64:	40010400 	.word	0x40010400

08000b68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000b76:	e0cd      	b.n	8000d14 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 80c0 	beq.w	8000d0e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000b8e:	4a68      	ldr	r2, [pc, #416]	; (8000d30 <HAL_GPIO_DeInit+0x1c8>)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	3302      	adds	r3, #2
 8000b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bb6:	d025      	beq.n	8000c04 <HAL_GPIO_DeInit+0x9c>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a5e      	ldr	r2, [pc, #376]	; (8000d34 <HAL_GPIO_DeInit+0x1cc>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d01f      	beq.n	8000c00 <HAL_GPIO_DeInit+0x98>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a5d      	ldr	r2, [pc, #372]	; (8000d38 <HAL_GPIO_DeInit+0x1d0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d019      	beq.n	8000bfc <HAL_GPIO_DeInit+0x94>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a5c      	ldr	r2, [pc, #368]	; (8000d3c <HAL_GPIO_DeInit+0x1d4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d013      	beq.n	8000bf8 <HAL_GPIO_DeInit+0x90>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a5b      	ldr	r2, [pc, #364]	; (8000d40 <HAL_GPIO_DeInit+0x1d8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d00d      	beq.n	8000bf4 <HAL_GPIO_DeInit+0x8c>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a5a      	ldr	r2, [pc, #360]	; (8000d44 <HAL_GPIO_DeInit+0x1dc>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_DeInit+0x88>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a59      	ldr	r2, [pc, #356]	; (8000d48 <HAL_GPIO_DeInit+0x1e0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d101      	bne.n	8000bec <HAL_GPIO_DeInit+0x84>
 8000be8:	2306      	movs	r3, #6
 8000bea:	e00c      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000bec:	2307      	movs	r3, #7
 8000bee:	e00a      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	e008      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_DeInit+0x9e>
 8000c04:	2300      	movs	r3, #0
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d132      	bne.n	8000c7c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000c16:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	494b      	ldr	r1, [pc, #300]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000c24:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4947      	ldr	r1, [pc, #284]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000c32:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	4944      	ldr	r1, [pc, #272]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000c40:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4940      	ldr	r1, [pc, #256]	; (8000d4c <HAL_GPIO_DeInit+0x1e4>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000c5e:	4a34      	ldr	r2, [pc, #208]	; (8000d30 <HAL_GPIO_DeInit+0x1c8>)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43da      	mvns	r2, r3
 8000c6e:	4830      	ldr	r0, [pc, #192]	; (8000d30 <HAL_GPIO_DeInit+0x1c8>)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	400a      	ands	r2, r1
 8000c76:	3302      	adds	r3, #2
 8000c78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2103      	movs	r1, #3
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	08da      	lsrs	r2, r3, #3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3208      	adds	r2, #8
 8000c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	08d2      	lsrs	r2, r2, #3
 8000cb0:	4019      	ands	r1, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	401a      	ands	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2103      	movs	r1, #3
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfe:	2101      	movs	r1, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	401a      	ands	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f47f af2b 	bne.w	8000b78 <HAL_GPIO_DeInit+0x10>
  }
}
 8000d22:	bf00      	nop
 8000d24:	371c      	adds	r7, #28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40010000 	.word	0x40010000
 8000d34:	48000400 	.word	0x48000400
 8000d38:	48000800 	.word	0x48000800
 8000d3c:	48000c00 	.word	0x48000c00
 8000d40:	48001000 	.word	0x48001000
 8000d44:	48001400 	.word	0x48001400
 8000d48:	48001800 	.word	0x48001800
 8000d4c:	40010400 	.word	0x40010400

08000d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e081      	b.n	8000e66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d106      	bne.n	8000d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f004 fbce 	bl	8005518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2224      	movs	r2, #36	; 0x24
 8000d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0201 	bic.w	r2, r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000da0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000db0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d107      	bne.n	8000dca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	e006      	b.n	8000dd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000dd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d104      	bne.n	8000dea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000de8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691a      	ldr	r2, [r3, #16]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	ea42 0103 	orr.w	r1, r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	021a      	lsls	r2, r3, #8
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69d9      	ldr	r1, [r3, #28]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a1a      	ldr	r2, [r3, #32]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2220      	movs	r2, #32
 8000e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e021      	b.n	8000ec4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2224      	movs	r2, #36	; 0x24
 8000e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f004 fb81 	bl	80055a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	817b      	strh	r3, [r7, #10]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	813b      	strh	r3, [r7, #8]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b20      	cmp	r3, #32
 8000ef0:	f040 80f9 	bne.w	80010e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <HAL_I2C_Mem_Write+0x34>
 8000efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d105      	bne.n	8000f0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e0ed      	b.n	80010e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d101      	bne.n	8000f1a <HAL_I2C_Mem_Write+0x4e>
 8000f16:	2302      	movs	r3, #2
 8000f18:	e0e6      	b.n	80010e8 <HAL_I2C_Mem_Write+0x21c>
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f22:	f7ff fb39 	bl	8000598 <HAL_GetTick>
 8000f26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2319      	movs	r3, #25
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f000 fac3 	bl	80014c0 <I2C_WaitOnFlagUntilTimeout>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e0d1      	b.n	80010e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2221      	movs	r2, #33	; 0x21
 8000f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2240      	movs	r2, #64	; 0x40
 8000f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6a3a      	ldr	r2, [r7, #32]
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f6c:	88f8      	ldrh	r0, [r7, #6]
 8000f6e:	893a      	ldrh	r2, [r7, #8]
 8000f70:	8979      	ldrh	r1, [r7, #10]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f000 f9d3 	bl	8001328 <I2C_RequestMemoryWrite>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e0a9      	b.n	80010e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	2bff      	cmp	r3, #255	; 0xff
 8000f9c:	d90e      	bls.n	8000fbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	22ff      	movs	r2, #255	; 0xff
 8000fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	8979      	ldrh	r1, [r7, #10]
 8000fac:	2300      	movs	r3, #0
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f000 fba5 	bl	8001704 <I2C_TransferConfig>
 8000fba:	e00f      	b.n	8000fdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	8979      	ldrh	r1, [r7, #10]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f000 fb94 	bl	8001704 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f000 faad 	bl	8001540 <I2C_WaitOnTXISFlagUntilTimeout>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e07b      	b.n	80010e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800100a:	b29b      	uxth	r3, r3
 800100c:	3b01      	subs	r3, #1
 800100e:	b29a      	uxth	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001018:	3b01      	subs	r3, #1
 800101a:	b29a      	uxth	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001024:	b29b      	uxth	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d034      	beq.n	8001094 <HAL_I2C_Mem_Write+0x1c8>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800102e:	2b00      	cmp	r3, #0
 8001030:	d130      	bne.n	8001094 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001038:	2200      	movs	r2, #0
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 fa3f 	bl	80014c0 <I2C_WaitOnFlagUntilTimeout>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e04d      	b.n	80010e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001050:	b29b      	uxth	r3, r3
 8001052:	2bff      	cmp	r3, #255	; 0xff
 8001054:	d90e      	bls.n	8001074 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	22ff      	movs	r2, #255	; 0xff
 800105a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001060:	b2da      	uxtb	r2, r3
 8001062:	8979      	ldrh	r1, [r7, #10]
 8001064:	2300      	movs	r3, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 fb49 	bl	8001704 <I2C_TransferConfig>
 8001072:	e00f      	b.n	8001094 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001078:	b29a      	uxth	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001082:	b2da      	uxtb	r2, r3
 8001084:	8979      	ldrh	r1, [r7, #10]
 8001086:	2300      	movs	r3, #0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 fb38 	bl	8001704 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001098:	b29b      	uxth	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d19e      	bne.n	8000fdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 fa8c 	bl	80015c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e01a      	b.n	80010e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2220      	movs	r2, #32
 80010b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6859      	ldr	r1, [r3, #4]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_I2C_Mem_Write+0x224>)
 80010c6:	400b      	ands	r3, r1
 80010c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2220      	movs	r2, #32
 80010ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80010e6:	2302      	movs	r3, #2
  }
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	fe00e800 	.word	0xfe00e800

080010f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	4608      	mov	r0, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	461a      	mov	r2, r3
 8001102:	4603      	mov	r3, r0
 8001104:	817b      	strh	r3, [r7, #10]
 8001106:	460b      	mov	r3, r1
 8001108:	813b      	strh	r3, [r7, #8]
 800110a:	4613      	mov	r3, r2
 800110c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b20      	cmp	r3, #32
 8001118:	f040 80fd 	bne.w	8001316 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <HAL_I2C_Mem_Read+0x34>
 8001122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001124:	2b00      	cmp	r3, #0
 8001126:	d105      	bne.n	8001134 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0f1      	b.n	8001318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_I2C_Mem_Read+0x4e>
 800113e:	2302      	movs	r3, #2
 8001140:	e0ea      	b.n	8001318 <HAL_I2C_Mem_Read+0x224>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800114a:	f7ff fa25 	bl	8000598 <HAL_GetTick>
 800114e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2319      	movs	r3, #25
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 f9af 	bl	80014c0 <I2C_WaitOnFlagUntilTimeout>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0d5      	b.n	8001318 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2222      	movs	r2, #34	; 0x22
 8001170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2240      	movs	r2, #64	; 0x40
 8001178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6a3a      	ldr	r2, [r7, #32]
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800118c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001194:	88f8      	ldrh	r0, [r7, #6]
 8001196:	893a      	ldrh	r2, [r7, #8]
 8001198:	8979      	ldrh	r1, [r7, #10]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4603      	mov	r3, r0
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 f913 	bl	80013d0 <I2C_RequestMemoryRead>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0ad      	b.n	8001318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	2bff      	cmp	r3, #255	; 0xff
 80011c4:	d90e      	bls.n	80011e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	22ff      	movs	r2, #255	; 0xff
 80011ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	8979      	ldrh	r1, [r7, #10]
 80011d4:	4b52      	ldr	r3, [pc, #328]	; (8001320 <HAL_I2C_Mem_Read+0x22c>)
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f000 fa91 	bl	8001704 <I2C_TransferConfig>
 80011e2:	e00f      	b.n	8001204 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	8979      	ldrh	r1, [r7, #10]
 80011f6:	4b4a      	ldr	r3, [pc, #296]	; (8001320 <HAL_I2C_Mem_Read+0x22c>)
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 fa80 	bl	8001704 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120a:	2200      	movs	r2, #0
 800120c:	2104      	movs	r1, #4
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 f956 	bl	80014c0 <I2C_WaitOnFlagUntilTimeout>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e07c      	b.n	8001318 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123a:	3b01      	subs	r3, #1
 800123c:	b29a      	uxth	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001246:	b29b      	uxth	r3, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001254:	b29b      	uxth	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d034      	beq.n	80012c4 <HAL_I2C_Mem_Read+0x1d0>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125e:	2b00      	cmp	r3, #0
 8001260:	d130      	bne.n	80012c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001268:	2200      	movs	r2, #0
 800126a:	2180      	movs	r1, #128	; 0x80
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f927 	bl	80014c0 <I2C_WaitOnFlagUntilTimeout>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e04d      	b.n	8001318 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001280:	b29b      	uxth	r3, r3
 8001282:	2bff      	cmp	r3, #255	; 0xff
 8001284:	d90e      	bls.n	80012a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001290:	b2da      	uxtb	r2, r3
 8001292:	8979      	ldrh	r1, [r7, #10]
 8001294:	2300      	movs	r3, #0
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 fa31 	bl	8001704 <I2C_TransferConfig>
 80012a2:	e00f      	b.n	80012c4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	8979      	ldrh	r1, [r7, #10]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 fa20 	bl	8001704 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d19a      	bne.n	8001204 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 f974 	bl	80015c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e01a      	b.n	8001318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2220      	movs	r2, #32
 80012e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_I2C_Mem_Read+0x230>)
 80012f6:	400b      	ands	r3, r1
 80012f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001316:	2302      	movs	r3, #2
  }
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	80002400 	.word	0x80002400
 8001324:	fe00e800 	.word	0xfe00e800

08001328 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af02      	add	r7, sp, #8
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4603      	mov	r3, r0
 8001338:	817b      	strh	r3, [r7, #10]
 800133a:	460b      	mov	r3, r1
 800133c:	813b      	strh	r3, [r7, #8]
 800133e:	4613      	mov	r3, r2
 8001340:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	8979      	ldrh	r1, [r7, #10]
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <I2C_RequestMemoryWrite+0xa4>)
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 f9d7 	bl	8001704 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	69b9      	ldr	r1, [r7, #24]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 f8f0 	bl	8001540 <I2C_WaitOnTXISFlagUntilTimeout>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e02c      	b.n	80013c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d105      	bne.n	800137c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001370:	893b      	ldrh	r3, [r7, #8]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
 800137a:	e015      	b.n	80013a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800137c:	893b      	ldrh	r3, [r7, #8]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	b29b      	uxth	r3, r3
 8001382:	b2da      	uxtb	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	69b9      	ldr	r1, [r7, #24]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 f8d6 	bl	8001540 <I2C_WaitOnTXISFlagUntilTimeout>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e012      	b.n	80013c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800139e:	893b      	ldrh	r3, [r7, #8]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2200      	movs	r2, #0
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f884 	bl	80014c0 <I2C_WaitOnFlagUntilTimeout>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	80002000 	.word	0x80002000

080013d0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4603      	mov	r3, r0
 80013e0:	817b      	strh	r3, [r7, #10]
 80013e2:	460b      	mov	r3, r1
 80013e4:	813b      	strh	r3, [r7, #8]
 80013e6:	4613      	mov	r3, r2
 80013e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	8979      	ldrh	r1, [r7, #10]
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <I2C_RequestMemoryRead+0xa4>)
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2300      	movs	r3, #0
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f984 	bl	8001704 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 f89d 	bl	8001540 <I2C_WaitOnTXISFlagUntilTimeout>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e02c      	b.n	800146a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d105      	bne.n	8001422 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001416:	893b      	ldrh	r3, [r7, #8]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
 8001420:	e015      	b.n	800144e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001422:	893b      	ldrh	r3, [r7, #8]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	b2da      	uxtb	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 f883 	bl	8001540 <I2C_WaitOnTXISFlagUntilTimeout>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e012      	b.n	800146a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001444:	893b      	ldrh	r3, [r7, #8]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2200      	movs	r2, #0
 8001456:	2140      	movs	r1, #64	; 0x40
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 f831 	bl	80014c0 <I2C_WaitOnFlagUntilTimeout>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	80002000 	.word	0x80002000

08001478 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b02      	cmp	r3, #2
 800148c:	d103      	bne.n	8001496 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d007      	beq.n	80014b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	619a      	str	r2, [r3, #24]
  }
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014d0:	e022      	b.n	8001518 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014d8:	d01e      	beq.n	8001518 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014da:	f7ff f85d 	bl	8000598 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d302      	bcc.n	80014f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d113      	bne.n	8001518 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	f043 0220 	orr.w	r2, r3, #32
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e00f      	b.n	8001538 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	4013      	ands	r3, r2
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	429a      	cmp	r2, r3
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	429a      	cmp	r2, r3
 8001534:	d0cd      	beq.n	80014d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800154c:	e02c      	b.n	80015a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 f870 	bl	8001638 <I2C_IsAcknowledgeFailed>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e02a      	b.n	80015b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001568:	d01e      	beq.n	80015a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800156a:	f7ff f815 	bl	8000598 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	429a      	cmp	r2, r3
 8001578:	d302      	bcc.n	8001580 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d113      	bne.n	80015a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	f043 0220 	orr.w	r2, r3, #32
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2220      	movs	r2, #32
 8001590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e007      	b.n	80015b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d1cb      	bne.n	800154e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015cc:	e028      	b.n	8001620 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 f830 	bl	8001638 <I2C_IsAcknowledgeFailed>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e026      	b.n	8001630 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015e2:	f7fe ffd9 	bl	8000598 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d302      	bcc.n	80015f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d113      	bne.n	8001620 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f043 0220 	orr.w	r2, r3, #32
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2220      	movs	r2, #32
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e007      	b.n	8001630 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0320 	and.w	r3, r3, #32
 800162a:	2b20      	cmp	r3, #32
 800162c:	d1cf      	bne.n	80015ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b10      	cmp	r3, #16
 8001650:	d151      	bne.n	80016f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001652:	e022      	b.n	800169a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800165a:	d01e      	beq.n	800169a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165c:	f7fe ff9c 	bl	8000598 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	429a      	cmp	r2, r3
 800166a:	d302      	bcc.n	8001672 <I2C_IsAcknowledgeFailed+0x3a>
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d113      	bne.n	800169a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e02e      	b.n	80016f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0320 	and.w	r3, r3, #32
 80016a4:	2b20      	cmp	r3, #32
 80016a6:	d1d5      	bne.n	8001654 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2210      	movs	r2, #16
 80016ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2220      	movs	r2, #32
 80016b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f7ff fedd 	bl	8001478 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <I2C_IsAcknowledgeFailed+0xc8>)
 80016ca:	400b      	ands	r3, r1
 80016cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f043 0204 	orr.w	r2, r3, #4
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	fe00e800 	.word	0xfe00e800

08001704 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	817b      	strh	r3, [r7, #10]
 8001712:	4613      	mov	r3, r2
 8001714:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	0d5b      	lsrs	r3, r3, #21
 8001720:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <I2C_TransferConfig+0x58>)
 8001726:	430b      	orrs	r3, r1
 8001728:	43db      	mvns	r3, r3
 800172a:	ea02 0103 	and.w	r1, r2, r3
 800172e:	897b      	ldrh	r3, [r7, #10]
 8001730:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001734:	7a7b      	ldrb	r3, [r7, #9]
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	431a      	orrs	r2, r3
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	03ff63ff 	.word	0x03ff63ff

08001760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b20      	cmp	r3, #32
 8001774:	d138      	bne.n	80017e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001780:	2302      	movs	r3, #2
 8001782:	e032      	b.n	80017ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2224      	movs	r2, #36	; 0x24
 8001790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e000      	b.n	80017ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017e8:	2302      	movs	r3, #2
  }
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b20      	cmp	r3, #32
 800180a:	d139      	bne.n	8001880 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001816:	2302      	movs	r3, #2
 8001818:	e033      	b.n	8001882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2224      	movs	r2, #36	; 0x24
 8001826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001848:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	e000      	b.n	8001882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001880:	2302      	movs	r3, #2
  }
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000

080018ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ba:	d130      	bne.n	800191e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c8:	d038      	beq.n	800193c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018d2:	4a1e      	ldr	r2, [pc, #120]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2232      	movs	r2, #50	; 0x32
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0c9b      	lsrs	r3, r3, #18
 80018ec:	3301      	adds	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f0:	e002      	b.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001904:	d102      	bne.n	800190c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f2      	bne.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001918:	d110      	bne.n	800193c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e00f      	b.n	800193e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192a:	d007      	beq.n	800193c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40007000 	.word	0x40007000
 8001950:	20000094 	.word	0x20000094
 8001954:	431bde83 	.word	0x431bde83

08001958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e3d4      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba1      	ldr	r3, [pc, #644]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4b9e      	ldr	r3, [pc, #632]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80e4 	beq.w	8001b54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4a>
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	f040 808b 	bne.w	8001ab0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b01      	cmp	r3, #1
 800199e:	f040 8087 	bne.w	8001ab0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a2:	4b93      	ldr	r3, [pc, #588]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x62>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e3ac      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1a      	ldr	r2, [r3, #32]
 80019be:	4b8c      	ldr	r3, [pc, #560]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_RCC_OscConfig+0x7c>
 80019ca:	4b89      	ldr	r3, [pc, #548]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d2:	e005      	b.n	80019e0 <HAL_RCC_OscConfig+0x88>
 80019d4:	4b86      	ldr	r3, [pc, #536]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d223      	bcs.n	8001a2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fd3f 	bl	800246c <RCC_SetFlashLatencyFromMSIRange>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e38d      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f8:	4b7d      	ldr	r3, [pc, #500]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a7c      	ldr	r2, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b7a      	ldr	r3, [pc, #488]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4977      	ldr	r1, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	4972      	ldr	r1, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
 8001a2a:	e025      	b.n	8001a78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2c:	4b70      	ldr	r3, [pc, #448]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6f      	ldr	r2, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	496a      	ldr	r1, [pc, #424]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4a:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	4965      	ldr	r1, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fcff 	bl	800246c <RCC_SetFlashLatencyFromMSIRange>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e34d      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a78:	f000 fc36 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8001a7c:	4601      	mov	r1, r0
 8001a7e:	4b5c      	ldr	r3, [pc, #368]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	4a5a      	ldr	r2, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x29c>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	fa21 f303 	lsr.w	r3, r1, r3
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_OscConfig+0x2a0>)
 8001a96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a98:	4b58      	ldr	r3, [pc, #352]	; (8001bfc <HAL_RCC_OscConfig+0x2a4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd2b 	bl	80004f8 <HAL_InitTick>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d052      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	e331      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d032      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ab8:	4b4d      	ldr	r3, [pc, #308]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ac4:	f7fe fd68 	bl	8000598 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001acc:	f7fe fd64 	bl	8000598 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e31a      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	493b      	ldr	r1, [pc, #236]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b08:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	4936      	ldr	r1, [pc, #216]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
 8001b1c:	e01a      	b.n	8001b54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b1e:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a33      	ldr	r2, [pc, #204]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b2a:	f7fe fd35 	bl	8000598 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b32:	f7fe fd31 	bl	8000598 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e2e7      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x1da>
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d074      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x21a>
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d10e      	bne.n	8001b8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d10b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d064      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d160      	bne.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e2c4      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x24a>
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e01d      	b.n	8001bde <HAL_RCC_OscConfig+0x286>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x26e>
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0f      	ldr	r2, [pc, #60]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001bb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x286>
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_RCC_OscConfig+0x298>)
 8001bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7fe fcd7 	bl	8000598 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bec:	e011      	b.n	8001c12 <HAL_RCC_OscConfig+0x2ba>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08005890 	.word	0x08005890
 8001bf8:	20000094 	.word	0x20000094
 8001bfc:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7fe fcca 	bl	8000598 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e280      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c12:	4baf      	ldr	r3, [pc, #700]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2a8>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7fe fcba 	bl	8000598 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7fe fcb6 	bl	8000598 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e26c      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3a:	4ba5      	ldr	r3, [pc, #660]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x2d0>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d060      	beq.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_OscConfig+0x310>
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d119      	bne.n	8001c96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d116      	bne.n	8001c96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c68:	4b99      	ldr	r3, [pc, #612]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x328>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e249      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b93      	ldr	r3, [pc, #588]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	4990      	ldr	r1, [pc, #576]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c94:	e040      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d023      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9e:	4b8c      	ldr	r3, [pc, #560]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a8b      	ldr	r2, [pc, #556]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7fe fc75 	bl	8000598 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7fe fc71 	bl	8000598 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e227      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc4:	4b82      	ldr	r3, [pc, #520]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b7f      	ldr	r3, [pc, #508]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	497c      	ldr	r1, [pc, #496]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	e018      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	4b7a      	ldr	r3, [pc, #488]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a79      	ldr	r2, [pc, #484]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fc51 	bl	8000598 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7fe fc4d 	bl	8000598 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e203      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d0c:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d03c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2c:	4b68      	ldr	r3, [pc, #416]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d32:	4a67      	ldr	r2, [pc, #412]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7fe fc2c 	bl	8000598 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7fe fc28 	bl	8000598 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e1de      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d56:	4b5e      	ldr	r3, [pc, #376]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ef      	beq.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
 8001d64:	e01b      	b.n	8001d9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d66:	4b5a      	ldr	r3, [pc, #360]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6c:	4a58      	ldr	r2, [pc, #352]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7fe fc0f 	bl	8000598 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7fe fc0b 	bl	8000598 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1c1      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	4b4f      	ldr	r3, [pc, #316]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ef      	bne.n	8001d7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80a6 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001db0:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	4a43      	ldr	r2, [pc, #268]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc8:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <HAL_RCC_OscConfig+0x57c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d118      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x57c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <HAL_RCC_OscConfig+0x57c>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df0:	f7fe fbd2 	bl	8000598 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7fe fbce 	bl	8000598 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e184      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0a:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <HAL_RCC_OscConfig+0x57c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4d8>
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	4a2a      	ldr	r2, [pc, #168]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2e:	e024      	b.n	8001e7a <HAL_RCC_OscConfig+0x522>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d110      	bne.n	8001e5a <HAL_RCC_OscConfig+0x502>
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e58:	e00f      	b.n	8001e7a <HAL_RCC_OscConfig+0x522>
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e70:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001e72:	f023 0304 	bic.w	r3, r3, #4
 8001e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d016      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7fe fb89 	bl	8000598 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7fe fb85 	bl	8000598 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e139      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0ed      	beq.n	8001e8a <HAL_RCC_OscConfig+0x532>
 8001eae:	e01a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7fe fb72 	bl	8000598 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb6:	e00f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7fe fb6e 	bl	8000598 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d906      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e122      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed8:	4b90      	ldr	r3, [pc, #576]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1e8      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee6:	7ffb      	ldrb	r3, [r7, #31]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	4b8b      	ldr	r3, [pc, #556]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a8a      	ldr	r2, [pc, #552]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8108 	beq.w	8002112 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	f040 80d0 	bne.w	80020ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f0c:	4b83      	ldr	r3, [pc, #524]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d130      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d127      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d11f      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f4c:	2a07      	cmp	r2, #7
 8001f4e:	bf14      	ite	ne
 8001f50:	2201      	movne	r2, #1
 8001f52:	2200      	moveq	r2, #0
 8001f54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d113      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	3b01      	subs	r3, #1
 8001f68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d06e      	beq.n	8002060 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d069      	beq.n	800205c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f88:	4b64      	ldr	r3, [pc, #400]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f94:	4b61      	ldr	r3, [pc, #388]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0b7      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a5c      	ldr	r2, [pc, #368]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8001faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb0:	f7fe faf2 	bl	8000598 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe faee 	bl	8000598 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e0a4      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fca:	4b54      	ldr	r3, [pc, #336]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd6:	4b51      	ldr	r3, [pc, #324]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	4b51      	ldr	r3, [pc, #324]	; (8002120 <HAL_RCC_OscConfig+0x7c8>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	4311      	orrs	r1, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ff0:	0212      	lsls	r2, r2, #8
 8001ff2:	4311      	orrs	r1, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ff8:	0852      	lsrs	r2, r2, #1
 8001ffa:	3a01      	subs	r2, #1
 8001ffc:	0552      	lsls	r2, r2, #21
 8001ffe:	4311      	orrs	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002004:	0852      	lsrs	r2, r2, #1
 8002006:	3a01      	subs	r2, #1
 8002008:	0652      	lsls	r2, r2, #25
 800200a:	4311      	orrs	r1, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002010:	0912      	lsrs	r2, r2, #4
 8002012:	0452      	lsls	r2, r2, #17
 8002014:	430a      	orrs	r2, r1
 8002016:	4941      	ldr	r1, [pc, #260]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8002018:	4313      	orrs	r3, r2
 800201a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800201c:	4b3f      	ldr	r3, [pc, #252]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a3e      	ldr	r2, [pc, #248]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8002022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002026:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002028:	4b3c      	ldr	r3, [pc, #240]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a3b      	ldr	r2, [pc, #236]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 800202e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002032:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002034:	f7fe fab0 	bl	8000598 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7fe faac 	bl	8000598 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e062      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800205a:	e05a      	b.n	8002112 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e059      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002060:	4b2e      	ldr	r3, [pc, #184]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d152      	bne.n	8002112 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800206c:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8002072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002084:	f7fe fa88 	bl	8000598 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fa84 	bl	8000598 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e03a      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x734>
 80020aa:	e032      	b.n	8002112 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d02d      	beq.n	800210e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 80020b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 80020d0:	f023 0303 	bic.w	r3, r3, #3
 80020d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 80020dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7fe fa57 	bl	8000598 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7fe fa53 	bl	8000598 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e009      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_RCC_OscConfig+0x7c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x796>
 800210c:	e001      	b.n	8002112 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	f99d808c 	.word	0xf99d808c

08002124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0c8      	b.n	80022ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <HAL_RCC_ClockConfig+0x1b0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4961      	ldr	r1, [pc, #388]	; (80022d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0b0      	b.n	80022ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d04c      	beq.n	800220e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d107      	bne.n	800218c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217c:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d121      	bne.n	80021cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e09e      	b.n	80022ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002194:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d115      	bne.n	80021cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e092      	b.n	80022ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ac:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e086      	b.n	80022ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021bc:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e07e      	b.n	80022ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 0203 	bic.w	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	493f      	ldr	r1, [pc, #252]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021de:	f7fe f9db 	bl	8000598 <HAL_GetTick>
 80021e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e6:	f7fe f9d7 	bl	8000598 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e066      	b.n	80022ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fc:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 020c 	and.w	r2, r3, #12
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	429a      	cmp	r2, r3
 800220c:	d1eb      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221a:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	492c      	ldr	r1, [pc, #176]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_RCC_ClockConfig+0x1b0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d210      	bcs.n	800225c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_RCC_ClockConfig+0x1b0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4924      	ldr	r1, [pc, #144]	; (80022d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <HAL_RCC_ClockConfig+0x1b0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e036      	b.n	80022ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4918      	ldr	r1, [pc, #96]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4910      	ldr	r1, [pc, #64]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800229a:	f000 f825 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 800229e:	4601      	mov	r1, r0
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_RCC_ClockConfig+0x1b4>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	fa21 f303 	lsr.w	r3, r1, r3
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f91a 	bl	80004f8 <HAL_InitTick>
 80022c4:	4603      	mov	r3, r0
 80022c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80022c8:	7afb      	ldrb	r3, [r7, #11]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08005890 	.word	0x08005890
 80022e0:	20000094 	.word	0x20000094
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <HAL_RCC_GetSysClockFreq+0x104>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002300:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <HAL_RCC_GetSysClockFreq+0x104>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x34>
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d121      	bne.n	800235a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d11e      	bne.n	800235a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800231c:	4b33      	ldr	r3, [pc, #204]	; (80023ec <HAL_RCC_GetSysClockFreq+0x104>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d107      	bne.n	8002338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002328:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_RCC_GetSysClockFreq+0x104>)
 800232a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	e005      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002338:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_RCC_GetSysClockFreq+0x104>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002344:	4a2a      	ldr	r2, [pc, #168]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10d      	bne.n	8002370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d102      	bne.n	8002366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	e004      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d101      	bne.n	8002370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800236e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d133      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_GetSysClockFreq+0x104>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0xa4>
 8002386:	2b03      	cmp	r3, #3
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0xaa>
 800238a:	e005      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800238e:	617b      	str	r3, [r7, #20]
      break;
 8002390:	e005      	b.n	800239e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002394:	617b      	str	r3, [r7, #20]
      break;
 8002396:	e002      	b.n	800239e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	617b      	str	r3, [r7, #20]
      break;
 800239c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_GetSysClockFreq+0x104>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	3301      	adds	r3, #1
 80023aa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_RCC_GetSysClockFreq+0x104>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	fb02 f203 	mul.w	r2, r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_GetSysClockFreq+0x104>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0e5b      	lsrs	r3, r3, #25
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	3301      	adds	r3, #1
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023de:	69bb      	ldr	r3, [r7, #24]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3724      	adds	r7, #36	; 0x24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40021000 	.word	0x40021000
 80023f0:	080058a8 	.word	0x080058a8
 80023f4:	00f42400 	.word	0x00f42400
 80023f8:	007a1200 	.word	0x007a1200

080023fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_RCC_GetHCLKFreq+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000094 	.word	0x20000094

08002414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002418:	f7ff fff0 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 800241c:	4601      	mov	r1, r0
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4a04      	ldr	r2, [pc, #16]	; (800243c <HAL_RCC_GetPCLK1Freq+0x28>)
 800242a:	5cd3      	ldrb	r3, [r2, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	080058a0 	.word	0x080058a0

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002444:	f7ff ffda 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002448:	4601      	mov	r1, r0
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0adb      	lsrs	r3, r3, #11
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	080058a0 	.word	0x080058a0

0800246c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002478:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002484:	f7ff fa04 	bl	8001890 <HAL_PWREx_GetVoltageRange>
 8002488:	6178      	str	r0, [r7, #20]
 800248a:	e014      	b.n	80024b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	4a24      	ldr	r2, [pc, #144]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	6593      	str	r3, [r2, #88]	; 0x58
 8002498:	4b22      	ldr	r3, [pc, #136]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024a4:	f7ff f9f4 	bl	8001890 <HAL_PWREx_GetVoltageRange>
 80024a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	4a1d      	ldr	r2, [pc, #116]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024bc:	d10b      	bne.n	80024d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b80      	cmp	r3, #128	; 0x80
 80024c2:	d919      	bls.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2ba0      	cmp	r3, #160	; 0xa0
 80024c8:	d902      	bls.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024ca:	2302      	movs	r3, #2
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	e013      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024d0:	2301      	movs	r3, #1
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	e010      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b80      	cmp	r3, #128	; 0x80
 80024da:	d902      	bls.n	80024e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024dc:	2303      	movs	r3, #3
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	e00a      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b80      	cmp	r3, #128	; 0x80
 80024e6:	d102      	bne.n	80024ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024e8:	2302      	movs	r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	e004      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d101      	bne.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024f4:	2301      	movs	r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 0207 	bic.w	r2, r3, #7
 8002500:	4909      	ldr	r1, [pc, #36]	; (8002528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	40022000 	.word	0x40022000

0800252c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002534:	2300      	movs	r3, #0
 8002536:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002538:	2300      	movs	r3, #0
 800253a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03f      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800254c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002550:	d01c      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002556:	d802      	bhi.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00e      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800255c:	e01f      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800255e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002562:	d003      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002564:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002568:	d01c      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800256a:	e018      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800256c:	4b85      	ldr	r3, [pc, #532]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a84      	ldr	r2, [pc, #528]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002576:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002578:	e015      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fab9 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800258a:	e00c      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3320      	adds	r3, #32
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fba0 	bl	8002cd8 <RCCEx_PLLSAI2_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800259c:	e003      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	74fb      	strb	r3, [r7, #19]
      break;
 80025a2:	e000      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80025a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ac:	4b75      	ldr	r3, [pc, #468]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ba:	4972      	ldr	r1, [pc, #456]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025c2:	e001      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d03f      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025dc:	d01c      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e2:	d802      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80025e8:	e01f      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ee:	d003      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80025f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025f4:	d01c      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80025f6:	e018      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f8:	4b62      	ldr	r3, [pc, #392]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a61      	ldr	r2, [pc, #388]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002604:	e015      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fa73 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002616:	e00c      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3320      	adds	r3, #32
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fb5a 	bl	8002cd8 <RCCEx_PLLSAI2_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002628:	e003      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	74fb      	strb	r3, [r7, #19]
      break;
 800262e:	e000      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002638:	4b52      	ldr	r3, [pc, #328]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002646:	494f      	ldr	r1, [pc, #316]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800264e:	e001      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a0 	beq.w	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002676:	2300      	movs	r3, #0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	4a40      	ldr	r2, [pc, #256]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002686:	6593      	str	r3, [r2, #88]	; 0x58
 8002688:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002694:	2301      	movs	r3, #1
 8002696:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a4:	f7fd ff78 	bl	8000598 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026aa:	e009      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7fd ff74 	bl	8000598 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d902      	bls.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	74fb      	strb	r3, [r7, #19]
        break;
 80026be:	e005      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ef      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d15c      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026d2:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01f      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d019      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	4a20      	ldr	r2, [pc, #128]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fd ff33 	bl	8000598 <HAL_GetTick>
 8002732:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002734:	e00b      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fd ff2f 	bl	8000598 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d902      	bls.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	74fb      	strb	r3, [r7, #19]
            break;
 800274c:	e006      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ec      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002772:	4904      	ldr	r1, [pc, #16]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800277a:	e009      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	74bb      	strb	r3, [r7, #18]
 8002780:	e006      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002790:	7c7b      	ldrb	r3, [r7, #17]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b9e      	ldr	r3, [pc, #632]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	4a9d      	ldr	r2, [pc, #628]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ae:	4b98      	ldr	r3, [pc, #608]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b4:	f023 0203 	bic.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	4994      	ldr	r1, [pc, #592]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d0:	4b8f      	ldr	r3, [pc, #572]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 020c 	bic.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	498c      	ldr	r1, [pc, #560]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027f2:	4b87      	ldr	r3, [pc, #540]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	4983      	ldr	r1, [pc, #524]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	497b      	ldr	r1, [pc, #492]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002836:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002844:	4972      	ldr	r1, [pc, #456]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002858:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	496a      	ldr	r1, [pc, #424]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	4961      	ldr	r1, [pc, #388]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800289c:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	4959      	ldr	r1, [pc, #356]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028be:	4b54      	ldr	r3, [pc, #336]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028cc:	4950      	ldr	r1, [pc, #320]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028e0:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	4948      	ldr	r1, [pc, #288]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002902:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	493f      	ldr	r1, [pc, #252]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d028      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002924:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002932:	4937      	ldr	r1, [pc, #220]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002942:	d106      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002944:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a31      	ldr	r2, [pc, #196]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800294a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294e:	60d3      	str	r3, [r2, #12]
 8002950:	e011      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002956:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800295a:	d10c      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	2101      	movs	r1, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f8c8 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d028      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	491f      	ldr	r1, [pc, #124]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a0:	d106      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ac:	60d3      	str	r3, [r2, #12]
 80029ae:	e011      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 f899 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d02b      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	4908      	ldr	r1, [pc, #32]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029fe:	d109      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a02      	ldr	r2, [pc, #8]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a0a:	60d3      	str	r3, [r2, #12]
 8002a0c:	e014      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2101      	movs	r1, #1
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 f867 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d02f      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a44:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a52:	4928      	ldr	r1, [pc, #160]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a62:	d10d      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f844 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 8002a70:	4603      	mov	r3, r0
 8002a72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d014      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	74bb      	strb	r3, [r7, #18]
 8002a7e:	e011      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3320      	adds	r3, #32
 8002a8e:	2102      	movs	r1, #2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f921 	bl	8002cd8 <RCCEx_PLLSAI2_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002abe:	490d      	ldr	r1, [pc, #52]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae2:	4904      	ldr	r1, [pc, #16]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aea:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000

08002af8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b06:	4b73      	ldr	r3, [pc, #460]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d018      	beq.n	8002b44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b12:	4b70      	ldr	r3, [pc, #448]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0203 	and.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d10d      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
       ||
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b2a:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
       ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d044      	beq.n	8002bc8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	e041      	b.n	8002bc8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d00c      	beq.n	8002b66 <RCCEx_PLLSAI1_Config+0x6e>
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d013      	beq.n	8002b78 <RCCEx_PLLSAI1_Config+0x80>
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d120      	bne.n	8002b96 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b54:	4b5f      	ldr	r3, [pc, #380]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11d      	bne.n	8002b9c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b64:	e01a      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b66:	4b5b      	ldr	r3, [pc, #364]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b76:	e013      	b.n	8002ba0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b78:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10f      	bne.n	8002ba4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b84:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b94:	e006      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9a:	e004      	b.n	8002ba6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b9c:	bf00      	nop
 8002b9e:	e002      	b.n	8002ba6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ba0:	bf00      	nop
 8002ba2:	e000      	b.n	8002ba6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ba4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bac:	4b49      	ldr	r3, [pc, #292]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6819      	ldr	r1, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	4944      	ldr	r1, [pc, #272]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d17d      	bne.n	8002cca <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a40      	ldr	r2, [pc, #256]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bda:	f7fd fcdd 	bl	8000598 <HAL_GetTick>
 8002bde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002be0:	e009      	b.n	8002bf6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002be2:	f7fd fcd9 	bl	8000598 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d902      	bls.n	8002bf6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	73fb      	strb	r3, [r7, #15]
        break;
 8002bf4:	e005      	b.n	8002c02 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bf6:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ef      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d160      	bne.n	8002cca <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d111      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c0e:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6892      	ldr	r2, [r2, #8]
 8002c1e:	0211      	lsls	r1, r2, #8
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68d2      	ldr	r2, [r2, #12]
 8002c24:	0912      	lsrs	r2, r2, #4
 8002c26:	0452      	lsls	r2, r2, #17
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	492a      	ldr	r1, [pc, #168]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	610b      	str	r3, [r1, #16]
 8002c30:	e027      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d112      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c38:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	0211      	lsls	r1, r2, #8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6912      	ldr	r2, [r2, #16]
 8002c4e:	0852      	lsrs	r2, r2, #1
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0552      	lsls	r2, r2, #21
 8002c54:	430a      	orrs	r2, r1
 8002c56:	491f      	ldr	r1, [pc, #124]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	610b      	str	r3, [r1, #16]
 8002c5c:	e011      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6892      	ldr	r2, [r2, #8]
 8002c6e:	0211      	lsls	r1, r2, #8
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6952      	ldr	r2, [r2, #20]
 8002c74:	0852      	lsrs	r2, r2, #1
 8002c76:	3a01      	subs	r2, #1
 8002c78:	0652      	lsls	r2, r2, #25
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	4915      	ldr	r1, [pc, #84]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c82:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fd fc83 	bl	8000598 <HAL_GetTick>
 8002c92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c94:	e009      	b.n	8002caa <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c96:	f7fd fc7f 	bl	8000598 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d902      	bls.n	8002caa <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	73fb      	strb	r3, [r7, #15]
          break;
 8002ca8:	e005      	b.n	8002cb6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ef      	beq.n	8002c96 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ce6:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d018      	beq.n	8002d24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cf2:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d10d      	bne.n	8002d1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
       ||
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d0a:	4b5f      	ldr	r3, [pc, #380]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
       ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d044      	beq.n	8002da8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e041      	b.n	8002da8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d00c      	beq.n	8002d46 <RCCEx_PLLSAI2_Config+0x6e>
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d013      	beq.n	8002d58 <RCCEx_PLLSAI2_Config+0x80>
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d120      	bne.n	8002d76 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d34:	4b54      	ldr	r3, [pc, #336]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11d      	bne.n	8002d7c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d44:	e01a      	b.n	8002d7c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d46:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d56:	e013      	b.n	8002d80 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d58:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10f      	bne.n	8002d84 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d64:	4b48      	ldr	r3, [pc, #288]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d74:	e006      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7a:	e004      	b.n	8002d86 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d7c:	bf00      	nop
 8002d7e:	e002      	b.n	8002d86 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d80:	bf00      	nop
 8002d82:	e000      	b.n	8002d86 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d84:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d8c:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	430b      	orrs	r3, r1
 8002da2:	4939      	ldr	r1, [pc, #228]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d167      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dae:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a35      	ldr	r2, [pc, #212]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dba:	f7fd fbed 	bl	8000598 <HAL_GetTick>
 8002dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dc0:	e009      	b.n	8002dd6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dc2:	f7fd fbe9 	bl	8000598 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d902      	bls.n	8002dd6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	73fb      	strb	r3, [r7, #15]
        break;
 8002dd4:	e005      	b.n	8002de2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dd6:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ef      	bne.n	8002dc2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d14a      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d111      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6892      	ldr	r2, [r2, #8]
 8002dfe:	0211      	lsls	r1, r2, #8
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68d2      	ldr	r2, [r2, #12]
 8002e04:	0912      	lsrs	r2, r2, #4
 8002e06:	0452      	lsls	r2, r2, #17
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	491f      	ldr	r1, [pc, #124]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	614b      	str	r3, [r1, #20]
 8002e10:	e011      	b.n	8002e36 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6892      	ldr	r2, [r2, #8]
 8002e22:	0211      	lsls	r1, r2, #8
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6912      	ldr	r2, [r2, #16]
 8002e28:	0852      	lsrs	r2, r2, #1
 8002e2a:	3a01      	subs	r2, #1
 8002e2c:	0652      	lsls	r2, r2, #25
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	4915      	ldr	r1, [pc, #84]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e42:	f7fd fba9 	bl	8000598 <HAL_GetTick>
 8002e46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e48:	e009      	b.n	8002e5e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e4a:	f7fd fba5 	bl	8000598 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d902      	bls.n	8002e5e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e5c:	e005      	b.n	8002e6a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0ef      	beq.n	8002e4a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	4903      	ldr	r1, [pc, #12]	; (8002e88 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000

08002e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e049      	b.n	8002f32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f002 fb98 	bl	80055e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 faa6 	bl	800341c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d001      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e04f      	b.n	8002ff4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a23      	ldr	r2, [pc, #140]	; (8003000 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01d      	beq.n	8002fb2 <HAL_TIM_Base_Start_IT+0x76>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d018      	beq.n	8002fb2 <HAL_TIM_Base_Start_IT+0x76>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1f      	ldr	r2, [pc, #124]	; (8003004 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_TIM_Base_Start_IT+0x76>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00e      	beq.n	8002fb2 <HAL_TIM_Base_Start_IT+0x76>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1c      	ldr	r2, [pc, #112]	; (800300c <HAL_TIM_Base_Start_IT+0xd0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_TIM_Base_Start_IT+0x76>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_TIM_Base_Start_IT+0x76>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a19      	ldr	r2, [pc, #100]	; (8003014 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d115      	bne.n	8002fde <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4b17      	ldr	r3, [pc, #92]	; (8003018 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b06      	cmp	r3, #6
 8002fc2:	d015      	beq.n	8002ff0 <HAL_TIM_Base_Start_IT+0xb4>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fca:	d011      	beq.n	8002ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fdc:	e008      	b.n	8002ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e000      	b.n	8002ff2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40000c00 	.word	0x40000c00
 8003010:	40013400 	.word	0x40013400
 8003014:	40014000 	.word	0x40014000
 8003018:	00010007 	.word	0x00010007

0800301c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b02      	cmp	r3, #2
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0202 	mvn.w	r2, #2
 8003048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9be 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f9b0 	bl	80033cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f9c1 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b04      	cmp	r3, #4
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0204 	mvn.w	r2, #4
 800309c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f994 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f986 	bl	80033cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f997 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0208 	mvn.w	r2, #8
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2204      	movs	r2, #4
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f96a 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f95c 	bl	80033cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f96d 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b10      	cmp	r3, #16
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b10      	cmp	r3, #16
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0210 	mvn.w	r2, #16
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2208      	movs	r2, #8
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f940 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f932 	bl	80033cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f943 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d10e      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0201 	mvn.w	r2, #1
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f001 fd38 	bl	8004c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d10e      	bne.n	80031cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d107      	bne.n	80031cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 faee 	bl	80037a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031da:	d10e      	bne.n	80031fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d107      	bne.n	80031fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fae1 	bl	80037bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d10e      	bne.n	8003226 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d107      	bne.n	8003226 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800321e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8f1 	bl	8003408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b20      	cmp	r3, #32
 8003232:	d10e      	bne.n	8003252 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b20      	cmp	r3, #32
 8003240:	d107      	bne.n	8003252 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f06f 0220 	mvn.w	r2, #32
 800324a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 faa1 	bl	8003794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_TIM_ConfigClockSource+0x18>
 800326e:	2302      	movs	r3, #2
 8003270:	e0a8      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x16a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003290:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003294:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800329c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b40      	cmp	r3, #64	; 0x40
 80032ac:	d067      	beq.n	800337e <HAL_TIM_ConfigClockSource+0x124>
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d80b      	bhi.n	80032ca <HAL_TIM_ConfigClockSource+0x70>
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d073      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x144>
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d802      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x66>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d06f      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032be:	e078      	b.n	80033b2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d06c      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x144>
 80032c4:	2b30      	cmp	r3, #48	; 0x30
 80032c6:	d06a      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x144>
      break;
 80032c8:	e073      	b.n	80033b2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80032ca:	2b70      	cmp	r3, #112	; 0x70
 80032cc:	d00d      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x90>
 80032ce:	2b70      	cmp	r3, #112	; 0x70
 80032d0:	d804      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x82>
 80032d2:	2b50      	cmp	r3, #80	; 0x50
 80032d4:	d033      	beq.n	800333e <HAL_TIM_ConfigClockSource+0xe4>
 80032d6:	2b60      	cmp	r3, #96	; 0x60
 80032d8:	d041      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80032da:	e06a      	b.n	80033b2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	d066      	beq.n	80033b0 <HAL_TIM_ConfigClockSource+0x156>
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e6:	d017      	beq.n	8003318 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80032e8:	e063      	b.n	80033b2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6899      	ldr	r1, [r3, #8]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f000 f9a3 	bl	8003644 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800330c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	609a      	str	r2, [r3, #8]
      break;
 8003316:	e04c      	b.n	80033b2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6899      	ldr	r1, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f000 f98c 	bl	8003644 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800333a:	609a      	str	r2, [r3, #8]
      break;
 800333c:	e039      	b.n	80033b2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	461a      	mov	r2, r3
 800334c:	f000 f900 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2150      	movs	r1, #80	; 0x50
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f959 	bl	800360e <TIM_ITRx_SetConfig>
      break;
 800335c:	e029      	b.n	80033b2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	461a      	mov	r2, r3
 800336c:	f000 f91f 	bl	80035ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2160      	movs	r1, #96	; 0x60
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f949 	bl	800360e <TIM_ITRx_SetConfig>
      break;
 800337c:	e019      	b.n	80033b2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	461a      	mov	r2, r3
 800338c:	f000 f8e0 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2140      	movs	r1, #64	; 0x40
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f939 	bl	800360e <TIM_ITRx_SetConfig>
      break;
 800339c:	e009      	b.n	80033b2 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f000 f930 	bl	800360e <TIM_ITRx_SetConfig>
        break;
 80033ae:	e000      	b.n	80033b2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80033b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a40      	ldr	r2, [pc, #256]	; (8003530 <TIM_Base_SetConfig+0x114>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343a:	d00f      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a3d      	ldr	r2, [pc, #244]	; (8003534 <TIM_Base_SetConfig+0x118>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00b      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3c      	ldr	r2, [pc, #240]	; (8003538 <TIM_Base_SetConfig+0x11c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3b      	ldr	r2, [pc, #236]	; (800353c <TIM_Base_SetConfig+0x120>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3a      	ldr	r2, [pc, #232]	; (8003540 <TIM_Base_SetConfig+0x124>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d108      	bne.n	800346e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2f      	ldr	r2, [pc, #188]	; (8003530 <TIM_Base_SetConfig+0x114>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01f      	beq.n	80034b6 <TIM_Base_SetConfig+0x9a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347c:	d01b      	beq.n	80034b6 <TIM_Base_SetConfig+0x9a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2c      	ldr	r2, [pc, #176]	; (8003534 <TIM_Base_SetConfig+0x118>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d017      	beq.n	80034b6 <TIM_Base_SetConfig+0x9a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a2b      	ldr	r2, [pc, #172]	; (8003538 <TIM_Base_SetConfig+0x11c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <TIM_Base_SetConfig+0x9a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2a      	ldr	r2, [pc, #168]	; (800353c <TIM_Base_SetConfig+0x120>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00f      	beq.n	80034b6 <TIM_Base_SetConfig+0x9a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a29      	ldr	r2, [pc, #164]	; (8003540 <TIM_Base_SetConfig+0x124>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00b      	beq.n	80034b6 <TIM_Base_SetConfig+0x9a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a28      	ldr	r2, [pc, #160]	; (8003544 <TIM_Base_SetConfig+0x128>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <TIM_Base_SetConfig+0x9a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a27      	ldr	r2, [pc, #156]	; (8003548 <TIM_Base_SetConfig+0x12c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_Base_SetConfig+0x9a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a26      	ldr	r2, [pc, #152]	; (800354c <TIM_Base_SetConfig+0x130>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d108      	bne.n	80034c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a10      	ldr	r2, [pc, #64]	; (8003530 <TIM_Base_SetConfig+0x114>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00f      	beq.n	8003514 <TIM_Base_SetConfig+0xf8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <TIM_Base_SetConfig+0x124>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00b      	beq.n	8003514 <TIM_Base_SetConfig+0xf8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a11      	ldr	r2, [pc, #68]	; (8003544 <TIM_Base_SetConfig+0x128>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d007      	beq.n	8003514 <TIM_Base_SetConfig+0xf8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a10      	ldr	r2, [pc, #64]	; (8003548 <TIM_Base_SetConfig+0x12c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_Base_SetConfig+0xf8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a0f      	ldr	r2, [pc, #60]	; (800354c <TIM_Base_SetConfig+0x130>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d103      	bne.n	800351c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	615a      	str	r2, [r3, #20]
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40012c00 	.word	0x40012c00
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800
 800353c:	40000c00 	.word	0x40000c00
 8003540:	40013400 	.word	0x40013400
 8003544:	40014000 	.word	0x40014000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800

08003550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 030a 	bic.w	r3, r3, #10
 800358c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b087      	sub	sp, #28
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f023 0210 	bic.w	r2, r3, #16
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	031b      	lsls	r3, r3, #12
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800360e:	b480      	push	{r7}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	f043 0307 	orr.w	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800365e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	021a      	lsls	r2, r3, #8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	431a      	orrs	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003698:	2302      	movs	r3, #2
 800369a:	e068      	b.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2e      	ldr	r2, [pc, #184]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d004      	beq.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2d      	ldr	r2, [pc, #180]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d108      	bne.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01d      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370e:	d018      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1a      	ldr	r2, [pc, #104]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a18      	ldr	r2, [pc, #96]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a13      	ldr	r2, [pc, #76]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10c      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	4313      	orrs	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40013400 	.word	0x40013400
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40000c00 	.word	0x40000c00
 8003790:	40014000 	.word	0x40014000

08003794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e040      	b.n	8003864 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f001 ff1c 	bl	8005630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	; 0x24
 80037fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f8c0 	bl	8003994 <UART_SetConfig>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e022      	b.n	8003864 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fb3e 	bl	8003ea8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800384a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fbc5 	bl	8003fec <UART_CheckIdleState>
 8003862:	4603      	mov	r3, r0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	2b20      	cmp	r3, #32
 8003882:	f040 8081 	bne.w	8003988 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_UART_Transmit+0x26>
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e079      	b.n	800398a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_UART_Transmit+0x38>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e072      	b.n	800398a <HAL_UART_Transmit+0x11e>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2221      	movs	r2, #33	; 0x21
 80038b6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80038b8:	f7fc fe6e 	bl	8000598 <HAL_GetTick>
 80038bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	88fa      	ldrh	r2, [r7, #6]
 80038ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d6:	d108      	bne.n	80038ea <HAL_UART_Transmit+0x7e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	e003      	b.n	80038f2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80038fa:	e02d      	b.n	8003958 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2200      	movs	r2, #0
 8003904:	2180      	movs	r1, #128	; 0x80
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fbb5 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e039      	b.n	800398a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	881a      	ldrh	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003928:	b292      	uxth	r2, r2
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	3302      	adds	r3, #2
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e008      	b.n	8003946 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	781a      	ldrb	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	b292      	uxth	r2, r2
 800393e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	3301      	adds	r3, #1
 8003944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1cb      	bne.n	80038fc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2200      	movs	r2, #0
 800396c:	2140      	movs	r1, #64	; 0x40
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fb81 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e005      	b.n	800398a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003994:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003998:	b088      	sub	sp, #32
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4bac      	ldr	r3, [pc, #688]	; (8003c74 <UART_SetConfig+0x2e0>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	69f9      	ldr	r1, [r7, #28]
 80039ca:	430b      	orrs	r3, r1
 80039cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4aa2      	ldr	r2, [pc, #648]	; (8003c78 <UART_SetConfig+0x2e4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a99      	ldr	r2, [pc, #612]	; (8003c7c <UART_SetConfig+0x2e8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d121      	bne.n	8003a60 <UART_SetConfig+0xcc>
 8003a1c:	4b98      	ldr	r3, [pc, #608]	; (8003c80 <UART_SetConfig+0x2ec>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d816      	bhi.n	8003a58 <UART_SetConfig+0xc4>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <UART_SetConfig+0x9c>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a4d 	.word	0x08003a4d
 8003a38:	08003a47 	.word	0x08003a47
 8003a3c:	08003a53 	.word	0x08003a53
 8003a40:	2301      	movs	r3, #1
 8003a42:	76fb      	strb	r3, [r7, #27]
 8003a44:	e0e8      	b.n	8003c18 <UART_SetConfig+0x284>
 8003a46:	2302      	movs	r3, #2
 8003a48:	76fb      	strb	r3, [r7, #27]
 8003a4a:	e0e5      	b.n	8003c18 <UART_SetConfig+0x284>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	76fb      	strb	r3, [r7, #27]
 8003a50:	e0e2      	b.n	8003c18 <UART_SetConfig+0x284>
 8003a52:	2308      	movs	r3, #8
 8003a54:	76fb      	strb	r3, [r7, #27]
 8003a56:	e0df      	b.n	8003c18 <UART_SetConfig+0x284>
 8003a58:	2310      	movs	r3, #16
 8003a5a:	76fb      	strb	r3, [r7, #27]
 8003a5c:	bf00      	nop
 8003a5e:	e0db      	b.n	8003c18 <UART_SetConfig+0x284>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a87      	ldr	r2, [pc, #540]	; (8003c84 <UART_SetConfig+0x2f0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d134      	bne.n	8003ad4 <UART_SetConfig+0x140>
 8003a6a:	4b85      	ldr	r3, [pc, #532]	; (8003c80 <UART_SetConfig+0x2ec>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	d829      	bhi.n	8003acc <UART_SetConfig+0x138>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <UART_SetConfig+0xec>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003acd 	.word	0x08003acd
 8003a88:	08003acd 	.word	0x08003acd
 8003a8c:	08003acd 	.word	0x08003acd
 8003a90:	08003ac1 	.word	0x08003ac1
 8003a94:	08003acd 	.word	0x08003acd
 8003a98:	08003acd 	.word	0x08003acd
 8003a9c:	08003acd 	.word	0x08003acd
 8003aa0:	08003abb 	.word	0x08003abb
 8003aa4:	08003acd 	.word	0x08003acd
 8003aa8:	08003acd 	.word	0x08003acd
 8003aac:	08003acd 	.word	0x08003acd
 8003ab0:	08003ac7 	.word	0x08003ac7
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	76fb      	strb	r3, [r7, #27]
 8003ab8:	e0ae      	b.n	8003c18 <UART_SetConfig+0x284>
 8003aba:	2302      	movs	r3, #2
 8003abc:	76fb      	strb	r3, [r7, #27]
 8003abe:	e0ab      	b.n	8003c18 <UART_SetConfig+0x284>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e0a8      	b.n	8003c18 <UART_SetConfig+0x284>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	76fb      	strb	r3, [r7, #27]
 8003aca:	e0a5      	b.n	8003c18 <UART_SetConfig+0x284>
 8003acc:	2310      	movs	r3, #16
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	bf00      	nop
 8003ad2:	e0a1      	b.n	8003c18 <UART_SetConfig+0x284>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6b      	ldr	r2, [pc, #428]	; (8003c88 <UART_SetConfig+0x2f4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d120      	bne.n	8003b20 <UART_SetConfig+0x18c>
 8003ade:	4b68      	ldr	r3, [pc, #416]	; (8003c80 <UART_SetConfig+0x2ec>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d00f      	beq.n	8003b0c <UART_SetConfig+0x178>
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d802      	bhi.n	8003af6 <UART_SetConfig+0x162>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <UART_SetConfig+0x16c>
 8003af4:	e010      	b.n	8003b18 <UART_SetConfig+0x184>
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d005      	beq.n	8003b06 <UART_SetConfig+0x172>
 8003afa:	2b30      	cmp	r3, #48	; 0x30
 8003afc:	d009      	beq.n	8003b12 <UART_SetConfig+0x17e>
 8003afe:	e00b      	b.n	8003b18 <UART_SetConfig+0x184>
 8003b00:	2300      	movs	r3, #0
 8003b02:	76fb      	strb	r3, [r7, #27]
 8003b04:	e088      	b.n	8003c18 <UART_SetConfig+0x284>
 8003b06:	2302      	movs	r3, #2
 8003b08:	76fb      	strb	r3, [r7, #27]
 8003b0a:	e085      	b.n	8003c18 <UART_SetConfig+0x284>
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	76fb      	strb	r3, [r7, #27]
 8003b10:	e082      	b.n	8003c18 <UART_SetConfig+0x284>
 8003b12:	2308      	movs	r3, #8
 8003b14:	76fb      	strb	r3, [r7, #27]
 8003b16:	e07f      	b.n	8003c18 <UART_SetConfig+0x284>
 8003b18:	2310      	movs	r3, #16
 8003b1a:	76fb      	strb	r3, [r7, #27]
 8003b1c:	bf00      	nop
 8003b1e:	e07b      	b.n	8003c18 <UART_SetConfig+0x284>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a59      	ldr	r2, [pc, #356]	; (8003c8c <UART_SetConfig+0x2f8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d120      	bne.n	8003b6c <UART_SetConfig+0x1d8>
 8003b2a:	4b55      	ldr	r3, [pc, #340]	; (8003c80 <UART_SetConfig+0x2ec>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d00f      	beq.n	8003b58 <UART_SetConfig+0x1c4>
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d802      	bhi.n	8003b42 <UART_SetConfig+0x1ae>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <UART_SetConfig+0x1b8>
 8003b40:	e010      	b.n	8003b64 <UART_SetConfig+0x1d0>
 8003b42:	2b80      	cmp	r3, #128	; 0x80
 8003b44:	d005      	beq.n	8003b52 <UART_SetConfig+0x1be>
 8003b46:	2bc0      	cmp	r3, #192	; 0xc0
 8003b48:	d009      	beq.n	8003b5e <UART_SetConfig+0x1ca>
 8003b4a:	e00b      	b.n	8003b64 <UART_SetConfig+0x1d0>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	76fb      	strb	r3, [r7, #27]
 8003b50:	e062      	b.n	8003c18 <UART_SetConfig+0x284>
 8003b52:	2302      	movs	r3, #2
 8003b54:	76fb      	strb	r3, [r7, #27]
 8003b56:	e05f      	b.n	8003c18 <UART_SetConfig+0x284>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	76fb      	strb	r3, [r7, #27]
 8003b5c:	e05c      	b.n	8003c18 <UART_SetConfig+0x284>
 8003b5e:	2308      	movs	r3, #8
 8003b60:	76fb      	strb	r3, [r7, #27]
 8003b62:	e059      	b.n	8003c18 <UART_SetConfig+0x284>
 8003b64:	2310      	movs	r3, #16
 8003b66:	76fb      	strb	r3, [r7, #27]
 8003b68:	bf00      	nop
 8003b6a:	e055      	b.n	8003c18 <UART_SetConfig+0x284>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a47      	ldr	r2, [pc, #284]	; (8003c90 <UART_SetConfig+0x2fc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d124      	bne.n	8003bc0 <UART_SetConfig+0x22c>
 8003b76:	4b42      	ldr	r3, [pc, #264]	; (8003c80 <UART_SetConfig+0x2ec>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b84:	d012      	beq.n	8003bac <UART_SetConfig+0x218>
 8003b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8a:	d802      	bhi.n	8003b92 <UART_SetConfig+0x1fe>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <UART_SetConfig+0x20c>
 8003b90:	e012      	b.n	8003bb8 <UART_SetConfig+0x224>
 8003b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b96:	d006      	beq.n	8003ba6 <UART_SetConfig+0x212>
 8003b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9c:	d009      	beq.n	8003bb2 <UART_SetConfig+0x21e>
 8003b9e:	e00b      	b.n	8003bb8 <UART_SetConfig+0x224>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	76fb      	strb	r3, [r7, #27]
 8003ba4:	e038      	b.n	8003c18 <UART_SetConfig+0x284>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	76fb      	strb	r3, [r7, #27]
 8003baa:	e035      	b.n	8003c18 <UART_SetConfig+0x284>
 8003bac:	2304      	movs	r3, #4
 8003bae:	76fb      	strb	r3, [r7, #27]
 8003bb0:	e032      	b.n	8003c18 <UART_SetConfig+0x284>
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	76fb      	strb	r3, [r7, #27]
 8003bb6:	e02f      	b.n	8003c18 <UART_SetConfig+0x284>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	76fb      	strb	r3, [r7, #27]
 8003bbc:	bf00      	nop
 8003bbe:	e02b      	b.n	8003c18 <UART_SetConfig+0x284>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2c      	ldr	r2, [pc, #176]	; (8003c78 <UART_SetConfig+0x2e4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d124      	bne.n	8003c14 <UART_SetConfig+0x280>
 8003bca:	4b2d      	ldr	r3, [pc, #180]	; (8003c80 <UART_SetConfig+0x2ec>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd8:	d012      	beq.n	8003c00 <UART_SetConfig+0x26c>
 8003bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bde:	d802      	bhi.n	8003be6 <UART_SetConfig+0x252>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <UART_SetConfig+0x260>
 8003be4:	e012      	b.n	8003c0c <UART_SetConfig+0x278>
 8003be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bea:	d006      	beq.n	8003bfa <UART_SetConfig+0x266>
 8003bec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bf0:	d009      	beq.n	8003c06 <UART_SetConfig+0x272>
 8003bf2:	e00b      	b.n	8003c0c <UART_SetConfig+0x278>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	76fb      	strb	r3, [r7, #27]
 8003bf8:	e00e      	b.n	8003c18 <UART_SetConfig+0x284>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	76fb      	strb	r3, [r7, #27]
 8003bfe:	e00b      	b.n	8003c18 <UART_SetConfig+0x284>
 8003c00:	2304      	movs	r3, #4
 8003c02:	76fb      	strb	r3, [r7, #27]
 8003c04:	e008      	b.n	8003c18 <UART_SetConfig+0x284>
 8003c06:	2308      	movs	r3, #8
 8003c08:	76fb      	strb	r3, [r7, #27]
 8003c0a:	e005      	b.n	8003c18 <UART_SetConfig+0x284>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	76fb      	strb	r3, [r7, #27]
 8003c10:	bf00      	nop
 8003c12:	e001      	b.n	8003c18 <UART_SetConfig+0x284>
 8003c14:	2310      	movs	r3, #16
 8003c16:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <UART_SetConfig+0x2e4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	f040 8087 	bne.w	8003d32 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c24:	7efb      	ldrb	r3, [r7, #27]
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d836      	bhi.n	8003c98 <UART_SetConfig+0x304>
 8003c2a:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <UART_SetConfig+0x29c>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08003c99 	.word	0x08003c99
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	08003c99 	.word	0x08003c99
 8003c40:	08003c63 	.word	0x08003c63
 8003c44:	08003c99 	.word	0x08003c99
 8003c48:	08003c99 	.word	0x08003c99
 8003c4c:	08003c99 	.word	0x08003c99
 8003c50:	08003c6b 	.word	0x08003c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c54:	f7fe fbde 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8003c58:	6178      	str	r0, [r7, #20]
        break;
 8003c5a:	e022      	b.n	8003ca2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <UART_SetConfig+0x300>)
 8003c5e:	617b      	str	r3, [r7, #20]
        break;
 8003c60:	e01f      	b.n	8003ca2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c62:	f7fe fb41 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8003c66:	6178      	str	r0, [r7, #20]
        break;
 8003c68:	e01b      	b.n	8003ca2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6e:	617b      	str	r3, [r7, #20]
        break;
 8003c70:	e017      	b.n	8003ca2 <UART_SetConfig+0x30e>
 8003c72:	bf00      	nop
 8003c74:	efff69f3 	.word	0xefff69f3
 8003c78:	40008000 	.word	0x40008000
 8003c7c:	40013800 	.word	0x40013800
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40004400 	.word	0x40004400
 8003c88:	40004800 	.word	0x40004800
 8003c8c:	40004c00 	.word	0x40004c00
 8003c90:	40005000 	.word	0x40005000
 8003c94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	76bb      	strb	r3, [r7, #26]
        break;
 8003ca0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80f1 	beq.w	8003e8c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d305      	bcc.n	8003cc6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d902      	bls.n	8003ccc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	76bb      	strb	r3, [r7, #26]
 8003cca:	e0df      	b.n	8003e8c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f04f 0400 	mov.w	r4, #0
 8003cdc:	0214      	lsls	r4, r2, #8
 8003cde:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003ce2:	020b      	lsls	r3, r1, #8
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6852      	ldr	r2, [r2, #4]
 8003ce8:	0852      	lsrs	r2, r2, #1
 8003cea:	4611      	mov	r1, r2
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	eb13 0b01 	adds.w	fp, r3, r1
 8003cf4:	eb44 0c02 	adc.w	ip, r4, r2
 8003cf8:	4658      	mov	r0, fp
 8003cfa:	4661      	mov	r1, ip
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f04f 0400 	mov.w	r4, #0
 8003d04:	461a      	mov	r2, r3
 8003d06:	4623      	mov	r3, r4
 8003d08:	f7fc fa5e 	bl	80001c8 <__aeabi_uldivmod>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d18:	d308      	bcc.n	8003d2c <UART_SetConfig+0x398>
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d20:	d204      	bcs.n	8003d2c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	e0af      	b.n	8003e8c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	76bb      	strb	r3, [r7, #26]
 8003d30:	e0ac      	b.n	8003e8c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3a:	d15b      	bne.n	8003df4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003d3c:	7efb      	ldrb	r3, [r7, #27]
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d827      	bhi.n	8003d92 <UART_SetConfig+0x3fe>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x3b4>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d75 	.word	0x08003d75
 8003d50:	08003d7d 	.word	0x08003d7d
 8003d54:	08003d93 	.word	0x08003d93
 8003d58:	08003d83 	.word	0x08003d83
 8003d5c:	08003d93 	.word	0x08003d93
 8003d60:	08003d93 	.word	0x08003d93
 8003d64:	08003d93 	.word	0x08003d93
 8003d68:	08003d8b 	.word	0x08003d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7fe fb52 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8003d70:	6178      	str	r0, [r7, #20]
        break;
 8003d72:	e013      	b.n	8003d9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d74:	f7fe fb64 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8003d78:	6178      	str	r0, [r7, #20]
        break;
 8003d7a:	e00f      	b.n	8003d9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d7c:	4b49      	ldr	r3, [pc, #292]	; (8003ea4 <UART_SetConfig+0x510>)
 8003d7e:	617b      	str	r3, [r7, #20]
        break;
 8003d80:	e00c      	b.n	8003d9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d82:	f7fe fab1 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8003d86:	6178      	str	r0, [r7, #20]
        break;
 8003d88:	e008      	b.n	8003d9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8e:	617b      	str	r3, [r7, #20]
        break;
 8003d90:	e004      	b.n	8003d9c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	76bb      	strb	r3, [r7, #26]
        break;
 8003d9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d074      	beq.n	8003e8c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	005a      	lsls	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	441a      	add	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b0f      	cmp	r3, #15
 8003dbe:	d916      	bls.n	8003dee <UART_SetConfig+0x45a>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc6:	d212      	bcs.n	8003dee <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f023 030f 	bic.w	r3, r3, #15
 8003dd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	89fb      	ldrh	r3, [r7, #14]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	89fa      	ldrh	r2, [r7, #14]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	e04e      	b.n	8003e8c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	76bb      	strb	r3, [r7, #26]
 8003df2:	e04b      	b.n	8003e8c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003df4:	7efb      	ldrb	r3, [r7, #27]
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d827      	bhi.n	8003e4a <UART_SetConfig+0x4b6>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x46c>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e2d 	.word	0x08003e2d
 8003e08:	08003e35 	.word	0x08003e35
 8003e0c:	08003e4b 	.word	0x08003e4b
 8003e10:	08003e3b 	.word	0x08003e3b
 8003e14:	08003e4b 	.word	0x08003e4b
 8003e18:	08003e4b 	.word	0x08003e4b
 8003e1c:	08003e4b 	.word	0x08003e4b
 8003e20:	08003e43 	.word	0x08003e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7fe faf6 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8003e28:	6178      	str	r0, [r7, #20]
        break;
 8003e2a:	e013      	b.n	8003e54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7fe fb08 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8003e30:	6178      	str	r0, [r7, #20]
        break;
 8003e32:	e00f      	b.n	8003e54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <UART_SetConfig+0x510>)
 8003e36:	617b      	str	r3, [r7, #20]
        break;
 8003e38:	e00c      	b.n	8003e54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3a:	f7fe fa55 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8003e3e:	6178      	str	r0, [r7, #20]
        break;
 8003e40:	e008      	b.n	8003e54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e46:	617b      	str	r3, [r7, #20]
        break;
 8003e48:	e004      	b.n	8003e54 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	76bb      	strb	r3, [r7, #26]
        break;
 8003e52:	bf00      	nop
    }

    if (pclk != 0U)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d018      	beq.n	8003e8c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	085a      	lsrs	r2, r3, #1
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	441a      	add	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b0f      	cmp	r3, #15
 8003e74:	d908      	bls.n	8003e88 <UART_SetConfig+0x4f4>
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7c:	d204      	bcs.n	8003e88 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	e001      	b.n	8003e8c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e98:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003ea4:	00f42400 	.word	0x00f42400

08003ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fa6:	d10a      	bne.n	8003fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ffa:	f7fc facd 	bl	8000598 <HAL_GetTick>
 8003ffe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b08      	cmp	r3, #8
 800400c:	d10e      	bne.n	800402c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800400e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f82a 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e020      	b.n	800406e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b04      	cmp	r3, #4
 8004038:	d10e      	bne.n	8004058 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800403a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f814 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e00a      	b.n	800406e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004086:	e05d      	b.n	8004144 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408e:	d059      	beq.n	8004144 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004090:	f7fc fa82 	bl	8000598 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11b      	bne.n	80040de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e042      	b.n	8004164 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d02b      	beq.n	8004144 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fa:	d123      	bne.n	8004144 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004104:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004114:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e00f      	b.n	8004164 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	429a      	cmp	r2, r3
 8004160:	d092      	beq.n	8004088 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HTS221_H_Init>:
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	80fb      	strh	r3, [r7, #6]
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2120      	movs	r1, #32
 800417c:	4618      	mov	r0, r3
 800417e:	f001 f897 	bl	80052b0 <SENSOR_IO_Read>
 8004182:	4603      	mov	r3, r0
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	f023 0304 	bic.w	r3, r3, #4
 800418c:	73fb      	strb	r3, [r7, #15]
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	73fb      	strb	r3, [r7, #15]
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	f023 0303 	bic.w	r3, r3, #3
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	2120      	movs	r1, #32
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 f860 	bl	800527c <SENSOR_IO_Write>
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HTS221_H_ReadID>:
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	80fb      	strh	r3, [r7, #6]
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	f001 f849 	bl	8005268 <SENSOR_IO_Init>
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	210f      	movs	r1, #15
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 f867 	bl	80052b0 <SENSOR_IO_Read>
 80041e2:	4603      	mov	r3, r0
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HTS221_H_ReadHumidity>:
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	b2d8      	uxtb	r0, r3
 80041fe:	f107 020c 	add.w	r2, r7, #12
 8004202:	2302      	movs	r3, #2
 8004204:	21b0      	movs	r1, #176	; 0xb0
 8004206:	f001 f871 	bl	80052ec <SENSOR_IO_ReadMultiple>
 800420a:	7b3b      	ldrb	r3, [r7, #12]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	83fb      	strh	r3, [r7, #30]
 8004212:	7b7b      	ldrb	r3, [r7, #13]
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	83bb      	strh	r3, [r7, #28]
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	b2d8      	uxtb	r0, r3
 800421e:	f107 020c 	add.w	r2, r7, #12
 8004222:	2302      	movs	r3, #2
 8004224:	21b6      	movs	r1, #182	; 0xb6
 8004226:	f001 f861 	bl	80052ec <SENSOR_IO_ReadMultiple>
 800422a:	7b7b      	ldrb	r3, [r7, #13]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	b21a      	sxth	r2, r3
 8004230:	7b3b      	ldrb	r3, [r7, #12]
 8004232:	b21b      	sxth	r3, r3
 8004234:	4313      	orrs	r3, r2
 8004236:	837b      	strh	r3, [r7, #26]
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	b2d8      	uxtb	r0, r3
 800423c:	f107 020c 	add.w	r2, r7, #12
 8004240:	2302      	movs	r3, #2
 8004242:	21ba      	movs	r1, #186	; 0xba
 8004244:	f001 f852 	bl	80052ec <SENSOR_IO_ReadMultiple>
 8004248:	7b7b      	ldrb	r3, [r7, #13]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	b21a      	sxth	r2, r3
 800424e:	7b3b      	ldrb	r3, [r7, #12]
 8004250:	b21b      	sxth	r3, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	833b      	strh	r3, [r7, #24]
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	b2d8      	uxtb	r0, r3
 800425a:	f107 020c 	add.w	r2, r7, #12
 800425e:	2302      	movs	r3, #2
 8004260:	21a8      	movs	r1, #168	; 0xa8
 8004262:	f001 f843 	bl	80052ec <SENSOR_IO_ReadMultiple>
 8004266:	7b7b      	ldrb	r3, [r7, #13]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	b21a      	sxth	r2, r3
 800426c:	7b3b      	ldrb	r3, [r7, #12]
 800426e:	b21b      	sxth	r3, r3
 8004270:	4313      	orrs	r3, r2
 8004272:	82fb      	strh	r3, [r7, #22]
 8004274:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004278:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004286:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800428a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	ee07 3a90 	vmov	s15, r3
 8004294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004298:	ee67 6a27 	vmul.f32	s13, s14, s15
 800429c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80042a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042c2:	edc7 7a04 	vstr	s15, [r7, #16]
 80042c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d2:	edc7 7a04 	vstr	s15, [r7, #16]
 80042d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80042da:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004320 <HTS221_H_ReadHumidity+0x130>
 80042de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e6:	dd01      	ble.n	80042ec <HTS221_H_ReadHumidity+0xfc>
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <HTS221_H_ReadHumidity+0x134>)
 80042ea:	e00a      	b.n	8004302 <HTS221_H_ReadHumidity+0x112>
 80042ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80042f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f8:	d502      	bpl.n	8004300 <HTS221_H_ReadHumidity+0x110>
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e000      	b.n	8004302 <HTS221_H_ReadHumidity+0x112>
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	edd7 7a04 	vldr	s15, [r7, #16]
 8004308:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800430c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004310:	eef0 7a66 	vmov.f32	s15, s13
 8004314:	eeb0 0a67 	vmov.f32	s0, s15
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	447a0000 	.word	0x447a0000
 8004324:	447a0000 	.word	0x447a0000

08004328 <HTS221_T_Init>:
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	6039      	str	r1, [r7, #0]
 8004332:	80fb      	strh	r3, [r7, #6]
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2120      	movs	r1, #32
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ffb8 	bl	80052b0 <SENSOR_IO_Read>
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	f023 0304 	bic.w	r3, r3, #4
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	73fb      	strb	r3, [r7, #15]
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	2120      	movs	r1, #32
 8004374:	4618      	mov	r0, r3
 8004376:	f000 ff81 	bl	800527c <SENSOR_IO_Write>
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HTS221_T_ReadTemp>:
 8004382:	b580      	push	{r7, lr}
 8004384:	b088      	sub	sp, #32
 8004386:	af00      	add	r7, sp, #0
 8004388:	4603      	mov	r3, r0
 800438a:	80fb      	strh	r3, [r7, #6]
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	b2d8      	uxtb	r0, r3
 8004390:	f107 0208 	add.w	r2, r7, #8
 8004394:	2302      	movs	r3, #2
 8004396:	21b2      	movs	r1, #178	; 0xb2
 8004398:	f000 ffa8 	bl	80052ec <SENSOR_IO_ReadMultiple>
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2135      	movs	r1, #53	; 0x35
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 ff84 	bl	80052b0 <SENSOR_IO_Read>
 80043a8:	4603      	mov	r3, r0
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	7ffb      	ldrb	r3, [r7, #31]
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	b21b      	sxth	r3, r3
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	b21a      	sxth	r2, r3
 80043b8:	7a3b      	ldrb	r3, [r7, #8]
 80043ba:	b21b      	sxth	r3, r3
 80043bc:	4313      	orrs	r3, r2
 80043be:	83bb      	strh	r3, [r7, #28]
 80043c0:	7ffb      	ldrb	r3, [r7, #31]
 80043c2:	019b      	lsls	r3, r3, #6
 80043c4:	b21b      	sxth	r3, r3
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	b21a      	sxth	r2, r3
 80043cc:	7a7b      	ldrb	r3, [r7, #9]
 80043ce:	b21b      	sxth	r3, r3
 80043d0:	4313      	orrs	r3, r2
 80043d2:	837b      	strh	r3, [r7, #26]
 80043d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80043d8:	10db      	asrs	r3, r3, #3
 80043da:	833b      	strh	r3, [r7, #24]
 80043dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80043e0:	10db      	asrs	r3, r3, #3
 80043e2:	82fb      	strh	r3, [r7, #22]
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	b2d8      	uxtb	r0, r3
 80043e8:	f107 0208 	add.w	r2, r7, #8
 80043ec:	2304      	movs	r3, #4
 80043ee:	21bc      	movs	r1, #188	; 0xbc
 80043f0:	f000 ff7c 	bl	80052ec <SENSOR_IO_ReadMultiple>
 80043f4:	7a7b      	ldrb	r3, [r7, #9]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	b21a      	sxth	r2, r3
 80043fa:	7a3b      	ldrb	r3, [r7, #8]
 80043fc:	b21b      	sxth	r3, r3
 80043fe:	4313      	orrs	r3, r2
 8004400:	82bb      	strh	r3, [r7, #20]
 8004402:	7afb      	ldrb	r3, [r7, #11]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	b21a      	sxth	r2, r3
 8004408:	7abb      	ldrb	r3, [r7, #10]
 800440a:	b21b      	sxth	r3, r3
 800440c:	4313      	orrs	r3, r2
 800440e:	827b      	strh	r3, [r7, #18]
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	b2d8      	uxtb	r0, r3
 8004414:	f107 0208 	add.w	r2, r7, #8
 8004418:	2302      	movs	r3, #2
 800441a:	21aa      	movs	r1, #170	; 0xaa
 800441c:	f000 ff66 	bl	80052ec <SENSOR_IO_ReadMultiple>
 8004420:	7a7b      	ldrb	r3, [r7, #9]
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	b21a      	sxth	r2, r3
 8004426:	7a3b      	ldrb	r3, [r7, #8]
 8004428:	b21b      	sxth	r3, r3
 800442a:	4313      	orrs	r3, r2
 800442c:	823b      	strh	r3, [r7, #16]
 800442e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004432:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	ee07 3a90 	vmov	s15, r3
 800443c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004440:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004444:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004452:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004456:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800445a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	ee07 3a90 	vmov	s15, r3
 8004464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800447c:	edc7 7a03 	vstr	s15, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eeb0 0a67 	vmov.f32	s0, s15
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <LSM6DSL_AccInit>:
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	80fb      	strh	r3, [r7, #6]
 800449a:	2300      	movs	r3, #0
 800449c:	73fb      	strb	r3, [r7, #15]
 800449e:	2110      	movs	r1, #16
 80044a0:	20d4      	movs	r0, #212	; 0xd4
 80044a2:	f000 ff05 	bl	80052b0 <SENSOR_IO_Read>
 80044a6:	4603      	mov	r3, r0
 80044a8:	73bb      	strb	r3, [r7, #14]
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	73fb      	strb	r3, [r7, #15]
 80044ae:	7bbb      	ldrb	r3, [r7, #14]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	73bb      	strb	r3, [r7, #14]
 80044b6:	7bba      	ldrb	r2, [r7, #14]
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	73bb      	strb	r3, [r7, #14]
 80044be:	7bbb      	ldrb	r3, [r7, #14]
 80044c0:	461a      	mov	r2, r3
 80044c2:	2110      	movs	r1, #16
 80044c4:	20d4      	movs	r0, #212	; 0xd4
 80044c6:	f000 fed9 	bl	800527c <SENSOR_IO_Write>
 80044ca:	2112      	movs	r1, #18
 80044cc:	20d4      	movs	r0, #212	; 0xd4
 80044ce:	f000 feef 	bl	80052b0 <SENSOR_IO_Read>
 80044d2:	4603      	mov	r3, r0
 80044d4:	73bb      	strb	r3, [r7, #14]
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	b29b      	uxth	r3, r3
 80044dc:	73fb      	strb	r3, [r7, #15]
 80044de:	7bbb      	ldrb	r3, [r7, #14]
 80044e0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80044e4:	73bb      	strb	r3, [r7, #14]
 80044e6:	7bba      	ldrb	r2, [r7, #14]
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	73bb      	strb	r3, [r7, #14]
 80044ee:	7bbb      	ldrb	r3, [r7, #14]
 80044f0:	461a      	mov	r2, r3
 80044f2:	2112      	movs	r1, #18
 80044f4:	20d4      	movs	r0, #212	; 0xd4
 80044f6:	f000 fec1 	bl	800527c <SENSOR_IO_Write>
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <LSM6DSL_AccDeInit>:
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	2300      	movs	r3, #0
 800450a:	71fb      	strb	r3, [r7, #7]
 800450c:	2110      	movs	r1, #16
 800450e:	20d4      	movs	r0, #212	; 0xd4
 8004510:	f000 fece 	bl	80052b0 <SENSOR_IO_Read>
 8004514:	4603      	mov	r3, r0
 8004516:	71fb      	strb	r3, [r7, #7]
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	71fb      	strb	r3, [r7, #7]
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	461a      	mov	r2, r3
 8004524:	2110      	movs	r1, #16
 8004526:	20d4      	movs	r0, #212	; 0xd4
 8004528:	f000 fea8 	bl	800527c <SENSOR_IO_Write>
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <LSM6DSL_AccReadID>:
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
 8004538:	f000 fe96 	bl	8005268 <SENSOR_IO_Init>
 800453c:	210f      	movs	r1, #15
 800453e:	20d4      	movs	r0, #212	; 0xd4
 8004540:	f000 feb6 	bl	80052b0 <SENSOR_IO_Read>
 8004544:	4603      	mov	r3, r0
 8004546:	4618      	mov	r0, r3
 8004548:	bd80      	pop	{r7, pc}

0800454a <LSM6DSL_AccLowPower>:
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	4603      	mov	r3, r0
 8004552:	80fb      	strh	r3, [r7, #6]
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
 8004558:	2115      	movs	r1, #21
 800455a:	20d4      	movs	r0, #212	; 0xd4
 800455c:	f000 fea8 	bl	80052b0 <SENSOR_IO_Read>
 8004560:	4603      	mov	r3, r0
 8004562:	73fb      	strb	r3, [r7, #15]
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	f023 0310 	bic.w	r3, r3, #16
 800456a:	73fb      	strb	r3, [r7, #15]
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <LSM6DSL_AccLowPower+0x30>
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	f043 0310 	orr.w	r3, r3, #16
 8004578:	73fb      	strb	r3, [r7, #15]
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	461a      	mov	r2, r3
 800457e:	2115      	movs	r1, #21
 8004580:	20d4      	movs	r0, #212	; 0xd4
 8004582:	f000 fe7b 	bl	800527c <SENSOR_IO_Write>
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <LSM6DSL_AccReadXYZ>:
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	2300      	movs	r3, #0
 800459a:	75fb      	strb	r3, [r7, #23]
 800459c:	2300      	movs	r3, #0
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	2110      	movs	r1, #16
 80045a8:	20d4      	movs	r0, #212	; 0xd4
 80045aa:	f000 fe81 	bl	80052b0 <SENSOR_IO_Read>
 80045ae:	4603      	mov	r3, r0
 80045b0:	75fb      	strb	r3, [r7, #23]
 80045b2:	f107 0208 	add.w	r2, r7, #8
 80045b6:	2306      	movs	r3, #6
 80045b8:	2128      	movs	r1, #40	; 0x28
 80045ba:	20d4      	movs	r0, #212	; 0xd4
 80045bc:	f000 fe96 	bl	80052ec <SENSOR_IO_ReadMultiple>
 80045c0:	2300      	movs	r3, #0
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e01f      	b.n	8004606 <LSM6DSL_AccReadXYZ+0x76>
 80045c6:	7ffb      	ldrb	r3, [r7, #31]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	3301      	adds	r3, #1
 80045cc:	f107 0220 	add.w	r2, r7, #32
 80045d0:	4413      	add	r3, r2
 80045d2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	b29a      	uxth	r2, r3
 80045dc:	7ffb      	ldrb	r3, [r7, #31]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	f107 0120 	add.w	r1, r7, #32
 80045e4:	440b      	add	r3, r1
 80045e6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	7ffb      	ldrb	r3, [r7, #31]
 80045f2:	b212      	sxth	r2, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	f107 0120 	add.w	r1, r7, #32
 80045fa:	440b      	add	r3, r1
 80045fc:	f823 2c10 	strh.w	r2, [r3, #-16]
 8004600:	7ffb      	ldrb	r3, [r7, #31]
 8004602:	3301      	adds	r3, #1
 8004604:	77fb      	strb	r3, [r7, #31]
 8004606:	7ffb      	ldrb	r3, [r7, #31]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d9dc      	bls.n	80045c6 <LSM6DSL_AccReadXYZ+0x36>
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b0c      	cmp	r3, #12
 8004614:	d828      	bhi.n	8004668 <LSM6DSL_AccReadXYZ+0xd8>
 8004616:	a201      	add	r2, pc, #4	; (adr r2, 800461c <LSM6DSL_AccReadXYZ+0x8c>)
 8004618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461c:	08004651 	.word	0x08004651
 8004620:	08004669 	.word	0x08004669
 8004624:	08004669 	.word	0x08004669
 8004628:	08004669 	.word	0x08004669
 800462c:	08004663 	.word	0x08004663
 8004630:	08004669 	.word	0x08004669
 8004634:	08004669 	.word	0x08004669
 8004638:	08004669 	.word	0x08004669
 800463c:	08004657 	.word	0x08004657
 8004640:	08004669 	.word	0x08004669
 8004644:	08004669 	.word	0x08004669
 8004648:	08004669 	.word	0x08004669
 800464c:	0800465d 	.word	0x0800465d
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <LSM6DSL_AccReadXYZ+0x124>)
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	e008      	b.n	8004668 <LSM6DSL_AccReadXYZ+0xd8>
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <LSM6DSL_AccReadXYZ+0x128>)
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	e005      	b.n	8004668 <LSM6DSL_AccReadXYZ+0xd8>
 800465c:	4b17      	ldr	r3, [pc, #92]	; (80046bc <LSM6DSL_AccReadXYZ+0x12c>)
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	e002      	b.n	8004668 <LSM6DSL_AccReadXYZ+0xd8>
 8004662:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <LSM6DSL_AccReadXYZ+0x130>)
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	bf00      	nop
 8004668:	2300      	movs	r3, #0
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e01b      	b.n	80046a6 <LSM6DSL_AccReadXYZ+0x116>
 800466e:	7ffb      	ldrb	r3, [r7, #31]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	f107 0220 	add.w	r2, r7, #32
 8004676:	4413      	add	r3, r2
 8004678:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004684:	edd7 7a06 	vldr	s15, [r7, #24]
 8004688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468c:	7ffb      	ldrb	r3, [r7, #31]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004698:	ee17 2a90 	vmov	r2, s15
 800469c:	b212      	sxth	r2, r2
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	7ffb      	ldrb	r3, [r7, #31]
 80046a2:	3301      	adds	r3, #1
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	7ffb      	ldrb	r3, [r7, #31]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d9e0      	bls.n	800466e <LSM6DSL_AccReadXYZ+0xde>
 80046ac:	bf00      	nop
 80046ae:	3720      	adds	r7, #32
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	3d79db23 	.word	0x3d79db23
 80046b8:	3df9db23 	.word	0x3df9db23
 80046bc:	3e79db23 	.word	0x3e79db23
 80046c0:	3ef9db23 	.word	0x3ef9db23

080046c4 <LSM6DSL_GyroInit>:
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	80fb      	strh	r3, [r7, #6]
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]
 80046d2:	2111      	movs	r1, #17
 80046d4:	20d4      	movs	r0, #212	; 0xd4
 80046d6:	f000 fdeb 	bl	80052b0 <SENSOR_IO_Read>
 80046da:	4603      	mov	r3, r0
 80046dc:	73bb      	strb	r3, [r7, #14]
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	73fb      	strb	r3, [r7, #15]
 80046e2:	7bbb      	ldrb	r3, [r7, #14]
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	73bb      	strb	r3, [r7, #14]
 80046ea:	7bba      	ldrb	r2, [r7, #14]
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	73bb      	strb	r3, [r7, #14]
 80046f2:	7bbb      	ldrb	r3, [r7, #14]
 80046f4:	461a      	mov	r2, r3
 80046f6:	2111      	movs	r1, #17
 80046f8:	20d4      	movs	r0, #212	; 0xd4
 80046fa:	f000 fdbf 	bl	800527c <SENSOR_IO_Write>
 80046fe:	2112      	movs	r1, #18
 8004700:	20d4      	movs	r0, #212	; 0xd4
 8004702:	f000 fdd5 	bl	80052b0 <SENSOR_IO_Read>
 8004706:	4603      	mov	r3, r0
 8004708:	73bb      	strb	r3, [r7, #14]
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	0a1b      	lsrs	r3, r3, #8
 800470e:	b29b      	uxth	r3, r3
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	7bbb      	ldrb	r3, [r7, #14]
 8004714:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8004718:	73bb      	strb	r3, [r7, #14]
 800471a:	7bba      	ldrb	r2, [r7, #14]
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	4313      	orrs	r3, r2
 8004720:	73bb      	strb	r3, [r7, #14]
 8004722:	7bbb      	ldrb	r3, [r7, #14]
 8004724:	461a      	mov	r2, r3
 8004726:	2112      	movs	r1, #18
 8004728:	20d4      	movs	r0, #212	; 0xd4
 800472a:	f000 fda7 	bl	800527c <SENSOR_IO_Write>
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <LSM6DSL_GyroDeInit>:
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	2300      	movs	r3, #0
 800473e:	71fb      	strb	r3, [r7, #7]
 8004740:	2111      	movs	r1, #17
 8004742:	20d4      	movs	r0, #212	; 0xd4
 8004744:	f000 fdb4 	bl	80052b0 <SENSOR_IO_Read>
 8004748:	4603      	mov	r3, r0
 800474a:	71fb      	strb	r3, [r7, #7]
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	71fb      	strb	r3, [r7, #7]
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	461a      	mov	r2, r3
 8004758:	2111      	movs	r1, #17
 800475a:	20d4      	movs	r0, #212	; 0xd4
 800475c:	f000 fd8e 	bl	800527c <SENSOR_IO_Write>
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <LSM6DSL_GyroReadID>:
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
 800476c:	f000 fd7c 	bl	8005268 <SENSOR_IO_Init>
 8004770:	210f      	movs	r1, #15
 8004772:	20d4      	movs	r0, #212	; 0xd4
 8004774:	f000 fd9c 	bl	80052b0 <SENSOR_IO_Read>
 8004778:	4603      	mov	r3, r0
 800477a:	4618      	mov	r0, r3
 800477c:	bd80      	pop	{r7, pc}

0800477e <LSM6DSL_GyroLowPower>:
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	4603      	mov	r3, r0
 8004786:	80fb      	strh	r3, [r7, #6]
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]
 800478c:	2116      	movs	r1, #22
 800478e:	20d4      	movs	r0, #212	; 0xd4
 8004790:	f000 fd8e 	bl	80052b0 <SENSOR_IO_Read>
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800479e:	73fb      	strb	r3, [r7, #15]
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <LSM6DSL_GyroLowPower+0x30>
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047ac:	73fb      	strb	r3, [r7, #15]
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	461a      	mov	r2, r3
 80047b2:	2116      	movs	r1, #22
 80047b4:	20d4      	movs	r0, #212	; 0xd4
 80047b6:	f000 fd61 	bl	800527c <SENSOR_IO_Write>
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <LSM6DSL_GyroReadXYZAngRate>:
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	2300      	movs	r3, #0
 80047ce:	75fb      	strb	r3, [r7, #23]
 80047d0:	2300      	movs	r3, #0
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	2111      	movs	r1, #17
 80047dc:	20d4      	movs	r0, #212	; 0xd4
 80047de:	f000 fd67 	bl	80052b0 <SENSOR_IO_Read>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]
 80047e6:	f107 0208 	add.w	r2, r7, #8
 80047ea:	2306      	movs	r3, #6
 80047ec:	2122      	movs	r1, #34	; 0x22
 80047ee:	20d4      	movs	r0, #212	; 0xd4
 80047f0:	f000 fd7c 	bl	80052ec <SENSOR_IO_ReadMultiple>
 80047f4:	2300      	movs	r3, #0
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e01f      	b.n	800483a <LSM6DSL_GyroReadXYZAngRate+0x76>
 80047fa:	7ffb      	ldrb	r3, [r7, #31]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	3301      	adds	r3, #1
 8004800:	f107 0220 	add.w	r2, r7, #32
 8004804:	4413      	add	r3, r2
 8004806:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800480a:	b29b      	uxth	r3, r3
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	b29a      	uxth	r2, r3
 8004810:	7ffb      	ldrb	r3, [r7, #31]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	f107 0120 	add.w	r1, r7, #32
 8004818:	440b      	add	r3, r1
 800481a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800481e:	b29b      	uxth	r3, r3
 8004820:	4413      	add	r3, r2
 8004822:	b29a      	uxth	r2, r3
 8004824:	7ffb      	ldrb	r3, [r7, #31]
 8004826:	b212      	sxth	r2, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	f107 0120 	add.w	r1, r7, #32
 800482e:	440b      	add	r3, r1
 8004830:	f823 2c10 	strh.w	r2, [r3, #-16]
 8004834:	7ffb      	ldrb	r3, [r7, #31]
 8004836:	3301      	adds	r3, #1
 8004838:	77fb      	strb	r3, [r7, #31]
 800483a:	7ffb      	ldrb	r3, [r7, #31]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d9dc      	bls.n	80047fa <LSM6DSL_GyroReadXYZAngRate+0x36>
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b0c      	cmp	r3, #12
 8004848:	d828      	bhi.n	800489c <LSM6DSL_GyroReadXYZAngRate+0xd8>
 800484a:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 800484c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004850:	08004885 	.word	0x08004885
 8004854:	0800489d 	.word	0x0800489d
 8004858:	0800489d 	.word	0x0800489d
 800485c:	0800489d 	.word	0x0800489d
 8004860:	0800488b 	.word	0x0800488b
 8004864:	0800489d 	.word	0x0800489d
 8004868:	0800489d 	.word	0x0800489d
 800486c:	0800489d 	.word	0x0800489d
 8004870:	08004891 	.word	0x08004891
 8004874:	0800489d 	.word	0x0800489d
 8004878:	0800489d 	.word	0x0800489d
 800487c:	0800489d 	.word	0x0800489d
 8004880:	08004897 	.word	0x08004897
 8004884:	4b16      	ldr	r3, [pc, #88]	; (80048e0 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e008      	b.n	800489c <LSM6DSL_GyroReadXYZAngRate+0xd8>
 800488a:	4b16      	ldr	r3, [pc, #88]	; (80048e4 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e005      	b.n	800489c <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8004890:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	e002      	b.n	800489c <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8004896:	4b15      	ldr	r3, [pc, #84]	; (80048ec <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	bf00      	nop
 800489c:	2300      	movs	r3, #0
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e017      	b.n	80048d2 <LSM6DSL_GyroReadXYZAngRate+0x10e>
 80048a2:	7ffb      	ldrb	r3, [r7, #31]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	f107 0220 	add.w	r2, r7, #32
 80048aa:	4413      	add	r3, r2
 80048ac:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048b8:	7ffb      	ldrb	r3, [r7, #31]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	4413      	add	r3, r2
 80048c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80048c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c8:	edc3 7a00 	vstr	s15, [r3]
 80048cc:	7ffb      	ldrb	r3, [r7, #31]
 80048ce:	3301      	adds	r3, #1
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	7ffb      	ldrb	r3, [r7, #31]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d9e4      	bls.n	80048a2 <LSM6DSL_GyroReadXYZAngRate+0xde>
 80048d8:	bf00      	nop
 80048da:	3720      	adds	r7, #32
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	410c0000 	.word	0x410c0000
 80048e4:	418c0000 	.word	0x418c0000
 80048e8:	420c0000 	.word	0x420c0000
 80048ec:	428c0000 	.word	0x428c0000

080048f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048f4:	f7fb fde8 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048f8:	f000 f818 	bl	800492c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048fc:	f000 f94e 	bl	8004b9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8004900:	f000 f88e 	bl	8004a20 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004904:	f000 f91a 	bl	8004b3c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8004908:	f000 f8ca 	bl	8004aa0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	//I2C Sensor Initialization
	BSP_ACCELERO_Init();
 800490c:	f000 fd0c 	bl	8005328 <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 8004910:	f000 fdc2 	bl	8005498 <BSP_TSENSOR_Init>
	BSP_GYRO_Init();
 8004914:	f000 fd5e 	bl	80053d4 <BSP_GYRO_Init>
	BSP_HSENSOR_Init();
 8004918:	f000 fd9e 	bl	8005458 <BSP_HSENSOR_Init>

	// Start the timer
	calibrate();
 800491c:	f000 fa96 	bl	8004e4c <calibrate>
	HAL_TIM_Base_Start_IT(&htim2);
 8004920:	4801      	ldr	r0, [pc, #4]	; (8004928 <main+0x38>)
 8004922:	f7fe fb0b 	bl	8002f3c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8004926:	e7fe      	b.n	8004926 <main+0x36>
 8004928:	20000264 	.word	0x20000264

0800492c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b0b8      	sub	sp, #224	; 0xe0
 8004930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004932:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004936:	2244      	movs	r2, #68	; 0x44
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f000 ff78 	bl	8005830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004940:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	609a      	str	r2, [r3, #8]
 800494c:	60da      	str	r2, [r3, #12]
 800494e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004950:	463b      	mov	r3, r7
 8004952:	2288      	movs	r2, #136	; 0x88
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f000 ff6a 	bl	8005830 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800495c:	2310      	movs	r3, #16
 800495e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004962:	2301      	movs	r3, #1
 8004964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800496e:	2360      	movs	r3, #96	; 0x60
 8004970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004974:	2302      	movs	r3, #2
 8004976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800497a:	2301      	movs	r3, #1
 800497c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004980:	2301      	movs	r3, #1
 8004982:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004986:	2328      	movs	r3, #40	; 0x28
 8004988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800498c:	2307      	movs	r3, #7
 800498e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004992:	2302      	movs	r3, #2
 8004994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004998:	2302      	movs	r3, #2
 800499a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800499e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fc ffd8 	bl	8001958 <HAL_RCC_OscConfig>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80049ae:	f000 fb63 	bl	8005078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049b2:	230f      	movs	r3, #15
 80049b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049b8:	2303      	movs	r3, #3
 80049ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049be:	2300      	movs	r3, #0
 80049c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80049d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80049d4:	2104      	movs	r1, #4
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fd fba4 	bl	8002124 <HAL_RCC_ClockConfig>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80049e2:	f000 fb49 	bl	8005078 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80049e6:	2341      	movs	r3, #65	; 0x41
 80049e8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80049ea:	2300      	movs	r3, #0
 80049ec:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80049ee:	2300      	movs	r3, #0
 80049f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049f2:	463b      	mov	r3, r7
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fd fd99 	bl	800252c <HAL_RCCEx_PeriphCLKConfig>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004a00:	f000 fb3a 	bl	8005078 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004a04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a08:	f7fc ff50 	bl	80018ac <HAL_PWREx_ControlVoltageScaling>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004a12:	f000 fb31 	bl	8005078 <Error_Handler>
  }
}
 8004a16:	bf00      	nop
 8004a18:	37e0      	adds	r7, #224	; 0xe0
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004a24:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a26:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <MX_I2C1_Init+0x78>)
 8004a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8004a2a:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a2c:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <MX_I2C1_Init+0x7c>)
 8004a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004a30:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a36:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a3c:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004a42:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a48:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a4e:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a54:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a5a:	480e      	ldr	r0, [pc, #56]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a5c:	f7fc f978 	bl	8000d50 <HAL_I2C_Init>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004a66:	f000 fb07 	bl	8005078 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4809      	ldr	r0, [pc, #36]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a6e:	f7fc fe77 	bl	8001760 <HAL_I2CEx_ConfigAnalogFilter>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004a78:	f000 fafe 	bl	8005078 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4805      	ldr	r0, [pc, #20]	; (8004a94 <MX_I2C1_Init+0x74>)
 8004a80:	f7fc feb9 	bl	80017f6 <HAL_I2CEx_ConfigDigitalFilter>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004a8a:	f000 faf5 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000108 	.word	0x20000108
 8004a98:	40005400 	.word	0x40005400
 8004a9c:	10909cec 	.word	0x10909cec

08004aa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aa6:	f107 0310 	add.w	r3, r7, #16
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	605a      	str	r2, [r3, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
 8004ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	605a      	str	r2, [r3, #4]
 8004abc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004abe:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <MX_TIM2_Init+0x98>)
 8004ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ac4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000;
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <MX_TIM2_Init+0x98>)
 8004ac8:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004acc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ace:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <MX_TIM2_Init+0x98>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8004ad4:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <MX_TIM2_Init+0x98>)
 8004ad6:	2264      	movs	r2, #100	; 0x64
 8004ad8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ada:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <MX_TIM2_Init+0x98>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ae0:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <MX_TIM2_Init+0x98>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ae6:	4814      	ldr	r0, [pc, #80]	; (8004b38 <MX_TIM2_Init+0x98>)
 8004ae8:	f7fe f9d0 	bl	8002e8c <HAL_TIM_Base_Init>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004af2:	f000 fac1 	bl	8005078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004afa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004afc:	f107 0310 	add.w	r3, r7, #16
 8004b00:	4619      	mov	r1, r3
 8004b02:	480d      	ldr	r0, [pc, #52]	; (8004b38 <MX_TIM2_Init+0x98>)
 8004b04:	f7fe fba9 	bl	800325a <HAL_TIM_ConfigClockSource>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004b0e:	f000 fab3 	bl	8005078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b12:	2300      	movs	r3, #0
 8004b14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4806      	ldr	r0, [pc, #24]	; (8004b38 <MX_TIM2_Init+0x98>)
 8004b20:	f7fe fdb0 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004b2a:	f000 faa5 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004b2e:	bf00      	nop
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000264 	.word	0x20000264

08004b3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004b40:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <MX_USART1_UART_Init+0x5c>)
 8004b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b4e:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b62:	220c      	movs	r2, #12
 8004b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b7e:	4805      	ldr	r0, [pc, #20]	; (8004b94 <MX_USART1_UART_Init+0x58>)
 8004b80:	f7fe fe26 	bl	80037d0 <HAL_UART_Init>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004b8a:	f000 fa75 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	200001b8 	.word	0x200001b8
 8004b98:	40013800 	.word	0x40013800

08004b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba2:	f107 030c 	add.w	r3, r7, #12
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	609a      	str	r2, [r3, #8]
 8004bae:	60da      	str	r2, [r3, #12]
 8004bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bb2:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <MX_GPIO_Init+0x68>)
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <MX_GPIO_Init+0x68>)
 8004bb8:	f043 0302 	orr.w	r3, r3, #2
 8004bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bbe:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <MX_GPIO_Init+0x68>)
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bca:	4b0e      	ldr	r3, [pc, #56]	; (8004c04 <MX_GPIO_Init+0x68>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bce:	4a0d      	ldr	r2, [pc, #52]	; (8004c04 <MX_GPIO_Init+0x68>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <MX_GPIO_Init+0x68>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	607b      	str	r3, [r7, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004be2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <MX_GPIO_Init+0x6c>)
 8004bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4805      	ldr	r0, [pc, #20]	; (8004c0c <MX_GPIO_Init+0x70>)
 8004bf8:	f7fb fe0e 	bl	8000818 <HAL_GPIO_Init>

}
 8004bfc:	bf00      	nop
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021000 	.word	0x40021000
 8004c08:	10110000 	.word	0x10110000
 8004c0c:	48000400 	.word	0x48000400

08004c10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	readAccelerometer();
 8004c18:	f000 f9b0 	bl	8004f7c <readAccelerometer>
	calculateVelocity();
 8004c1c:	f000 f804 	bl	8004c28 <calculateVelocity>
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <calculateVelocity>:


/**
 * This function calculates the velocity using the acceleration values
 */
void calculateVelocity() {
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
	// Counter
	int i = count % 5;
 8004c2e:	4b48      	ldr	r3, [pc, #288]	; (8004d50 <calculateVelocity+0x128>)
 8004c30:	f993 2000 	ldrsb.w	r2, [r3]
 8004c34:	4b47      	ldr	r3, [pc, #284]	; (8004d54 <calculateVelocity+0x12c>)
 8004c36:	fb83 1302 	smull	r1, r3, r3, r2
 8004c3a:	1059      	asrs	r1, r3, #1
 8004c3c:	17d3      	asrs	r3, r2, #31
 8004c3e:	1ac9      	subs	r1, r1, r3
 8004c40:	460b      	mov	r3, r1
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	b25b      	sxtb	r3, r3
 8004c4a:	607b      	str	r3, [r7, #4]

	// apply low pass filter
	lowpassValue = lowpassValue * filterCoefficient + accelerationx[i] * (1 - filterCoefficient);
 8004c4c:	4b42      	ldr	r3, [pc, #264]	; (8004d58 <calculateVelocity+0x130>)
 8004c4e:	ed93 7a00 	vldr	s14, [r3]
 8004c52:	4b42      	ldr	r3, [pc, #264]	; (8004d5c <calculateVelocity+0x134>)
 8004c54:	edd3 7a00 	vldr	s15, [r3]
 8004c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c5c:	4a40      	ldr	r2, [pc, #256]	; (8004d60 <calculateVelocity+0x138>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <calculateVelocity+0x134>)
 8004c6e:	edd3 7a00 	vldr	s15, [r3]
 8004c72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004c76:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c82:	4b35      	ldr	r3, [pc, #212]	; (8004d58 <calculateVelocity+0x130>)
 8004c84:	edc3 7a00 	vstr	s15, [r3]

	// apply high pass filter
	highpassValue = accelerationx[i] - lowpassValue;
 8004c88:	4a35      	ldr	r2, [pc, #212]	; (8004d60 <calculateVelocity+0x138>)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c98:	4b2f      	ldr	r3, [pc, #188]	; (8004d58 <calculateVelocity+0x130>)
 8004c9a:	edd3 7a00 	vldr	s15, [r3]
 8004c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca2:	4b30      	ldr	r3, [pc, #192]	; (8004d64 <calculateVelocity+0x13c>)
 8004ca4:	edc3 7a00 	vstr	s15, [r3]

	accelerationx_f = highpassValue;
 8004ca8:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <calculateVelocity+0x13c>)
 8004caa:	edd3 7a00 	vldr	s15, [r3]
 8004cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cb2:	ee17 3a90 	vmov	r3, s15
 8004cb6:	b21a      	sxth	r2, r3
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	; (8004d68 <calculateVelocity+0x140>)
 8004cba:	801a      	strh	r2, [r3, #0]

	// integrate to find the speed
	speed = ((highpassValue + oldAccel) * timeSpan) / 2 + speed;
 8004cbc:	4b29      	ldr	r3, [pc, #164]	; (8004d64 <calculateVelocity+0x13c>)
 8004cbe:	ed93 7a00 	vldr	s14, [r3]
 8004cc2:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <calculateVelocity+0x144>)
 8004cc4:	edd3 7a00 	vldr	s15, [r3]
 8004cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ccc:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <calculateVelocity+0x148>)
 8004cce:	edd3 7a00 	vldr	s15, [r3]
 8004cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004cda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004cde:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <calculateVelocity+0x14c>)
 8004ce0:	edd3 7a00 	vldr	s15, [r3]
 8004ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce8:	4b22      	ldr	r3, [pc, #136]	; (8004d74 <calculateVelocity+0x14c>)
 8004cea:	edc3 7a00 	vstr	s15, [r3]
	oldAccel = highpassValue;
 8004cee:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <calculateVelocity+0x13c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1e      	ldr	r2, [pc, #120]	; (8004d6c <calculateVelocity+0x144>)
 8004cf4:	6013      	str	r3, [r2, #0]

	velocity = speed;
 8004cf6:	4b1f      	ldr	r3, [pc, #124]	; (8004d74 <calculateVelocity+0x14c>)
 8004cf8:	edd3 7a00 	vldr	s15, [r3]
 8004cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d00:	ee17 3a90 	vmov	r3, s15
 8004d04:	b21a      	sxth	r2, r3
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <calculateVelocity+0x150>)
 8004d08:	801a      	strh	r2, [r3, #0]

	// find the difference
	difference = ((speed + oldSpeed) * timeSpan) / 2 + difference;
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <calculateVelocity+0x14c>)
 8004d0c:	ed93 7a00 	vldr	s14, [r3]
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <calculateVelocity+0x154>)
 8004d12:	edd3 7a00 	vldr	s15, [r3]
 8004d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <calculateVelocity+0x148>)
 8004d1c:	edd3 7a00 	vldr	s15, [r3]
 8004d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004d28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d2c:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <calculateVelocity+0x158>)
 8004d2e:	edd3 7a00 	vldr	s15, [r3]
 8004d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d36:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <calculateVelocity+0x158>)
 8004d38:	edc3 7a00 	vstr	s15, [r3]
	oldSpeed = speed;
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <calculateVelocity+0x14c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0e      	ldr	r2, [pc, #56]	; (8004d7c <calculateVelocity+0x154>)
 8004d42:	6013      	str	r3, [r2, #0]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	2000023e 	.word	0x2000023e
 8004d54:	66666667 	.word	0x66666667
 8004d58:	200000c8 	.word	0x200000c8
 8004d5c:	2000008c 	.word	0x2000008c
 8004d60:	200000bc 	.word	0x200000bc
 8004d64:	200000cc 	.word	0x200000cc
 8004d68:	20000156 	.word	0x20000156
 8004d6c:	200000d0 	.word	0x200000d0
 8004d70:	20000090 	.word	0x20000090
 8004d74:	200000d4 	.word	0x200000d4
 8004d78:	2000023a 	.word	0x2000023a
 8004d7c:	200000d8 	.word	0x200000d8
 8004d80:	200000dc 	.word	0x200000dc

08004d84 <getXYZ>:

void getXYZ() {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
	int16_t count2 = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	80fb      	strh	r3, [r7, #6]

	// Reset the readings
	Sample_X = 0;
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <getXYZ+0xb8>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	801a      	strh	r2, [r3, #0]
	Sample_Y = 0;
 8004d94:	4b2a      	ldr	r3, [pc, #168]	; (8004e40 <getXYZ+0xbc>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	801a      	strh	r2, [r3, #0]
	Sample_Z = 0;
 8004d9a:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <getXYZ+0xc0>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	801a      	strh	r2, [r3, #0]

	// Using the average to reduce the noise
	do{
		BSP_ACCELERO_AccGetXYZ(acceleroReading);
 8004da0:	4829      	ldr	r0, [pc, #164]	; (8004e48 <getXYZ+0xc4>)
 8004da2:	f000 faff 	bl	80053a4 <BSP_ACCELERO_AccGetXYZ>
		Sample_X = Sample_X + (int)acceleroReading[0];
 8004da6:	4b28      	ldr	r3, [pc, #160]	; (8004e48 <getXYZ+0xc4>)
 8004da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <getXYZ+0xb8>)
 8004db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	b21a      	sxth	r2, r3
 8004dbc:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <getXYZ+0xb8>)
 8004dbe:	801a      	strh	r2, [r3, #0]
		Sample_Y = Sample_Y + (int)acceleroReading[1];
 8004dc0:	4b21      	ldr	r3, [pc, #132]	; (8004e48 <getXYZ+0xc4>)
 8004dc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <getXYZ+0xbc>)
 8004dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b21a      	sxth	r2, r3
 8004dd6:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <getXYZ+0xbc>)
 8004dd8:	801a      	strh	r2, [r3, #0]
		Sample_Z = Sample_Z + (int)acceleroReading[2];
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <getXYZ+0xc4>)
 8004ddc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <getXYZ+0xc0>)
 8004de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	b21a      	sxth	r2, r3
 8004df0:	4b14      	ldr	r3, [pc, #80]	; (8004e44 <getXYZ+0xc0>)
 8004df2:	801a      	strh	r2, [r3, #0]

		count2++;
 8004df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	80fb      	strh	r3, [r7, #6]
	} while (count2!=0x40); // Repeat 64 times
 8004e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d1cb      	bne.n	8004da0 <getXYZ+0x1c>

	// Division by 64 (averaging)
	Sample_X = Sample_X >> 6;
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <getXYZ+0xb8>)
 8004e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e0e:	119b      	asrs	r3, r3, #6
 8004e10:	b21a      	sxth	r2, r3
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <getXYZ+0xb8>)
 8004e14:	801a      	strh	r2, [r3, #0]
	Sample_Y = Sample_X >> 6;
 8004e16:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <getXYZ+0xb8>)
 8004e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e1c:	119b      	asrs	r3, r3, #6
 8004e1e:	b21a      	sxth	r2, r3
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <getXYZ+0xbc>)
 8004e22:	801a      	strh	r2, [r3, #0]
	Sample_Z = Sample_Z >> 6;
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <getXYZ+0xc0>)
 8004e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e2a:	119b      	asrs	r3, r3, #6
 8004e2c:	b21a      	sxth	r2, r3
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <getXYZ+0xc0>)
 8004e30:	801a      	strh	r2, [r3, #0]

}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200002d8 	.word	0x200002d8
 8004e40:	20000238 	.word	0x20000238
 8004e44:	20000154 	.word	0x20000154
 8004e48:	200000b4 	.word	0x200000b4

08004e4c <calibrate>:

void calibrate() {
 8004e4c:	b5b0      	push	{r4, r5, r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
	sprintf(accelerometerStr, "Calibration Beginning. \n");
 8004e52:	4a3f      	ldr	r2, [pc, #252]	; (8004f50 <calibrate+0x104>)
 8004e54:	4b3f      	ldr	r3, [pc, #252]	; (8004f54 <calibrate+0x108>)
 8004e56:	4615      	mov	r5, r2
 8004e58:	461c      	mov	r4, r3
 8004e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e5c:	6028      	str	r0, [r5, #0]
 8004e5e:	6069      	str	r1, [r5, #4]
 8004e60:	60aa      	str	r2, [r5, #8]
 8004e62:	60eb      	str	r3, [r5, #12]
 8004e64:	cc03      	ldmia	r4!, {r0, r1}
 8004e66:	6128      	str	r0, [r5, #16]
 8004e68:	6169      	str	r1, [r5, #20]
 8004e6a:	7823      	ldrb	r3, [r4, #0]
 8004e6c:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8004e6e:	2364      	movs	r3, #100	; 0x64
 8004e70:	221e      	movs	r2, #30
 8004e72:	4937      	ldr	r1, [pc, #220]	; (8004f50 <calibrate+0x104>)
 8004e74:	4838      	ldr	r0, [pc, #224]	; (8004f58 <calibrate+0x10c>)
 8004e76:	f7fe fcf9 	bl	800386c <HAL_UART_Transmit>

	int16_t count1 = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	80fb      	strh	r3, [r7, #6]

	HAL_Delay(3000);	// wait until sensors are ready
 8004e7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e82:	f7fb fb95 	bl	80005b0 <HAL_Delay>

	do {
		getXYZ();
 8004e86:	f7ff ff7d 	bl	8004d84 <getXYZ>
		sstatex = sstatex + Sample_X; // Accumulate Samples
 8004e8a:	4b34      	ldr	r3, [pc, #208]	; (8004f5c <calibrate+0x110>)
 8004e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	4b33      	ldr	r3, [pc, #204]	; (8004f60 <calibrate+0x114>)
 8004e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	b21a      	sxth	r2, r3
 8004ea0:	4b2e      	ldr	r3, [pc, #184]	; (8004f5c <calibrate+0x110>)
 8004ea2:	801a      	strh	r2, [r3, #0]
		sstatey = sstatey + Sample_Y;
 8004ea4:	4b2f      	ldr	r3, [pc, #188]	; (8004f64 <calibrate+0x118>)
 8004ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	4b2e      	ldr	r3, [pc, #184]	; (8004f68 <calibrate+0x11c>)
 8004eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	b21a      	sxth	r2, r3
 8004eba:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <calibrate+0x118>)
 8004ebc:	801a      	strh	r2, [r3, #0]
		sstatez = sstatez + Sample_Z;
 8004ebe:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <calibrate+0x120>)
 8004ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <calibrate+0x124>)
 8004ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	4413      	add	r3, r2
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	b21a      	sxth	r2, r3
 8004ed4:	4b25      	ldr	r3, [pc, #148]	; (8004f6c <calibrate+0x120>)
 8004ed6:	801a      	strh	r2, [r3, #0]
		count1++;
 8004ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3301      	adds	r3, #1
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	80fb      	strh	r3, [r7, #6]
	} while (count1 != 0x0400); // 1024 times
 8004ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d1cb      	bne.n	8004e86 <calibrate+0x3a>

	sstatex = sstatex>>10; // division between 1024
 8004eee:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <calibrate+0x110>)
 8004ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ef4:	129b      	asrs	r3, r3, #10
 8004ef6:	b21a      	sxth	r2, r3
 8004ef8:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <calibrate+0x110>)
 8004efa:	801a      	strh	r2, [r3, #0]
	sstatey = sstatey>>10;
 8004efc:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <calibrate+0x118>)
 8004efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f02:	129b      	asrs	r3, r3, #10
 8004f04:	b21a      	sxth	r2, r3
 8004f06:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <calibrate+0x118>)
 8004f08:	801a      	strh	r2, [r3, #0]
	sstatez = sstatez>>10;
 8004f0a:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <calibrate+0x120>)
 8004f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f10:	129b      	asrs	r3, r3, #10
 8004f12:	b21a      	sxth	r2, r3
 8004f14:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <calibrate+0x120>)
 8004f16:	801a      	strh	r2, [r3, #0]

	calibrated = 1;
 8004f18:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <calibrate+0x128>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]

	sprintf(accelerometerStr, "Calibration completed. \n");
 8004f1e:	4a0c      	ldr	r2, [pc, #48]	; (8004f50 <calibrate+0x104>)
 8004f20:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <calibrate+0x12c>)
 8004f22:	4615      	mov	r5, r2
 8004f24:	461c      	mov	r4, r3
 8004f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f28:	6028      	str	r0, [r5, #0]
 8004f2a:	6069      	str	r1, [r5, #4]
 8004f2c:	60aa      	str	r2, [r5, #8]
 8004f2e:	60eb      	str	r3, [r5, #12]
 8004f30:	cc03      	ldmia	r4!, {r0, r1}
 8004f32:	6128      	str	r0, [r5, #16]
 8004f34:	6169      	str	r1, [r5, #20]
 8004f36:	7823      	ldrb	r3, [r4, #0]
 8004f38:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8004f3a:	2364      	movs	r3, #100	; 0x64
 8004f3c:	221e      	movs	r2, #30
 8004f3e:	4904      	ldr	r1, [pc, #16]	; (8004f50 <calibrate+0x104>)
 8004f40:	4805      	ldr	r0, [pc, #20]	; (8004f58 <calibrate+0x10c>)
 8004f42:	f7fe fc93 	bl	800386c <HAL_UART_Transmit>
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000198 	.word	0x20000198
 8004f54:	08005858 	.word	0x08005858
 8004f58:	200001b8 	.word	0x200001b8
 8004f5c:	2000023c 	.word	0x2000023c
 8004f60:	200002d8 	.word	0x200002d8
 8004f64:	20000194 	.word	0x20000194
 8004f68:	20000238 	.word	0x20000238
 8004f6c:	20000240 	.word	0x20000240
 8004f70:	20000154 	.word	0x20000154
 8004f74:	200000ba 	.word	0x200000ba
 8004f78:	08005874 	.word	0x08005874

08004f7c <readAccelerometer>:


/**
 * This function reads the sensor value every 0.1s (which is through timer setting) and store the acceleration value
 */
void readAccelerometer() {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
	// read the sensor value
	getXYZ();
 8004f80:	f7ff ff00 	bl	8004d84 <getXYZ>

	// Subtract the steady state value
	Sample_X = Sample_X - sstatex;
 8004f84:	4b33      	ldr	r3, [pc, #204]	; (8005054 <readAccelerometer+0xd8>)
 8004f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	4b32      	ldr	r3, [pc, #200]	; (8005058 <readAccelerometer+0xdc>)
 8004f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	b21a      	sxth	r2, r3
 8004f9a:	4b2e      	ldr	r3, [pc, #184]	; (8005054 <readAccelerometer+0xd8>)
 8004f9c:	801a      	strh	r2, [r3, #0]
	Sample_Y = Sample_Y - sstatey;
 8004f9e:	4b2f      	ldr	r3, [pc, #188]	; (800505c <readAccelerometer+0xe0>)
 8004fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	4b2e      	ldr	r3, [pc, #184]	; (8005060 <readAccelerometer+0xe4>)
 8004fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	b21a      	sxth	r2, r3
 8004fb4:	4b29      	ldr	r3, [pc, #164]	; (800505c <readAccelerometer+0xe0>)
 8004fb6:	801a      	strh	r2, [r3, #0]
	Sample_Z = Sample_Z - sstatez;
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <readAccelerometer+0xe8>)
 8004fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	4b29      	ldr	r3, [pc, #164]	; (8005068 <readAccelerometer+0xec>)
 8004fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	b21a      	sxth	r2, r3
 8004fce:	4b25      	ldr	r3, [pc, #148]	; (8005064 <readAccelerometer+0xe8>)
 8004fd0:	801a      	strh	r2, [r3, #0]

	// Just store the one that we are using (5 sample each time)
	accelerationx[count] = Sample_X - sstatex;
 8004fd2:	4b20      	ldr	r3, [pc, #128]	; (8005054 <readAccelerometer+0xd8>)
 8004fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <readAccelerometer+0xdc>)
 8004fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	b299      	uxth	r1, r3
 8004fe6:	4b21      	ldr	r3, [pc, #132]	; (800506c <readAccelerometer+0xf0>)
 8004fe8:	f993 3000 	ldrsb.w	r3, [r3]
 8004fec:	461a      	mov	r2, r3
 8004fee:	b209      	sxth	r1, r1
 8004ff0:	4b1f      	ldr	r3, [pc, #124]	; (8005070 <readAccelerometer+0xf4>)
 8004ff2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if (abs(accelerationx[count]) < 10) {
 8004ff6:	4b1d      	ldr	r3, [pc, #116]	; (800506c <readAccelerometer+0xf0>)
 8004ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <readAccelerometer+0xf4>)
 8005000:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005004:	f113 0f09 	cmn.w	r3, #9
 8005008:	db10      	blt.n	800502c <readAccelerometer+0xb0>
 800500a:	4b18      	ldr	r3, [pc, #96]	; (800506c <readAccelerometer+0xf0>)
 800500c:	f993 3000 	ldrsb.w	r3, [r3]
 8005010:	461a      	mov	r2, r3
 8005012:	4b17      	ldr	r3, [pc, #92]	; (8005070 <readAccelerometer+0xf4>)
 8005014:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005018:	2b09      	cmp	r3, #9
 800501a:	dc07      	bgt.n	800502c <readAccelerometer+0xb0>
		accelerationx[count] = 0;
 800501c:	4b13      	ldr	r3, [pc, #76]	; (800506c <readAccelerometer+0xf0>)
 800501e:	f993 3000 	ldrsb.w	r3, [r3]
 8005022:	461a      	mov	r2, r3
 8005024:	4b12      	ldr	r3, [pc, #72]	; (8005070 <readAccelerometer+0xf4>)
 8005026:	2100      	movs	r1, #0
 8005028:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	}
	count = (count + 1) % 5;
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <readAccelerometer+0xf0>)
 800502e:	f993 3000 	ldrsb.w	r3, [r3]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <readAccelerometer+0xf8>)
 8005036:	fb83 1302 	smull	r1, r3, r3, r2
 800503a:	1059      	asrs	r1, r3, #1
 800503c:	17d3      	asrs	r3, r2, #31
 800503e:	1ac9      	subs	r1, r1, r3
 8005040:	460b      	mov	r3, r1
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	1ad1      	subs	r1, r2, r3
 8005048:	b24a      	sxtb	r2, r1
 800504a:	4b08      	ldr	r3, [pc, #32]	; (800506c <readAccelerometer+0xf0>)
 800504c:	701a      	strb	r2, [r3, #0]
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200002d8 	.word	0x200002d8
 8005058:	2000023c 	.word	0x2000023c
 800505c:	20000238 	.word	0x20000238
 8005060:	20000194 	.word	0x20000194
 8005064:	20000154 	.word	0x20000154
 8005068:	20000240 	.word	0x20000240
 800506c:	2000023e 	.word	0x2000023e
 8005070:	200000bc 	.word	0x200000bc
 8005074:	66666667 	.word	0x66666667

08005078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08a      	sub	sp, #40	; 0x28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <I2Cx_MspInit+0xa8>)
 8005092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005094:	4a26      	ldr	r2, [pc, #152]	; (8005130 <I2Cx_MspInit+0xa8>)
 8005096:	f043 0302 	orr.w	r3, r3, #2
 800509a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800509c:	4b24      	ldr	r3, [pc, #144]	; (8005130 <I2Cx_MspInit+0xa8>)
 800509e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80050a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80050ae:	2312      	movs	r3, #18
 80050b0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80050b2:	2301      	movs	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b6:	2303      	movs	r3, #3
 80050b8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80050ba:	2304      	movs	r3, #4
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80050be:	f107 0314 	add.w	r3, r7, #20
 80050c2:	4619      	mov	r1, r3
 80050c4:	481b      	ldr	r0, [pc, #108]	; (8005134 <I2Cx_MspInit+0xac>)
 80050c6:	f7fb fba7 	bl	8000818 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80050ca:	f107 0314 	add.w	r3, r7, #20
 80050ce:	4619      	mov	r1, r3
 80050d0:	4818      	ldr	r0, [pc, #96]	; (8005134 <I2Cx_MspInit+0xac>)
 80050d2:	f7fb fba1 	bl	8000818 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80050d6:	4b16      	ldr	r3, [pc, #88]	; (8005130 <I2Cx_MspInit+0xa8>)
 80050d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050da:	4a15      	ldr	r2, [pc, #84]	; (8005130 <I2Cx_MspInit+0xa8>)
 80050dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050e0:	6593      	str	r3, [r2, #88]	; 0x58
 80050e2:	4b13      	ldr	r3, [pc, #76]	; (8005130 <I2Cx_MspInit+0xa8>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <I2Cx_MspInit+0xa8>)
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	4a0f      	ldr	r2, [pc, #60]	; (8005130 <I2Cx_MspInit+0xa8>)
 80050f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050f8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80050fa:	4b0d      	ldr	r3, [pc, #52]	; (8005130 <I2Cx_MspInit+0xa8>)
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	4a0c      	ldr	r2, [pc, #48]	; (8005130 <I2Cx_MspInit+0xa8>)
 8005100:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005104:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8005106:	2200      	movs	r2, #0
 8005108:	210f      	movs	r1, #15
 800510a:	2021      	movs	r0, #33	; 0x21
 800510c:	f7fb fb4d 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8005110:	2021      	movs	r0, #33	; 0x21
 8005112:	f7fb fb66 	bl	80007e2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8005116:	2200      	movs	r2, #0
 8005118:	210f      	movs	r1, #15
 800511a:	2022      	movs	r0, #34	; 0x22
 800511c:	f7fb fb45 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8005120:	2022      	movs	r0, #34	; 0x22
 8005122:	f7fb fb5e 	bl	80007e2 <HAL_NVIC_EnableIRQ>
}
 8005126:	bf00      	nop
 8005128:	3728      	adds	r7, #40	; 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000
 8005134:	48000400 	.word	0x48000400

08005138 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <I2Cx_Init+0x54>)
 8005144:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a11      	ldr	r2, [pc, #68]	; (8005190 <I2Cx_Init+0x58>)
 800514a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff ff89 	bl	8005088 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fb fdea 	bl	8000d50 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800517c:	2100      	movs	r1, #0
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc faee 	bl	8001760 <HAL_I2CEx_ConfigAnalogFilter>
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40005800 	.word	0x40005800
 8005190:	00702681 	.word	0x00702681

08005194 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	; 0x28
 8005198:	af04      	add	r7, sp, #16
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	461a      	mov	r2, r3
 80051a2:	4603      	mov	r3, r0
 80051a4:	72fb      	strb	r3, [r7, #11]
 80051a6:	460b      	mov	r3, r1
 80051a8:	813b      	strh	r3, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80051b2:	7afb      	ldrb	r3, [r7, #11]
 80051b4:	b299      	uxth	r1, r3
 80051b6:	88f8      	ldrh	r0, [r7, #6]
 80051b8:	893a      	ldrh	r2, [r7, #8]
 80051ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051be:	9302      	str	r3, [sp, #8]
 80051c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	4603      	mov	r3, r0
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7fb ff92 	bl	80010f4 <HAL_I2C_Mem_Read>
 80051d0:	4603      	mov	r3, r0
 80051d2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80051da:	7afb      	ldrb	r3, [r7, #11]
 80051dc:	4619      	mov	r1, r3
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f832 	bl	8005248 <I2Cx_Error>
  }
  return status;
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b08a      	sub	sp, #40	; 0x28
 80051f2:	af04      	add	r7, sp, #16
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	4608      	mov	r0, r1
 80051f8:	4611      	mov	r1, r2
 80051fa:	461a      	mov	r2, r3
 80051fc:	4603      	mov	r3, r0
 80051fe:	72fb      	strb	r3, [r7, #11]
 8005200:	460b      	mov	r3, r1
 8005202:	813b      	strh	r3, [r7, #8]
 8005204:	4613      	mov	r3, r2
 8005206:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800520c:	7afb      	ldrb	r3, [r7, #11]
 800520e:	b299      	uxth	r1, r3
 8005210:	88f8      	ldrh	r0, [r7, #6]
 8005212:	893a      	ldrh	r2, [r7, #8]
 8005214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005218:	9302      	str	r3, [sp, #8]
 800521a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	4603      	mov	r3, r0
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7fb fe51 	bl	8000ecc <HAL_I2C_Mem_Write>
 800522a:	4603      	mov	r3, r0
 800522c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005234:	7afb      	ldrb	r3, [r7, #11]
 8005236:	4619      	mov	r1, r3
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f805 	bl	8005248 <I2Cx_Error>
  }
  return status;
 800523e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fb fe0a 	bl	8000e6e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff ff6c 	bl	8005138 <I2Cx_Init>
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800526c:	4802      	ldr	r0, [pc, #8]	; (8005278 <SENSOR_IO_Init+0x10>)
 800526e:	f7ff ff63 	bl	8005138 <I2Cx_Init>
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000370 	.word	0x20000370

0800527c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af02      	add	r7, sp, #8
 8005282:	4603      	mov	r3, r0
 8005284:	71fb      	strb	r3, [r7, #7]
 8005286:	460b      	mov	r3, r1
 8005288:	71bb      	strb	r3, [r7, #6]
 800528a:	4613      	mov	r3, r2
 800528c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800528e:	79bb      	ldrb	r3, [r7, #6]
 8005290:	b29a      	uxth	r2, r3
 8005292:	79f9      	ldrb	r1, [r7, #7]
 8005294:	2301      	movs	r3, #1
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	1d7b      	adds	r3, r7, #5
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2301      	movs	r3, #1
 800529e:	4803      	ldr	r0, [pc, #12]	; (80052ac <SENSOR_IO_Write+0x30>)
 80052a0:	f7ff ffa5 	bl	80051ee <I2Cx_WriteMultiple>
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000370 	.word	0x20000370

080052b0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	4603      	mov	r3, r0
 80052b8:	460a      	mov	r2, r1
 80052ba:	71fb      	strb	r3, [r7, #7]
 80052bc:	4613      	mov	r3, r2
 80052be:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80052c4:	79bb      	ldrb	r3, [r7, #6]
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	79f9      	ldrb	r1, [r7, #7]
 80052ca:	2301      	movs	r3, #1
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	f107 030f 	add.w	r3, r7, #15
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	2301      	movs	r3, #1
 80052d6:	4804      	ldr	r0, [pc, #16]	; (80052e8 <SENSOR_IO_Read+0x38>)
 80052d8:	f7ff ff5c 	bl	8005194 <I2Cx_ReadMultiple>

  return read_value;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20000370 	.word	0x20000370

080052ec <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	603a      	str	r2, [r7, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	71fb      	strb	r3, [r7, #7]
 80052fa:	460b      	mov	r3, r1
 80052fc:	71bb      	strb	r3, [r7, #6]
 80052fe:	4613      	mov	r3, r2
 8005300:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8005302:	79bb      	ldrb	r3, [r7, #6]
 8005304:	b29a      	uxth	r2, r3
 8005306:	79f9      	ldrb	r1, [r7, #7]
 8005308:	88bb      	ldrh	r3, [r7, #4]
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	2301      	movs	r3, #1
 8005312:	4804      	ldr	r0, [pc, #16]	; (8005324 <SENSOR_IO_ReadMultiple+0x38>)
 8005314:	f7ff ff3e 	bl	8005194 <I2Cx_ReadMultiple>
 8005318:	4603      	mov	r3, r0
 800531a:	b29b      	uxth	r3, r3
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20000370 	.word	0x20000370

08005328 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8005332:	2300      	movs	r3, #0
 8005334:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8005336:	4b19      	ldr	r3, [pc, #100]	; (800539c <BSP_ACCELERO_Init+0x74>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4798      	blx	r3
 800533c:	4603      	mov	r3, r0
 800533e:	2b6a      	cmp	r3, #106	; 0x6a
 8005340:	d002      	beq.n	8005348 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
 8005346:	e024      	b.n	8005392 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8005348:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <BSP_ACCELERO_Init+0x78>)
 800534a:	4a14      	ldr	r2, [pc, #80]	; (800539c <BSP_ACCELERO_Init+0x74>)
 800534c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800534e:	2330      	movs	r3, #48	; 0x30
 8005350:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8005356:	2300      	movs	r3, #0
 8005358:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800535a:	2340      	movs	r3, #64	; 0x40
 800535c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8005366:	797a      	ldrb	r2, [r7, #5]
 8005368:	7abb      	ldrb	r3, [r7, #10]
 800536a:	4313      	orrs	r3, r2
 800536c:	b2db      	uxtb	r3, r3
 800536e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8005370:	7a3b      	ldrb	r3, [r7, #8]
 8005372:	f043 0304 	orr.w	r3, r3, #4
 8005376:	b2db      	uxtb	r3, r3
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	b21a      	sxth	r2, r3
 800537c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	b21b      	sxth	r3, r3
 8005384:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <BSP_ACCELERO_Init+0x78>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	89ba      	ldrh	r2, [r7, #12]
 800538e:	4610      	mov	r0, r2
 8005390:	4798      	blx	r3
  }  

  return ret;
 8005392:	7bfb      	ldrb	r3, [r7, #15]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000024 	.word	0x20000024
 80053a0:	200000e0 	.word	0x200000e0

080053a4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80053be:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4798      	blx	r3
    }
  }
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	200000e0 	.word	0x200000e0

080053d4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80053de:	2300      	movs	r3, #0
 80053e0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80053e2:	4b1b      	ldr	r3, [pc, #108]	; (8005450 <BSP_GYRO_Init+0x7c>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	4798      	blx	r3
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b6a      	cmp	r3, #106	; 0x6a
 80053ec:	d002      	beq.n	80053f4 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
 80053f2:	e028      	b.n	8005446 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80053f4:	4b17      	ldr	r3, [pc, #92]	; (8005454 <BSP_GYRO_Init+0x80>)
 80053f6:	4a16      	ldr	r2, [pc, #88]	; (8005450 <BSP_GYRO_Init+0x7c>)
 80053f8:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80053fe:	2330      	movs	r3, #48	; 0x30
 8005400:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800540a:	2340      	movs	r3, #64	; 0x40
 800540c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8005412:	230c      	movs	r3, #12
 8005414:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8005416:	7aba      	ldrb	r2, [r7, #10]
 8005418:	797b      	ldrb	r3, [r7, #5]
 800541a:	4313      	orrs	r3, r2
 800541c:	b2db      	uxtb	r3, r3
 800541e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8005420:	7a3b      	ldrb	r3, [r7, #8]
 8005422:	f043 0304 	orr.w	r3, r3, #4
 8005426:	b2db      	uxtb	r3, r3
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	b21a      	sxth	r2, r3
 800542c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	b21b      	sxth	r3, r3
 8005434:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <BSP_GYRO_Init+0x80>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	89ba      	ldrh	r2, [r7, #12]
 800543e:	4610      	mov	r0, r2
 8005440:	4798      	blx	r3
    
    ret = GYRO_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8005446:	7bfb      	ldrb	r3, [r7, #15]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20000058 	.word	0x20000058
 8005454:	200000e4 	.word	0x200000e4

08005458 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <BSP_HSENSOR_Init+0x38>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	20be      	movs	r0, #190	; 0xbe
 8005464:	4798      	blx	r3
 8005466:	4603      	mov	r3, r0
 8005468:	2bbc      	cmp	r3, #188	; 0xbc
 800546a:	d002      	beq.n	8005472 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	e009      	b.n	8005486 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8005472:	4b08      	ldr	r3, [pc, #32]	; (8005494 <BSP_HSENSOR_Init+0x3c>)
 8005474:	4a06      	ldr	r2, [pc, #24]	; (8005490 <BSP_HSENSOR_Init+0x38>)
 8005476:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <BSP_HSENSOR_Init+0x3c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	20be      	movs	r0, #190	; 0xbe
 8005480:	4798      	blx	r3
    ret = HSENSOR_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8005486:	687b      	ldr	r3, [r7, #4]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20000008 	.word	0x20000008
 8005494:	200000e8 	.word	0x200000e8

08005498 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <BSP_TSENSOR_Init+0x30>)
 80054a4:	4a09      	ldr	r2, [pc, #36]	; (80054cc <BSP_TSENSOR_Init+0x34>)
 80054a6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80054a8:	f7ff fede 	bl	8005268 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <BSP_TSENSOR_Init+0x30>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2100      	movs	r1, #0
 80054b4:	20be      	movs	r0, #190	; 0xbe
 80054b6:	4798      	blx	r3

  ret = TSENSOR_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80054bc:	79fb      	ldrb	r3, [r7, #7]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200000ec 	.word	0x200000ec
 80054cc:	20000014 	.word	0x20000014

080054d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054d6:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <HAL_MspInit+0x44>)
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	4a0e      	ldr	r2, [pc, #56]	; (8005514 <HAL_MspInit+0x44>)
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	6613      	str	r3, [r2, #96]	; 0x60
 80054e2:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <HAL_MspInit+0x44>)
 80054e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	607b      	str	r3, [r7, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <HAL_MspInit+0x44>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	4a08      	ldr	r2, [pc, #32]	; (8005514 <HAL_MspInit+0x44>)
 80054f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f8:	6593      	str	r3, [r2, #88]	; 0x58
 80054fa:	4b06      	ldr	r3, [pc, #24]	; (8005514 <HAL_MspInit+0x44>)
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000

08005518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005520:	f107 0314 	add.w	r3, r7, #20
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	609a      	str	r2, [r3, #8]
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a17      	ldr	r2, [pc, #92]	; (8005594 <HAL_I2C_MspInit+0x7c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d128      	bne.n	800558c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800553a:	4b17      	ldr	r3, [pc, #92]	; (8005598 <HAL_I2C_MspInit+0x80>)
 800553c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553e:	4a16      	ldr	r2, [pc, #88]	; (8005598 <HAL_I2C_MspInit+0x80>)
 8005540:	f043 0302 	orr.w	r3, r3, #2
 8005544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005546:	4b14      	ldr	r3, [pc, #80]	; (8005598 <HAL_I2C_MspInit+0x80>)
 8005548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005552:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005558:	2312      	movs	r3, #18
 800555a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800555c:	2301      	movs	r3, #1
 800555e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005560:	2303      	movs	r3, #3
 8005562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005564:	2304      	movs	r3, #4
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005568:	f107 0314 	add.w	r3, r7, #20
 800556c:	4619      	mov	r1, r3
 800556e:	480b      	ldr	r0, [pc, #44]	; (800559c <HAL_I2C_MspInit+0x84>)
 8005570:	f7fb f952 	bl	8000818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <HAL_I2C_MspInit+0x80>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	4a07      	ldr	r2, [pc, #28]	; (8005598 <HAL_I2C_MspInit+0x80>)
 800557a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800557e:	6593      	str	r3, [r2, #88]	; 0x58
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_I2C_MspInit+0x80>)
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800558c:	bf00      	nop
 800558e:	3728      	adds	r7, #40	; 0x28
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40005400 	.word	0x40005400
 8005598:	40021000 	.word	0x40021000
 800559c:	48000400 	.word	0x48000400

080055a0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a0b      	ldr	r2, [pc, #44]	; (80055dc <HAL_I2C_MspDeInit+0x3c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10f      	bne.n	80055d2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80055b2:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_I2C_MspDeInit+0x40>)
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b6:	4a0a      	ldr	r2, [pc, #40]	; (80055e0 <HAL_I2C_MspDeInit+0x40>)
 80055b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055bc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80055be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055c2:	4808      	ldr	r0, [pc, #32]	; (80055e4 <HAL_I2C_MspDeInit+0x44>)
 80055c4:	f7fb fad0 	bl	8000b68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80055c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055cc:	4805      	ldr	r0, [pc, #20]	; (80055e4 <HAL_I2C_MspDeInit+0x44>)
 80055ce:	f7fb facb 	bl	8000b68 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40005400 	.word	0x40005400
 80055e0:	40021000 	.word	0x40021000
 80055e4:	48000400 	.word	0x48000400

080055e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f8:	d113      	bne.n	8005622 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <HAL_TIM_Base_MspInit+0x44>)
 80055fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fe:	4a0b      	ldr	r2, [pc, #44]	; (800562c <HAL_TIM_Base_MspInit+0x44>)
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	6593      	str	r3, [r2, #88]	; 0x58
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <HAL_TIM_Base_MspInit+0x44>)
 8005608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005612:	2200      	movs	r2, #0
 8005614:	2100      	movs	r1, #0
 8005616:	201c      	movs	r0, #28
 8005618:	f7fb f8c7 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800561c:	201c      	movs	r0, #28
 800561e:	f7fb f8e0 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40021000 	.word	0x40021000

08005630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005638:	f107 0314 	add.w	r3, r7, #20
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	60da      	str	r2, [r3, #12]
 8005646:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a17      	ldr	r2, [pc, #92]	; (80056ac <HAL_UART_MspInit+0x7c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d127      	bne.n	80056a2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <HAL_UART_MspInit+0x80>)
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	4a16      	ldr	r2, [pc, #88]	; (80056b0 <HAL_UART_MspInit+0x80>)
 8005658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800565c:	6613      	str	r3, [r2, #96]	; 0x60
 800565e:	4b14      	ldr	r3, [pc, #80]	; (80056b0 <HAL_UART_MspInit+0x80>)
 8005660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <HAL_UART_MspInit+0x80>)
 800566c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566e:	4a10      	ldr	r2, [pc, #64]	; (80056b0 <HAL_UART_MspInit+0x80>)
 8005670:	f043 0302 	orr.w	r3, r3, #2
 8005674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005676:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <HAL_UART_MspInit+0x80>)
 8005678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005682:	23c0      	movs	r3, #192	; 0xc0
 8005684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005686:	2302      	movs	r3, #2
 8005688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800568e:	2303      	movs	r3, #3
 8005690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005692:	2307      	movs	r3, #7
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005696:	f107 0314 	add.w	r3, r7, #20
 800569a:	4619      	mov	r1, r3
 800569c:	4805      	ldr	r0, [pc, #20]	; (80056b4 <HAL_UART_MspInit+0x84>)
 800569e:	f7fb f8bb 	bl	8000818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80056a2:	bf00      	nop
 80056a4:	3728      	adds	r7, #40	; 0x28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40013800 	.word	0x40013800
 80056b0:	40021000 	.word	0x40021000
 80056b4:	48000400 	.word	0x48000400

080056b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80056bc:	bf00      	nop
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056c6:	b480      	push	{r7}
 80056c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056ca:	e7fe      	b.n	80056ca <HardFault_Handler+0x4>

080056cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056d0:	e7fe      	b.n	80056d0 <MemManage_Handler+0x4>

080056d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056d6:	e7fe      	b.n	80056d6 <BusFault_Handler+0x4>

080056d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056dc:	e7fe      	b.n	80056dc <UsageFault_Handler+0x4>

080056de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056de:	b480      	push	{r7}
 80056e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056e2:	bf00      	nop
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056f0:	bf00      	nop
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056fa:	b480      	push	{r7}
 80056fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056fe:	bf00      	nop
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800570c:	f7fa ff30 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005710:	bf00      	nop
 8005712:	bd80      	pop	{r7, pc}

08005714 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005718:	4802      	ldr	r0, [pc, #8]	; (8005724 <TIM2_IRQHandler+0x10>)
 800571a:	f7fd fc7f 	bl	800301c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800571e:	bf00      	nop
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000264 	.word	0x20000264

08005728 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800572c:	4b17      	ldr	r3, [pc, #92]	; (800578c <SystemInit+0x64>)
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005732:	4a16      	ldr	r2, [pc, #88]	; (800578c <SystemInit+0x64>)
 8005734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <SystemInit+0x68>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <SystemInit+0x68>)
 8005742:	f043 0301 	orr.w	r3, r3, #1
 8005746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <SystemInit+0x68>)
 800574a:	2200      	movs	r2, #0
 800574c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800574e:	4b10      	ldr	r3, [pc, #64]	; (8005790 <SystemInit+0x68>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a0f      	ldr	r2, [pc, #60]	; (8005790 <SystemInit+0x68>)
 8005754:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005758:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800575c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800575e:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <SystemInit+0x68>)
 8005760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005764:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <SystemInit+0x68>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a09      	ldr	r2, [pc, #36]	; (8005790 <SystemInit+0x68>)
 800576c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005770:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <SystemInit+0x68>)
 8005774:	2200      	movs	r2, #0
 8005776:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005778:	4b04      	ldr	r3, [pc, #16]	; (800578c <SystemInit+0x64>)
 800577a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800577e:	609a      	str	r2, [r3, #8]
#endif
}
 8005780:	bf00      	nop
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	e000ed00 	.word	0xe000ed00
 8005790:	40021000 	.word	0x40021000

08005794 <Reset_Handler>:
 8005794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057cc <LoopForever+0x2>
 8005798:	f7ff ffc6 	bl	8005728 <SystemInit>
 800579c:	2100      	movs	r1, #0
 800579e:	e003      	b.n	80057a8 <LoopCopyDataInit>

080057a0 <CopyDataInit>:
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <LoopForever+0x6>)
 80057a2:	585b      	ldr	r3, [r3, r1]
 80057a4:	5043      	str	r3, [r0, r1]
 80057a6:	3104      	adds	r1, #4

080057a8 <LoopCopyDataInit>:
 80057a8:	480a      	ldr	r0, [pc, #40]	; (80057d4 <LoopForever+0xa>)
 80057aa:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <LoopForever+0xe>)
 80057ac:	1842      	adds	r2, r0, r1
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3f6      	bcc.n	80057a0 <CopyDataInit>
 80057b2:	4a0a      	ldr	r2, [pc, #40]	; (80057dc <LoopForever+0x12>)
 80057b4:	e002      	b.n	80057bc <LoopFillZerobss>

080057b6 <FillZerobss>:
 80057b6:	2300      	movs	r3, #0
 80057b8:	f842 3b04 	str.w	r3, [r2], #4

080057bc <LoopFillZerobss>:
 80057bc:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <LoopForever+0x16>)
 80057be:	429a      	cmp	r2, r3
 80057c0:	d3f9      	bcc.n	80057b6 <FillZerobss>
 80057c2:	f000 f811 	bl	80057e8 <__libc_init_array>
 80057c6:	f7ff f893 	bl	80048f0 <main>

080057ca <LoopForever>:
 80057ca:	e7fe      	b.n	80057ca <LoopForever>
 80057cc:	20018000 	.word	0x20018000
 80057d0:	080058e8 	.word	0x080058e8
 80057d4:	20000000 	.word	0x20000000
 80057d8:	20000098 	.word	0x20000098
 80057dc:	20000098 	.word	0x20000098
 80057e0:	200003bc 	.word	0x200003bc

080057e4 <ADC1_2_IRQHandler>:
 80057e4:	e7fe      	b.n	80057e4 <ADC1_2_IRQHandler>
	...

080057e8 <__libc_init_array>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	4e0d      	ldr	r6, [pc, #52]	; (8005820 <__libc_init_array+0x38>)
 80057ec:	4c0d      	ldr	r4, [pc, #52]	; (8005824 <__libc_init_array+0x3c>)
 80057ee:	1ba4      	subs	r4, r4, r6
 80057f0:	10a4      	asrs	r4, r4, #2
 80057f2:	2500      	movs	r5, #0
 80057f4:	42a5      	cmp	r5, r4
 80057f6:	d109      	bne.n	800580c <__libc_init_array+0x24>
 80057f8:	4e0b      	ldr	r6, [pc, #44]	; (8005828 <__libc_init_array+0x40>)
 80057fa:	4c0c      	ldr	r4, [pc, #48]	; (800582c <__libc_init_array+0x44>)
 80057fc:	f000 f820 	bl	8005840 <_init>
 8005800:	1ba4      	subs	r4, r4, r6
 8005802:	10a4      	asrs	r4, r4, #2
 8005804:	2500      	movs	r5, #0
 8005806:	42a5      	cmp	r5, r4
 8005808:	d105      	bne.n	8005816 <__libc_init_array+0x2e>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005810:	4798      	blx	r3
 8005812:	3501      	adds	r5, #1
 8005814:	e7ee      	b.n	80057f4 <__libc_init_array+0xc>
 8005816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800581a:	4798      	blx	r3
 800581c:	3501      	adds	r5, #1
 800581e:	e7f2      	b.n	8005806 <__libc_init_array+0x1e>
 8005820:	080058e0 	.word	0x080058e0
 8005824:	080058e0 	.word	0x080058e0
 8005828:	080058e0 	.word	0x080058e0
 800582c:	080058e4 	.word	0x080058e4

08005830 <memset>:
 8005830:	4402      	add	r2, r0
 8005832:	4603      	mov	r3, r0
 8005834:	4293      	cmp	r3, r2
 8005836:	d100      	bne.n	800583a <memset+0xa>
 8005838:	4770      	bx	lr
 800583a:	f803 1b01 	strb.w	r1, [r3], #1
 800583e:	e7f9      	b.n	8005834 <memset+0x4>

08005840 <_init>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	bf00      	nop
 8005844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005846:	bc08      	pop	{r3}
 8005848:	469e      	mov	lr, r3
 800584a:	4770      	bx	lr

0800584c <_fini>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr
