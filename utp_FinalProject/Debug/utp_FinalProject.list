
utp_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009854  08009854  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08009854  08009854  00019854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800985c  0800985c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800985c  0800985c  0001985c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009860  08009860  00019860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009864  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010868  2000010c  08009970  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010974  08009970  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e604  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039bd  00000000  00000000  0003e740  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001840  00000000  00000000  00042100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001668  00000000  00000000  00043940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c2a  00000000  00000000  00044fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000156ab  00000000  00000000  0006ebd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdb63  00000000  00000000  0008427d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00181de0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e4  00000000  00000000  00181ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  001887b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f04 	.word	0x08008f04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	08008f04 	.word	0x08008f04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d66:	2003      	movs	r0, #3
 8000d68:	f000 f95e 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 f80d 	bl	8000d8c <HAL_InitTick>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	e001      	b.n	8000d82 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d7e:	f007 f993 	bl	80080a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_InitTick+0x6c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d023      	beq.n	8000de8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_InitTick+0x70>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_InitTick+0x6c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f96b 	bl	8001092 <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10f      	bne.n	8000de2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d809      	bhi.n	8000ddc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd0:	f000 f935 	bl	800103e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_InitTick+0x74>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e007      	b.n	8000dec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e004      	b.n	8000dec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e001      	b.n	8000dec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	200000a4 	.word	0x200000a4
 8000e00:	20000000 	.word	0x20000000

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000004 	.word	0x20000004
 8000e28:	200002f0 	.word	0x200002f0

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200002f0 	.word	0x200002f0

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_Delay+0x40>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000004 	.word	0x20000004

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	; (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff29 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff3e 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff31 	bl	8000eec <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffa2 	bl	8000fe4 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e014      	b.n	80010e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d105      	bne.n	80010d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f007 f80f 	bl	80080f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2202      	movs	r2, #2
 80010d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	795b      	ldrb	r3, [r3, #5]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_DAC_Start_DMA+0x1e>
 800110a:	2302      	movs	r3, #2
 800110c:	e09e      	b.n	800124c <HAL_DAC_Start_DMA+0x15c>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2201      	movs	r2, #1
 8001112:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2202      	movs	r2, #2
 8001118:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d12a      	bne.n	8001176 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	4a4b      	ldr	r2, [pc, #300]	; (8001254 <HAL_DAC_Start_DMA+0x164>)
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	4a4a      	ldr	r2, [pc, #296]	; (8001258 <HAL_DAC_Start_DMA+0x168>)
 800112e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a49      	ldr	r2, [pc, #292]	; (800125c <HAL_DAC_Start_DMA+0x16c>)
 8001136:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001146:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d009      	beq.n	8001162 <HAL_DAC_Start_DMA+0x72>
 800114e:	2b08      	cmp	r3, #8
 8001150:	d00c      	beq.n	800116c <HAL_DAC_Start_DMA+0x7c>
 8001152:	2b00      	cmp	r3, #0
 8001154:	d000      	beq.n	8001158 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001156:	e039      	b.n	80011cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3308      	adds	r3, #8
 800115e:	613b      	str	r3, [r7, #16]
        break;
 8001160:	e034      	b.n	80011cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	330c      	adds	r3, #12
 8001168:	613b      	str	r3, [r7, #16]
        break;
 800116a:	e02f      	b.n	80011cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3310      	adds	r3, #16
 8001172:	613b      	str	r3, [r7, #16]
        break;
 8001174:	e02a      	b.n	80011cc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	4a39      	ldr	r2, [pc, #228]	; (8001260 <HAL_DAC_Start_DMA+0x170>)
 800117c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	4a38      	ldr	r2, [pc, #224]	; (8001264 <HAL_DAC_Start_DMA+0x174>)
 8001184:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	4a37      	ldr	r2, [pc, #220]	; (8001268 <HAL_DAC_Start_DMA+0x178>)
 800118c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800119c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d009      	beq.n	80011b8 <HAL_DAC_Start_DMA+0xc8>
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d00c      	beq.n	80011c2 <HAL_DAC_Start_DMA+0xd2>
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d000      	beq.n	80011ae <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80011ac:	e00e      	b.n	80011cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3314      	adds	r3, #20
 80011b4:	613b      	str	r3, [r7, #16]
        break;
 80011b6:	e009      	b.n	80011cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3318      	adds	r3, #24
 80011be:	613b      	str	r3, [r7, #16]
        break;
 80011c0:	e004      	b.n	80011cc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	331c      	adds	r3, #28
 80011c8:	613b      	str	r3, [r7, #16]
        break;
 80011ca:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d111      	bne.n	80011f6 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011e0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6898      	ldr	r0, [r3, #8]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	f000 faae 	bl	800174c <HAL_DMA_Start_IT>
 80011f0:	4603      	mov	r3, r0
 80011f2:	75fb      	strb	r3, [r7, #23]
 80011f4:	e010      	b.n	8001218 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001204:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	68d8      	ldr	r0, [r3, #12]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	f000 fa9c 	bl	800174c <HAL_DMA_Start_IT>
 8001214:	4603      	mov	r3, r0
 8001216:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10c      	bne.n	800123e <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6819      	ldr	r1, [r3, #0]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2201      	movs	r2, #1
 8001232:	409a      	lsls	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e005      	b.n	800124a <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	f043 0204 	orr.w	r2, r3, #4
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800124a:	7dfb      	ldrb	r3, [r7, #23]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	080014c9 	.word	0x080014c9
 8001258:	080014eb 	.word	0x080014eb
 800125c:	08001507 	.word	0x08001507
 8001260:	08001571 	.word	0x08001571
 8001264:	08001593 	.word	0x08001593
 8001268:	080015af 	.word	0x080015af

0800126c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	795b      	ldrb	r3, [r3, #5]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_DAC_ConfigChannel+0x1c>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e107      	b.n	80014c0 <HAL_DAC_ConfigChannel+0x22c>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2201      	movs	r2, #1
 80012b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2202      	movs	r2, #2
 80012ba:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d174      	bne.n	80013ae <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80012c4:	f7ff fdb2 	bl	8000e2c <HAL_GetTick>
 80012c8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d134      	bne.n	800133a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80012d0:	e011      	b.n	80012f6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012d2:	f7ff fdab 	bl	8000e2c <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d90a      	bls.n	80012f6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	f043 0208 	orr.w	r2, r3, #8
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2203      	movs	r2, #3
 80012f0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e0e4      	b.n	80014c0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e6      	bne.n	80012d2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff fd9d 	bl	8000e44 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	6992      	ldr	r2, [r2, #24]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
 8001314:	e01e      	b.n	8001354 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001316:	f7ff fd89 	bl	8000e2c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d90a      	bls.n	800133a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f043 0208 	orr.w	r2, r3, #8
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2203      	movs	r2, #3
 8001334:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e0c2      	b.n	80014c0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001340:	2b00      	cmp	r3, #0
 8001342:	dbe8      	blt.n	8001316 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fd7d 	bl	8000e44 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	6992      	ldr	r2, [r2, #24]
 8001352:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	ea02 0103 	and.w	r1, r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	69da      	ldr	r2, [r3, #28]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	409a      	lsls	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	21ff      	movs	r1, #255	; 0xff
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	ea02 0103 	and.w	r1, r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	6a1a      	ldr	r2, [r3, #32]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	409a      	lsls	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d11d      	bne.n	80013f2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013bc:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	221f      	movs	r2, #31
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	2207      	movs	r2, #7
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	431a      	orrs	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	400a      	ands	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	f640 72fc 	movw	r2, #4092	; 0xffc
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6819      	ldr	r1, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	22c0      	movs	r2, #192	; 0xc0
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43da      	mvns	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	400a      	ands	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f005 ff5c 	bl	8007394 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	711a      	strb	r2, [r3, #4]
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff feb7 	bl	800126c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f043 0204 	orr.w	r2, r3, #4
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f7ff fead 	bl	8001280 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2201      	movs	r2, #1
 800152a:	711a      	strb	r2, [r3, #4]
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f7ff ffd8 	bl	8001534 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	711a      	strb	r2, [r3, #4]
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff ffd1 	bl	8001548 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	f043 0204 	orr.w	r2, r3, #4
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff ffc7 	bl	800155c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2201      	movs	r2, #1
 80015d2:	711a      	strb	r2, [r3, #4]
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e098      	b.n	8001720 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b4d      	ldr	r3, [pc, #308]	; (800172c <HAL_DMA_Init+0x150>)
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d80f      	bhi.n	800161a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <HAL_DMA_Init+0x154>)
 8001602:	4413      	add	r3, r2
 8001604:	4a4b      	ldr	r2, [pc, #300]	; (8001734 <HAL_DMA_Init+0x158>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_DMA_Init+0x15c>)
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
 8001618:	e00e      	b.n	8001638 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b46      	ldr	r3, [pc, #280]	; (800173c <HAL_DMA_Init+0x160>)
 8001622:	4413      	add	r3, r2
 8001624:	4a43      	ldr	r2, [pc, #268]	; (8001734 <HAL_DMA_Init+0x158>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	009a      	lsls	r2, r3, #2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a42      	ldr	r2, [pc, #264]	; (8001740 <HAL_DMA_Init+0x164>)
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800164e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001652:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800165c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001692:	d039      	beq.n	8001708 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	4a27      	ldr	r2, [pc, #156]	; (8001738 <HAL_DMA_Init+0x15c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d11a      	bne.n	80016d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_DMA_Init+0x168>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f003 031c 	and.w	r3, r3, #28
 80016aa:	210f      	movs	r1, #15
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4924      	ldr	r1, [pc, #144]	; (8001744 <HAL_DMA_Init+0x168>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_DMA_Init+0x168>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	f003 031c 	and.w	r3, r3, #28
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	491d      	ldr	r1, [pc, #116]	; (8001744 <HAL_DMA_Init+0x168>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
 80016d2:	e019      	b.n	8001708 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_DMA_Init+0x16c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f003 031c 	and.w	r3, r3, #28
 80016e0:	210f      	movs	r1, #15
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4917      	ldr	r1, [pc, #92]	; (8001748 <HAL_DMA_Init+0x16c>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_DMA_Init+0x16c>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6859      	ldr	r1, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f003 031c 	and.w	r3, r3, #28
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	4911      	ldr	r1, [pc, #68]	; (8001748 <HAL_DMA_Init+0x16c>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40020407 	.word	0x40020407
 8001730:	bffdfff8 	.word	0xbffdfff8
 8001734:	cccccccd 	.word	0xcccccccd
 8001738:	40020000 	.word	0x40020000
 800173c:	bffdfbf8 	.word	0xbffdfbf8
 8001740:	40020400 	.word	0x40020400
 8001744:	400200a8 	.word	0x400200a8
 8001748:	400204a8 	.word	0x400204a8

0800174c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_DMA_Start_IT+0x20>
 8001768:	2302      	movs	r3, #2
 800176a:	e04b      	b.n	8001804 <HAL_DMA_Start_IT+0xb8>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d13a      	bne.n	80017f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2202      	movs	r2, #2
 8001784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0201 	bic.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 f91e 	bl	80019e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 020e 	orr.w	r2, r2, #14
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e00f      	b.n	80017e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0204 	bic.w	r2, r2, #4
 80017d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 020a 	orr.w	r2, r2, #10
 80017e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e005      	b.n	8001802 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017fe:	2302      	movs	r3, #2
 8001800:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d008      	beq.n	8001836 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2204      	movs	r2, #4
 8001828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e022      	b.n	800187c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 020e 	bic.w	r2, r2, #14
 8001844:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0201 	bic.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f003 021c 	and.w	r2, r3, #28
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	2101      	movs	r1, #1
 8001864:	fa01 f202 	lsl.w	r2, r1, r2
 8001868:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a4:	f003 031c 	and.w	r3, r3, #28
 80018a8:	2204      	movs	r2, #4
 80018aa:	409a      	lsls	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d026      	beq.n	8001902 <HAL_DMA_IRQHandler+0x7a>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d021      	beq.n	8001902 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d107      	bne.n	80018dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0204 	bic.w	r2, r2, #4
 80018da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	f003 021c 	and.w	r2, r3, #28
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	2104      	movs	r1, #4
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d071      	beq.n	80019dc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001900:	e06c      	b.n	80019dc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f003 031c 	and.w	r3, r3, #28
 800190a:	2202      	movs	r2, #2
 800190c:	409a      	lsls	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d02e      	beq.n	8001974 <HAL_DMA_IRQHandler+0xec>
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d029      	beq.n	8001974 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10b      	bne.n	8001946 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 020a 	bic.w	r2, r2, #10
 800193c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f003 021c 	and.w	r2, r3, #28
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	2102      	movs	r1, #2
 8001954:	fa01 f202 	lsl.w	r2, r1, r2
 8001958:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	2b00      	cmp	r3, #0
 8001968:	d038      	beq.n	80019dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001972:	e033      	b.n	80019dc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001978:	f003 031c 	and.w	r3, r3, #28
 800197c:	2208      	movs	r2, #8
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d02a      	beq.n	80019de <HAL_DMA_IRQHandler+0x156>
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d025      	beq.n	80019de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 020e 	bic.w	r2, r2, #14
 80019a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f003 021c 	and.w	r2, r3, #28
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
}
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f003 021c 	and.w	r2, r3, #28
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	2101      	movs	r1, #1
 8001a02:	fa01 f202 	lsl.w	r2, r1, r2
 8001a06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d108      	bne.n	8001a2a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a28:	e007      	b.n	8001a3a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	60da      	str	r2, [r3, #12]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	e17f      	b.n	8001d58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8171 	beq.w	8001d52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d00b      	beq.n	8001a90 <HAL_GPIO_Init+0x48>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d007      	beq.n	8001a90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a84:	2b11      	cmp	r3, #17
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b12      	cmp	r3, #18
 8001a8e:	d130      	bne.n	8001af2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	f003 0201 	and.w	r2, r3, #1
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d118      	bne.n	8001b30 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x128>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b12      	cmp	r3, #18
 8001b6e:	d123      	bne.n	8001bb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	6939      	ldr	r1, [r7, #16]
 8001bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80ac 	beq.w	8001d52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <HAL_GPIO_Init+0x32c>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfe:	4a5d      	ldr	r2, [pc, #372]	; (8001d74 <HAL_GPIO_Init+0x32c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6613      	str	r3, [r2, #96]	; 0x60
 8001c06:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <HAL_GPIO_Init+0x32c>)
 8001c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c12:	4a59      	ldr	r2, [pc, #356]	; (8001d78 <HAL_GPIO_Init+0x330>)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c3c:	d025      	beq.n	8001c8a <HAL_GPIO_Init+0x242>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_GPIO_Init+0x334>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01f      	beq.n	8001c86 <HAL_GPIO_Init+0x23e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4d      	ldr	r2, [pc, #308]	; (8001d80 <HAL_GPIO_Init+0x338>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d019      	beq.n	8001c82 <HAL_GPIO_Init+0x23a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <HAL_GPIO_Init+0x33c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x236>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4b      	ldr	r2, [pc, #300]	; (8001d88 <HAL_GPIO_Init+0x340>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00d      	beq.n	8001c7a <HAL_GPIO_Init+0x232>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4a      	ldr	r2, [pc, #296]	; (8001d8c <HAL_GPIO_Init+0x344>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x22e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a49      	ldr	r2, [pc, #292]	; (8001d90 <HAL_GPIO_Init+0x348>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_GPIO_Init+0x22a>
 8001c6e:	2306      	movs	r3, #6
 8001c70:	e00c      	b.n	8001c8c <HAL_GPIO_Init+0x244>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e00a      	b.n	8001c8c <HAL_GPIO_Init+0x244>
 8001c76:	2305      	movs	r3, #5
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x244>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x244>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x244>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x244>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x244>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c9c:	4936      	ldr	r1, [pc, #216]	; (8001d78 <HAL_GPIO_Init+0x330>)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001caa:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <HAL_GPIO_Init+0x34c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cce:	4a31      	ldr	r2, [pc, #196]	; (8001d94 <HAL_GPIO_Init+0x34c>)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_GPIO_Init+0x34c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cf8:	4a26      	ldr	r2, [pc, #152]	; (8001d94 <HAL_GPIO_Init+0x34c>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_GPIO_Init+0x34c>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_GPIO_Init+0x34c>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_GPIO_Init+0x34c>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_GPIO_Init+0x34c>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f47f ae78 	bne.w	8001a58 <HAL_GPIO_Init+0x10>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	48000400 	.word	0x48000400
 8001d80:	48000800 	.word	0x48000800
 8001d84:	48000c00 	.word	0x48000c00
 8001d88:	48001000 	.word	0x48001000
 8001d8c:	48001400 	.word	0x48001400
 8001d90:	48001800 	.word	0x48001800
 8001d94:	40010400 	.word	0x40010400

08001d98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001da6:	e0cd      	b.n	8001f44 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001da8:	2201      	movs	r2, #1
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80c0 	beq.w	8001f3e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001dbe:	4a68      	ldr	r2, [pc, #416]	; (8001f60 <HAL_GPIO_DeInit+0x1c8>)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001de6:	d025      	beq.n	8001e34 <HAL_GPIO_DeInit+0x9c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a5e      	ldr	r2, [pc, #376]	; (8001f64 <HAL_GPIO_DeInit+0x1cc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d01f      	beq.n	8001e30 <HAL_GPIO_DeInit+0x98>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a5d      	ldr	r2, [pc, #372]	; (8001f68 <HAL_GPIO_DeInit+0x1d0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d019      	beq.n	8001e2c <HAL_GPIO_DeInit+0x94>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a5c      	ldr	r2, [pc, #368]	; (8001f6c <HAL_GPIO_DeInit+0x1d4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <HAL_GPIO_DeInit+0x90>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <HAL_GPIO_DeInit+0x1d8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00d      	beq.n	8001e24 <HAL_GPIO_DeInit+0x8c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a5a      	ldr	r2, [pc, #360]	; (8001f74 <HAL_GPIO_DeInit+0x1dc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <HAL_GPIO_DeInit+0x88>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a59      	ldr	r2, [pc, #356]	; (8001f78 <HAL_GPIO_DeInit+0x1e0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_GPIO_DeInit+0x84>
 8001e18:	2306      	movs	r3, #6
 8001e1a:	e00c      	b.n	8001e36 <HAL_GPIO_DeInit+0x9e>
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	e00a      	b.n	8001e36 <HAL_GPIO_DeInit+0x9e>
 8001e20:	2305      	movs	r3, #5
 8001e22:	e008      	b.n	8001e36 <HAL_GPIO_DeInit+0x9e>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e006      	b.n	8001e36 <HAL_GPIO_DeInit+0x9e>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e004      	b.n	8001e36 <HAL_GPIO_DeInit+0x9e>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_DeInit+0x9e>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_GPIO_DeInit+0x9e>
 8001e34:	2300      	movs	r3, #0
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	f002 0203 	and.w	r2, r2, #3
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d132      	bne.n	8001eac <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001e46:	4b4d      	ldr	r3, [pc, #308]	; (8001f7c <HAL_GPIO_DeInit+0x1e4>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	494b      	ldr	r1, [pc, #300]	; (8001f7c <HAL_GPIO_DeInit+0x1e4>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001e54:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_GPIO_DeInit+0x1e4>)
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	4947      	ldr	r1, [pc, #284]	; (8001f7c <HAL_GPIO_DeInit+0x1e4>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001e62:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <HAL_GPIO_DeInit+0x1e4>)
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4944      	ldr	r1, [pc, #272]	; (8001f7c <HAL_GPIO_DeInit+0x1e4>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001e70:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <HAL_GPIO_DeInit+0x1e4>)
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	4940      	ldr	r1, [pc, #256]	; (8001f7c <HAL_GPIO_DeInit+0x1e4>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001e8e:	4a34      	ldr	r2, [pc, #208]	; (8001f60 <HAL_GPIO_DeInit+0x1c8>)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	4830      	ldr	r0, [pc, #192]	; (8001f60 <HAL_GPIO_DeInit+0x1c8>)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2103      	movs	r1, #3
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	08d2      	lsrs	r2, r2, #3
 8001ee0:	4019      	ands	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	2101      	movs	r1, #1
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2103      	movs	r1, #3
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	401a      	ands	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2e:	2101      	movs	r1, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	401a      	ands	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f af2b 	bne.w	8001da8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001f52:	bf00      	nop
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40010000 	.word	0x40010000
 8001f64:	48000400 	.word	0x48000400
 8001f68:	48000800 	.word	0x48000800
 8001f6c:	48000c00 	.word	0x48000c00
 8001f70:	48001000 	.word	0x48001000
 8001f74:	48001400 	.word	0x48001400
 8001f78:	48001800 	.word	0x48001800
 8001f7c:	40010400 	.word	0x40010400

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	041a      	lsls	r2, r3, #16
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43d9      	mvns	r1, r3
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	400b      	ands	r3, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e081      	b.n	80020fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f006 f8de 	bl	80081cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2224      	movs	r2, #36	; 0x24
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002034:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002044:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	e006      	b.n	800206c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800206a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d104      	bne.n	800207e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800207c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800208c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	ea42 0103 	orr.w	r1, r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	021a      	lsls	r2, r3, #8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69d9      	ldr	r1, [r3, #28]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e021      	b.n	8002158 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f006 f891 	bl	8008254 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	4608      	mov	r0, r1
 800216a:	4611      	mov	r1, r2
 800216c:	461a      	mov	r2, r3
 800216e:	4603      	mov	r3, r0
 8002170:	817b      	strh	r3, [r7, #10]
 8002172:	460b      	mov	r3, r1
 8002174:	813b      	strh	r3, [r7, #8]
 8002176:	4613      	mov	r3, r2
 8002178:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b20      	cmp	r3, #32
 8002184:	f040 80f9 	bne.w	800237a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_I2C_Mem_Write+0x34>
 800218e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0ed      	b.n	800237c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_I2C_Mem_Write+0x4e>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e0e6      	b.n	800237c <HAL_I2C_Mem_Write+0x21c>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021b6:	f7fe fe39 	bl	8000e2c <HAL_GetTick>
 80021ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2319      	movs	r3, #25
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fac3 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0d1      	b.n	800237c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2221      	movs	r2, #33	; 0x21
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a3a      	ldr	r2, [r7, #32]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002200:	88f8      	ldrh	r0, [r7, #6]
 8002202:	893a      	ldrh	r2, [r7, #8]
 8002204:	8979      	ldrh	r1, [r7, #10]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4603      	mov	r3, r0
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f9d3 	bl	80025bc <I2C_RequestMemoryWrite>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0a9      	b.n	800237c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	2bff      	cmp	r3, #255	; 0xff
 8002230:	d90e      	bls.n	8002250 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	22ff      	movs	r2, #255	; 0xff
 8002236:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	b2da      	uxtb	r2, r3
 800223e:	8979      	ldrh	r1, [r7, #10]
 8002240:	2300      	movs	r3, #0
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fba5 	bl	8002998 <I2C_TransferConfig>
 800224e:	e00f      	b.n	8002270 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	b2da      	uxtb	r2, r3
 8002260:	8979      	ldrh	r1, [r7, #10]
 8002262:	2300      	movs	r3, #0
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fb94 	bl	8002998 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 faad 	bl	80027d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e07b      	b.n	800237c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	781a      	ldrb	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d034      	beq.n	8002328 <HAL_I2C_Mem_Write+0x1c8>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d130      	bne.n	8002328 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	2200      	movs	r2, #0
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fa3f 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e04d      	b.n	800237c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2bff      	cmp	r3, #255	; 0xff
 80022e8:	d90e      	bls.n	8002308 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	22ff      	movs	r2, #255	; 0xff
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	8979      	ldrh	r1, [r7, #10]
 80022f8:	2300      	movs	r3, #0
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fb49 	bl	8002998 <I2C_TransferConfig>
 8002306:	e00f      	b.n	8002328 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	b2da      	uxtb	r2, r3
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	2300      	movs	r3, #0
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fb38 	bl	8002998 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d19e      	bne.n	8002270 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fa8c 	bl	8002854 <I2C_WaitOnSTOPFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e01a      	b.n	800237c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2220      	movs	r2, #32
 800234c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_I2C_Mem_Write+0x224>)
 800235a:	400b      	ands	r3, r1
 800235c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800237a:	2302      	movs	r3, #2
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	fe00e800 	.word	0xfe00e800

08002388 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	4603      	mov	r3, r0
 8002398:	817b      	strh	r3, [r7, #10]
 800239a:	460b      	mov	r3, r1
 800239c:	813b      	strh	r3, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	f040 80fd 	bne.w	80025aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_I2C_Mem_Read+0x34>
 80023b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d105      	bne.n	80023c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0f1      	b.n	80025ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_I2C_Mem_Read+0x4e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0ea      	b.n	80025ac <HAL_I2C_Mem_Read+0x224>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023de:	f7fe fd25 	bl	8000e2c <HAL_GetTick>
 80023e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2319      	movs	r3, #25
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f9af 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0d5      	b.n	80025ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2222      	movs	r2, #34	; 0x22
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2240      	movs	r2, #64	; 0x40
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002428:	88f8      	ldrh	r0, [r7, #6]
 800242a:	893a      	ldrh	r2, [r7, #8]
 800242c:	8979      	ldrh	r1, [r7, #10]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4603      	mov	r3, r0
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f913 	bl	8002664 <I2C_RequestMemoryRead>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0ad      	b.n	80025ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	2bff      	cmp	r3, #255	; 0xff
 8002458:	d90e      	bls.n	8002478 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	22ff      	movs	r2, #255	; 0xff
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	b2da      	uxtb	r2, r3
 8002466:	8979      	ldrh	r1, [r7, #10]
 8002468:	4b52      	ldr	r3, [pc, #328]	; (80025b4 <HAL_I2C_Mem_Read+0x22c>)
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa91 	bl	8002998 <I2C_TransferConfig>
 8002476:	e00f      	b.n	8002498 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	b2da      	uxtb	r2, r3
 8002488:	8979      	ldrh	r1, [r7, #10]
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_I2C_Mem_Read+0x22c>)
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fa80 	bl	8002998 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	2200      	movs	r2, #0
 80024a0:	2104      	movs	r1, #4
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f956 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e07c      	b.n	80025ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d034      	beq.n	8002558 <HAL_I2C_Mem_Read+0x1d0>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d130      	bne.n	8002558 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	2200      	movs	r2, #0
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f927 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e04d      	b.n	80025ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	2bff      	cmp	r3, #255	; 0xff
 8002518:	d90e      	bls.n	8002538 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	22ff      	movs	r2, #255	; 0xff
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	b2da      	uxtb	r2, r3
 8002526:	8979      	ldrh	r1, [r7, #10]
 8002528:	2300      	movs	r3, #0
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fa31 	bl	8002998 <I2C_TransferConfig>
 8002536:	e00f      	b.n	8002558 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	b2da      	uxtb	r2, r3
 8002548:	8979      	ldrh	r1, [r7, #10]
 800254a:	2300      	movs	r3, #0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fa20 	bl	8002998 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d19a      	bne.n	8002498 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f974 	bl	8002854 <I2C_WaitOnSTOPFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e01a      	b.n	80025ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2220      	movs	r2, #32
 800257c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_I2C_Mem_Read+0x230>)
 800258a:	400b      	ands	r3, r1
 800258c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	80002400 	.word	0x80002400
 80025b8:	fe00e800 	.word	0xfe00e800

080025bc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	4608      	mov	r0, r1
 80025c6:	4611      	mov	r1, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	817b      	strh	r3, [r7, #10]
 80025ce:	460b      	mov	r3, r1
 80025d0:	813b      	strh	r3, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	8979      	ldrh	r1, [r7, #10]
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <I2C_RequestMemoryWrite+0xa4>)
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f9d7 	bl	8002998 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	69b9      	ldr	r1, [r7, #24]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f8f0 	bl	80027d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e02c      	b.n	8002658 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002604:	893b      	ldrh	r3, [r7, #8]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
 800260e:	e015      	b.n	800263c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002610:	893b      	ldrh	r3, [r7, #8]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	b29b      	uxth	r3, r3
 8002616:	b2da      	uxtb	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	69b9      	ldr	r1, [r7, #24]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f8d6 	bl	80027d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e012      	b.n	8002658 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002632:	893b      	ldrh	r3, [r7, #8]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2200      	movs	r2, #0
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f884 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	80002000 	.word	0x80002000

08002664 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	461a      	mov	r2, r3
 8002672:	4603      	mov	r3, r0
 8002674:	817b      	strh	r3, [r7, #10]
 8002676:	460b      	mov	r3, r1
 8002678:	813b      	strh	r3, [r7, #8]
 800267a:	4613      	mov	r3, r2
 800267c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	8979      	ldrh	r1, [r7, #10]
 8002684:	4b20      	ldr	r3, [pc, #128]	; (8002708 <I2C_RequestMemoryRead+0xa4>)
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2300      	movs	r3, #0
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f984 	bl	8002998 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f89d 	bl	80027d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e02c      	b.n	80026fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026aa:	893b      	ldrh	r3, [r7, #8]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
 80026b4:	e015      	b.n	80026e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026b6:	893b      	ldrh	r3, [r7, #8]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	69b9      	ldr	r1, [r7, #24]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f883 	bl	80027d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e012      	b.n	80026fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026d8:	893b      	ldrh	r3, [r7, #8]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2200      	movs	r2, #0
 80026ea:	2140      	movs	r1, #64	; 0x40
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f831 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	80002000 	.word	0x80002000

0800270c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b02      	cmp	r3, #2
 8002720:	d103      	bne.n	800272a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d007      	beq.n	8002748 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	619a      	str	r2, [r3, #24]
  }
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002764:	e022      	b.n	80027ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800276c:	d01e      	beq.n	80027ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7fe fb5d 	bl	8000e2c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d113      	bne.n	80027ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e00f      	b.n	80027cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4013      	ands	r3, r2
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d0cd      	beq.n	8002766 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027e0:	e02c      	b.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f870 	bl	80028cc <I2C_IsAcknowledgeFailed>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e02a      	b.n	800284c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027fc:	d01e      	beq.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7fe fb15 	bl	8000e2c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d113      	bne.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e007      	b.n	800284c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d1cb      	bne.n	80027e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002860:	e028      	b.n	80028b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f830 	bl	80028cc <I2C_IsAcknowledgeFailed>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e026      	b.n	80028c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7fe fad9 	bl	8000e2c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d113      	bne.n	80028b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e007      	b.n	80028c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d1cf      	bne.n	8002862 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d151      	bne.n	800298a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028e6:	e022      	b.n	800292e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ee:	d01e      	beq.n	800292e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f0:	f7fe fa9c 	bl	8000e2c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d302      	bcc.n	8002906 <I2C_IsAcknowledgeFailed+0x3a>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d113      	bne.n	800292e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f043 0220 	orr.w	r2, r3, #32
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e02e      	b.n	800298c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b20      	cmp	r3, #32
 800293a:	d1d5      	bne.n	80028e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2210      	movs	r2, #16
 8002942:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2220      	movs	r2, #32
 800294a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff fedd 	bl	800270c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <I2C_IsAcknowledgeFailed+0xc8>)
 800295e:	400b      	ands	r3, r1
 8002960:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	fe00e800 	.word	0xfe00e800

08002998 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	4613      	mov	r3, r2
 80029a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	0d5b      	lsrs	r3, r3, #21
 80029b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80029b8:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <I2C_TransferConfig+0x58>)
 80029ba:	430b      	orrs	r3, r1
 80029bc:	43db      	mvns	r3, r3
 80029be:	ea02 0103 	and.w	r1, r2, r3
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029c8:	7a7b      	ldrb	r3, [r7, #9]
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	431a      	orrs	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	03ff63ff 	.word	0x03ff63ff

080029f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d138      	bne.n	8002a7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e032      	b.n	8002a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2224      	movs	r2, #36	; 0x24
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e000      	b.n	8002a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
  }
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d139      	bne.n	8002b14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e033      	b.n	8002b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2224      	movs	r2, #36	; 0x24
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002adc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e000      	b.n	8002b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40007000 	.word	0x40007000

08002b40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4e:	d130      	bne.n	8002bb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5c:	d038      	beq.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b66:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2232      	movs	r2, #50	; 0x32
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0c9b      	lsrs	r3, r3, #18
 8002b80:	3301      	adds	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b84:	e002      	b.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b98:	d102      	bne.n	8002ba0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f2      	bne.n	8002b86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d110      	bne.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e00f      	b.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d007      	beq.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc8:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000
 8002be4:	200000a4 	.word	0x200000a4
 8002be8:	431bde83 	.word	0x431bde83

08002bec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7fe f91a 	bl	8000e2c <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e063      	b.n	8002ccc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f005 fb3f 	bl	800829c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002c1e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 faf7 	bl	8003216 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	021a      	lsls	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2120      	movs	r1, #32
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 faef 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002c58:	7afb      	ldrb	r3, [r7, #11]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d131      	bne.n	8002cc2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c68:	f023 0310 	bic.w	r3, r3, #16
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6852      	ldr	r2, [r2, #4]
 8002c70:	0611      	lsls	r1, r2, #24
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_QSPI_Init+0xe8>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6912      	ldr	r2, [r2, #16]
 8002c8e:	0411      	lsls	r1, r2, #16
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6952      	ldr	r2, [r2, #20]
 8002c94:	4311      	orrs	r1, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6992      	ldr	r2, [r2, #24]
 8002c9a:	4311      	orrs	r1, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002cca:	7afb      	ldrb	r3, [r7, #11]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	ffe0f8fe 	.word	0xffe0f8fe

08002cd8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e016      	b.n	8002d18 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f005 fb12 	bl	8008324 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7fe f87e 	bl	8000e2c <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_QSPI_Command+0x22>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e048      	b.n	8002dd4 <HAL_QSPI_Command+0xb4>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d137      	bne.n	8002dc6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2120      	movs	r1, #32
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fa5f 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d125      	bne.n	8002dca <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fa8c 	bl	80032a0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d115      	bne.n	8002dbc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2201      	movs	r2, #1
 8002d98:	2102      	movs	r1, #2
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fa49 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2202      	movs	r2, #2
 8002db0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002dba:	e006      	b.n	8002dca <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002dc4:	e001      	b.n	8002dca <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7fe f81e 	bl	8000e2c <HAL_GetTick>
 8002df0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3320      	adds	r3, #32
 8002df8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_QSPI_Transmit+0x2e>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e07b      	b.n	8002f02 <HAL_QSPI_Transmit+0x126>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d16a      	bne.n	8002ef4 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d05b      	beq.n	8002ee2 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2212      	movs	r2, #18
 8002e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002e5e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002e60:	e01b      	b.n	8002e9a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f9e0 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002e76:	7ffb      	ldrb	r3, [r7, #31]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d113      	bne.n	8002ea4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1df      	bne.n	8002e62 <HAL_QSPI_Transmit+0x86>
 8002ea2:	e000      	b.n	8002ea6 <HAL_QSPI_Transmit+0xca>
          break;
 8002ea4:	bf00      	nop
      }

      if (status == HAL_OK)
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f9bb 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d108      	bne.n	8002ed8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f934 	bl	800313c <HAL_QSPI_Abort>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002ee0:	e00a      	b.n	8002ef8 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	f043 0208 	orr.w	r2, r3, #8
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e001      	b.n	8002ef8 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b08a      	sub	sp, #40	; 0x28
 8002f0e:	af02      	add	r7, sp, #8
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002f1a:	f7fd ff87 	bl	8000e2c <HAL_GetTick>
 8002f1e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3320      	adds	r3, #32
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_QSPI_Receive+0x36>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e082      	b.n	8003046 <HAL_QSPI_Receive+0x13c>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d171      	bne.n	8003038 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d062      	beq.n	8003026 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2222      	movs	r2, #34	; 0x22
 8002f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f98:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002fa2:	e01c      	b.n	8002fde <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2201      	movs	r2, #1
 8002fac:	2106      	movs	r1, #6
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f93f 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8002fb8:	7ffb      	ldrb	r3, [r7, #31]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d114      	bne.n	8002fe8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	7812      	ldrb	r2, [r2, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	1e5a      	subs	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1de      	bne.n	8002fa4 <HAL_QSPI_Receive+0x9a>
 8002fe6:	e000      	b.n	8002fea <HAL_QSPI_Receive+0xe0>
          break;
 8002fe8:	bf00      	nop
      }

      if (status == HAL_OK)
 8002fea:	7ffb      	ldrb	r3, [r7, #31]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d115      	bne.n	800301c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f919 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003004:	7ffb      	ldrb	r3, [r7, #31]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d108      	bne.n	800301c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2202      	movs	r2, #2
 8003010:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f892 	bl	800313c <HAL_QSPI_Abort>
 8003018:	4603      	mov	r3, r0
 800301a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003024:	e00a      	b.n	800303c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	f043 0208 	orr.w	r2, r3, #8
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e001      	b.n	800303c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003038:	2302      	movs	r3, #2
 800303a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003044:	7ffb      	ldrb	r3, [r7, #31]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b088      	sub	sp, #32
 8003052:	af02      	add	r7, sp, #8
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7fd fee6 	bl	8000e2c <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_QSPI_AutoPolling+0x24>
 800306e:	2302      	movs	r3, #2
 8003070:	e060      	b.n	8003134 <HAL_QSPI_AutoPolling+0xe6>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d14f      	bne.n	8003126 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2242      	movs	r2, #66	; 0x42
 8003090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2200      	movs	r2, #0
 800309c:	2120      	movs	r1, #32
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f8c7 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d13d      	bne.n	800312a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6852      	ldr	r2, [r2, #4]
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6892      	ldr	r2, [r2, #8]
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	431a      	orrs	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80030e4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80030ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f8d3 	bl	80032a0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2201      	movs	r2, #1
 8003102:	2108      	movs	r1, #8
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f894 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2208      	movs	r2, #8
 800311a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003124:	e001      	b.n	800312a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003126:	2302      	movs	r3, #2
 8003128:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003132:	7dfb      	ldrb	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7fd fe70 	bl	8000e2c <HAL_GetTick>
 800314c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d056      	beq.n	800320c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d017      	beq.n	80031a4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0204 	bic.w	r2, r2, #4
 8003182:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe fb3f 	bl	800180c <HAL_DMA_Abort>
 800318e:	4603      	mov	r3, r0
 8003190:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0202 	orr.w	r2, r2, #2
 80031b2:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2201      	movs	r2, #1
 80031be:	2102      	movs	r1, #2
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f836 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10e      	bne.n	80031ee <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2202      	movs	r2, #2
 80031d6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2200      	movs	r2, #0
 80031e2:	2120      	movs	r1, #32
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f824 	bl	8003232 <QSPI_WaitFlagStateUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10b      	bne.n	800320c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003202:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003242:	e01a      	b.n	800327a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800324a:	d016      	beq.n	800327a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324c:	f7fd fdee 	bl	8000e2c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10b      	bne.n	800327a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2204      	movs	r2, #4
 8003266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e00e      	b.n	8003298 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	429a      	cmp	r2, r3
 8003294:	d1d6      	bne.n	8003244 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d009      	beq.n	80032c8 <QSPI_Config+0x28>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80032ba:	d005      	beq.n	80032c8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3a01      	subs	r2, #1
 80032c6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80b9 	beq.w	8003444 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d05f      	beq.n	800339a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	6892      	ldr	r2, [r2, #8]
 80032e2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d031      	beq.n	8003350 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	431a      	orrs	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	431a      	orrs	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	049b      	lsls	r3, r3, #18
 8003308:	431a      	orrs	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	431a      	orrs	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	431a      	orrs	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	431a      	orrs	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	431a      	orrs	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	431a      	orrs	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	ea42 0103 	orr.w	r1, r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	430a      	orrs	r2, r1
 8003338:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003340:	f000 812e 	beq.w	80035a0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	6852      	ldr	r2, [r2, #4]
 800334c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800334e:	e127      	b.n	80035a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	431a      	orrs	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	431a      	orrs	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	431a      	orrs	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	049b      	lsls	r3, r3, #18
 800336c:	431a      	orrs	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	431a      	orrs	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	431a      	orrs	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	431a      	orrs	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	431a      	orrs	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	ea42 0103 	orr.w	r1, r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	430a      	orrs	r2, r1
 8003396:	615a      	str	r2, [r3, #20]
}
 8003398:	e102      	b.n	80035a0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d02e      	beq.n	8003400 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	431a      	orrs	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	431a      	orrs	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	049b      	lsls	r3, r3, #18
 80033be:	431a      	orrs	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	ea42 0103 	orr.w	r1, r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80033f0:	f000 80d6 	beq.w	80035a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	6852      	ldr	r2, [r2, #4]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	e0cf      	b.n	80035a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	431a      	orrs	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	431a      	orrs	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	431a      	orrs	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	049b      	lsls	r3, r3, #18
 800341c:	431a      	orrs	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	431a      	orrs	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	431a      	orrs	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	431a      	orrs	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	ea42 0103 	orr.w	r1, r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	430a      	orrs	r2, r1
 8003440:	615a      	str	r2, [r3, #20]
}
 8003442:	e0ad      	b.n	80035a0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d058      	beq.n	80034fe <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	6892      	ldr	r2, [r2, #8]
 8003454:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d02d      	beq.n	80034ba <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	431a      	orrs	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	431a      	orrs	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	431a      	orrs	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	049b      	lsls	r3, r3, #18
 800347a:	431a      	orrs	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	431a      	orrs	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	431a      	orrs	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	431a      	orrs	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	431a      	orrs	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	ea42 0103 	orr.w	r1, r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80034ac:	d078      	beq.n	80035a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	6852      	ldr	r2, [r2, #4]
 80034b6:	619a      	str	r2, [r3, #24]
}
 80034b8:	e072      	b.n	80035a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	431a      	orrs	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	431a      	orrs	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	049b      	lsls	r3, r3, #18
 80034d6:	431a      	orrs	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	431a      	orrs	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	ea42 0103 	orr.w	r1, r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	615a      	str	r2, [r3, #20]
}
 80034fc:	e050      	b.n	80035a0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d02a      	beq.n	800355c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	431a      	orrs	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	431a      	orrs	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	431a      	orrs	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	049b      	lsls	r3, r3, #18
 8003522:	431a      	orrs	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	431a      	orrs	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	431a      	orrs	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	431a      	orrs	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	ea42 0103 	orr.w	r1, r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	430a      	orrs	r2, r1
 8003546:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800354e:	d027      	beq.n	80035a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	6852      	ldr	r2, [r2, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	e021      	b.n	80035a0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01d      	beq.n	80035a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	431a      	orrs	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	431a      	orrs	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	431a      	orrs	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	049b      	lsls	r3, r3, #18
 8003580:	431a      	orrs	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	431a      	orrs	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	431a      	orrs	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	ea42 0103 	orr.w	r1, r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	430a      	orrs	r2, r1
 800359e:	615a      	str	r2, [r3, #20]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e3d4      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035be:	4ba1      	ldr	r3, [pc, #644]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c8:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80e4 	beq.w	80037a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4a>
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	f040 808b 	bne.w	8003704 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	f040 8087 	bne.w	8003704 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035f6:	4b93      	ldr	r3, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_RCC_OscConfig+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e3ac      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	4b8c      	ldr	r3, [pc, #560]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_RCC_OscConfig+0x7c>
 800361e:	4b89      	ldr	r3, [pc, #548]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003626:	e005      	b.n	8003634 <HAL_RCC_OscConfig+0x88>
 8003628:	4b86      	ldr	r3, [pc, #536]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800362a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362e:	091b      	lsrs	r3, r3, #4
 8003630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003634:	4293      	cmp	r3, r2
 8003636:	d223      	bcs.n	8003680 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fd3f 	bl	80040c0 <RCC_SetFlashLatencyFromMSIRange>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e38d      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800364c:	4b7d      	ldr	r3, [pc, #500]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a7c      	ldr	r2, [pc, #496]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003652:	f043 0308 	orr.w	r3, r3, #8
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b7a      	ldr	r3, [pc, #488]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4977      	ldr	r1, [pc, #476]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	4972      	ldr	r1, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800367a:	4313      	orrs	r3, r2
 800367c:	604b      	str	r3, [r1, #4]
 800367e:	e025      	b.n	80036cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003680:	4b70      	ldr	r3, [pc, #448]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6f      	ldr	r2, [pc, #444]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003686:	f043 0308 	orr.w	r3, r3, #8
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	496a      	ldr	r1, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800369e:	4b69      	ldr	r3, [pc, #420]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	4965      	ldr	r1, [pc, #404]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fcff 	bl	80040c0 <RCC_SetFlashLatencyFromMSIRange>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e34d      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036cc:	f000 fc36 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 80036d0:	4601      	mov	r1, r0
 80036d2:	4b5c      	ldr	r3, [pc, #368]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	4a5a      	ldr	r2, [pc, #360]	; (8003848 <HAL_RCC_OscConfig+0x29c>)
 80036de:	5cd3      	ldrb	r3, [r2, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa21 f303 	lsr.w	r3, r1, r3
 80036e8:	4a58      	ldr	r2, [pc, #352]	; (800384c <HAL_RCC_OscConfig+0x2a0>)
 80036ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036ec:	4b58      	ldr	r3, [pc, #352]	; (8003850 <HAL_RCC_OscConfig+0x2a4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fb4b 	bl	8000d8c <HAL_InitTick>
 80036f6:	4603      	mov	r3, r0
 80036f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d052      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	e331      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d032      	beq.n	8003772 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800370c:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4c      	ldr	r2, [pc, #304]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003718:	f7fd fb88 	bl	8000e2c <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003720:	f7fd fb84 	bl	8000e2c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e31a      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003732:	4b44      	ldr	r3, [pc, #272]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a40      	ldr	r2, [pc, #256]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003744:	f043 0308 	orr.w	r3, r3, #8
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	493b      	ldr	r1, [pc, #236]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800375c:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	4936      	ldr	r1, [pc, #216]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
 8003770:	e01a      	b.n	80037a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003772:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a33      	ldr	r2, [pc, #204]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800377e:	f7fd fb55 	bl	8000e2c <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003786:	f7fd fb51 	bl	8000e2c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e2e7      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003798:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f0      	bne.n	8003786 <HAL_RCC_OscConfig+0x1da>
 80037a4:	e000      	b.n	80037a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d074      	beq.n	800389e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d005      	beq.n	80037c6 <HAL_RCC_OscConfig+0x21a>
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b0c      	cmp	r3, #12
 80037be:	d10e      	bne.n	80037de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d10b      	bne.n	80037de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c6:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d064      	beq.n	800389c <HAL_RCC_OscConfig+0x2f0>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d160      	bne.n	800389c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e2c4      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x24a>
 80037e8:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e01d      	b.n	8003832 <HAL_RCC_OscConfig+0x286>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_OscConfig+0x26e>
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0x286>
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a06      	ldr	r2, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x298>)
 800382c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01c      	beq.n	8003874 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fd faf7 	bl	8000e2c <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003840:	e011      	b.n	8003866 <HAL_RCC_OscConfig+0x2ba>
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	08008fd4 	.word	0x08008fd4
 800384c:	200000a4 	.word	0x200000a4
 8003850:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fd faea 	bl	8000e2c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e280      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003866:	4baf      	ldr	r3, [pc, #700]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x2a8>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fd fada 	bl	8000e2c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fd fad6 	bl	8000e2c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e26c      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388e:	4ba5      	ldr	r3, [pc, #660]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x2d0>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d060      	beq.n	800396c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_OscConfig+0x310>
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b0c      	cmp	r3, #12
 80038b4:	d119      	bne.n	80038ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d116      	bne.n	80038ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038bc:	4b99      	ldr	r3, [pc, #612]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_OscConfig+0x328>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e249      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b93      	ldr	r3, [pc, #588]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	4990      	ldr	r1, [pc, #576]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e8:	e040      	b.n	800396c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d023      	beq.n	800393a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f2:	4b8c      	ldr	r3, [pc, #560]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a8b      	ldr	r2, [pc, #556]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fd fa95 	bl	8000e2c <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003906:	f7fd fa91 	bl	8000e2c <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e227      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003918:	4b82      	ldr	r3, [pc, #520]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b7f      	ldr	r3, [pc, #508]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	497c      	ldr	r1, [pc, #496]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
 8003938:	e018      	b.n	800396c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393a:	4b7a      	ldr	r3, [pc, #488]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a79      	ldr	r2, [pc, #484]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fd fa71 	bl	8000e2c <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394e:	f7fd fa6d 	bl	8000e2c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e203      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003960:	4b70      	ldr	r3, [pc, #448]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d03c      	beq.n	80039f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01c      	beq.n	80039ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003980:	4b68      	ldr	r3, [pc, #416]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003986:	4a67      	ldr	r2, [pc, #412]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fd fa4c 	bl	8000e2c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003998:	f7fd fa48 	bl	8000e2c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e1de      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039aa:	4b5e      	ldr	r3, [pc, #376]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80039ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ef      	beq.n	8003998 <HAL_RCC_OscConfig+0x3ec>
 80039b8:	e01b      	b.n	80039f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ba:	4b5a      	ldr	r3, [pc, #360]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80039bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c0:	4a58      	ldr	r2, [pc, #352]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fd fa2f 	bl	8000e2c <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d2:	f7fd fa2b 	bl	8000e2c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e1c1      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e4:	4b4f      	ldr	r3, [pc, #316]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 80039e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1ef      	bne.n	80039d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80a6 	beq.w	8003b4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a00:	2300      	movs	r3, #0
 8003a02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a04:	4b47      	ldr	r3, [pc, #284]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10d      	bne.n	8003a2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a10:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	4a43      	ldr	r2, [pc, #268]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1c:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2c:	4b3e      	ldr	r3, [pc, #248]	; (8003b28 <HAL_RCC_OscConfig+0x57c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d118      	bne.n	8003a6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_OscConfig+0x57c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a3a      	ldr	r2, [pc, #232]	; (8003b28 <HAL_RCC_OscConfig+0x57c>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a44:	f7fd f9f2 	bl	8000e2c <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4c:	f7fd f9ee 	bl	8000e2c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e184      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5e:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <HAL_RCC_OscConfig+0x57c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d108      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4d8>
 8003a72:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	4a2a      	ldr	r2, [pc, #168]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a82:	e024      	b.n	8003ace <HAL_RCC_OscConfig+0x522>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d110      	bne.n	8003aae <HAL_RCC_OscConfig+0x502>
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a94:	f043 0304 	orr.w	r3, r3, #4
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aac:	e00f      	b.n	8003ace <HAL_RCC_OscConfig+0x522>
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003abe:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003ac6:	f023 0304 	bic.w	r3, r3, #4
 8003aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d016      	beq.n	8003b04 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fd f9a9 	bl	8000e2c <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fd f9a5 	bl	8000e2c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e139      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_OscConfig+0x578>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0ed      	beq.n	8003ade <HAL_RCC_OscConfig+0x532>
 8003b02:	e01a      	b.n	8003b3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fd f992 	bl	8000e2c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b0a:	e00f      	b.n	8003b2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fd f98e 	bl	8000e2c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d906      	bls.n	8003b2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e122      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b2c:	4b90      	ldr	r3, [pc, #576]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e8      	bne.n	8003b0c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b3a:	7ffb      	ldrb	r3, [r7, #31]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b40:	4b8b      	ldr	r3, [pc, #556]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	4a8a      	ldr	r2, [pc, #552]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8108 	beq.w	8003d66 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	f040 80d0 	bne.w	8003d00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b60:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0203 	and.w	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d130      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d127      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d11f      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba0:	2a07      	cmp	r2, #7
 8003ba2:	bf14      	ite	ne
 8003ba4:	2201      	movne	r2, #1
 8003ba6:	2200      	moveq	r2, #0
 8003ba8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d113      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d06e      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	d069      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bdc:	4b64      	ldr	r3, [pc, #400]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003be8:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b7      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bf8:	4b5d      	ldr	r3, [pc, #372]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5c      	ldr	r2, [pc, #368]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c04:	f7fd f912 	bl	8000e2c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fd f90e 	bl	8000e2c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e0a4      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1e:	4b54      	ldr	r3, [pc, #336]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2a:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	4b51      	ldr	r3, [pc, #324]	; (8003d74 <HAL_RCC_OscConfig+0x7c8>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c3a:	3a01      	subs	r2, #1
 8003c3c:	0112      	lsls	r2, r2, #4
 8003c3e:	4311      	orrs	r1, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c44:	0212      	lsls	r2, r2, #8
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c4c:	0852      	lsrs	r2, r2, #1
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	0552      	lsls	r2, r2, #21
 8003c52:	4311      	orrs	r1, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c58:	0852      	lsrs	r2, r2, #1
 8003c5a:	3a01      	subs	r2, #1
 8003c5c:	0652      	lsls	r2, r2, #25
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c64:	0912      	lsrs	r2, r2, #4
 8003c66:	0452      	lsls	r2, r2, #17
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	4941      	ldr	r1, [pc, #260]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c70:	4b3f      	ldr	r3, [pc, #252]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3e      	ldr	r2, [pc, #248]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c7c:	4b3c      	ldr	r3, [pc, #240]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a3b      	ldr	r2, [pc, #236]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c88:	f7fd f8d0 	bl	8000e2c <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd f8cc 	bl	8000e2c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e062      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	4b33      	ldr	r3, [pc, #204]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cae:	e05a      	b.n	8003d66 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e059      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb4:	4b2e      	ldr	r3, [pc, #184]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d152      	bne.n	8003d66 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cc0:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2a      	ldr	r2, [pc, #168]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ccc:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cd8:	f7fd f8a8 	bl	8000e2c <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fd f8a4 	bl	8000e2c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e03a      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf2:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x734>
 8003cfe:	e032      	b.n	8003d66 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d02d      	beq.n	8003d62 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d10:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d12:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d24:	f023 0303 	bic.w	r3, r3, #3
 8003d28:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d38:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fd f877 	bl	8000e2c <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fd f873 	bl	8000e2c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e009      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_OscConfig+0x7c4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x796>
 8003d60:	e001      	b.n	8003d66 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	f99d808c 	.word	0xf99d808c

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0c8      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d910      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b63      	ldr	r3, [pc, #396]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 0207 	bic.w	r2, r3, #7
 8003da2:	4961      	ldr	r1, [pc, #388]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b5f      	ldr	r3, [pc, #380]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0b0      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d04c      	beq.n	8003e62 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd0:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d121      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e09e      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de8:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d115      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e092      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e00:	4b4a      	ldr	r3, [pc, #296]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e086      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e10:	4b46      	ldr	r3, [pc, #280]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e07e      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e20:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f023 0203 	bic.w	r2, r3, #3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	493f      	ldr	r1, [pc, #252]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e32:	f7fc fffb 	bl	8000e2c <HAL_GetTick>
 8003e36:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3a:	f7fc fff7 	bl	8000e2c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e066      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e50:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 020c 	and.w	r2, r3, #12
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d1eb      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	492c      	ldr	r1, [pc, #176]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e80:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d210      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 0207 	bic.w	r2, r3, #7
 8003e96:	4924      	ldr	r1, [pc, #144]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <HAL_RCC_ClockConfig+0x1b0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e036      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4918      	ldr	r1, [pc, #96]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4910      	ldr	r1, [pc, #64]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eee:	f000 f825 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8003ef2:	4601      	mov	r1, r0
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_RCC_ClockConfig+0x1b4>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	5cd3      	ldrb	r3, [r2, r3]
 8003f02:	f003 031f 	and.w	r3, r3, #31
 8003f06:	fa21 f303 	lsr.w	r3, r1, r3
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fc ff3a 	bl	8000d8c <HAL_InitTick>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f1c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40022000 	.word	0x40022000
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	08008fd4 	.word	0x08008fd4
 8003f34:	200000a4 	.word	0x200000a4
 8003f38:	20000000 	.word	0x20000000

08003f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	; 0x24
 8003f40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4a:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f54:	4b3a      	ldr	r3, [pc, #232]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x34>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d121      	bne.n	8003fae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d11e      	bne.n	8003fae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f70:	4b33      	ldr	r3, [pc, #204]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f7c:	4b30      	ldr	r3, [pc, #192]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	e005      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f8c:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f98:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10d      	bne.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d102      	bne.n	8003fba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fb4:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	e004      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fc0:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b0c      	cmp	r3, #12
 8003fc8:	d133      	bne.n	8004032 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fca:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d002      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xa4>
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d003      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0xaa>
 8003fde:	e005      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fe2:	617b      	str	r3, [r7, #20]
      break;
 8003fe4:	e005      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fe6:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fe8:	617b      	str	r3, [r7, #20]
      break;
 8003fea:	e002      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	617b      	str	r3, [r7, #20]
      break;
 8003ff0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	fb02 f203 	mul.w	r2, r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <HAL_RCC_GetSysClockFreq+0x104>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	0e5b      	lsrs	r3, r3, #25
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	3301      	adds	r3, #1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004032:	69bb      	ldr	r3, [r7, #24]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3724      	adds	r7, #36	; 0x24
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40021000 	.word	0x40021000
 8004044:	08008fec 	.word	0x08008fec
 8004048:	00f42400 	.word	0x00f42400
 800404c:	007a1200 	.word	0x007a1200

08004050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_GetHCLKFreq+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	200000a4 	.word	0x200000a4

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800406c:	f7ff fff0 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004070:	4601      	mov	r1, r0
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800407e:	5cd3      	ldrb	r3, [r2, r3]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000
 8004090:	08008fe4 	.word	0x08008fe4

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004098:	f7ff ffda 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800409c:	4601      	mov	r1, r0
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0adb      	lsrs	r3, r3, #11
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040aa:	5cd3      	ldrb	r3, [r2, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000
 80040bc:	08008fe4 	.word	0x08008fe4

080040c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040cc:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040d8:	f7fe fd24 	bl	8002b24 <HAL_PWREx_GetVoltageRange>
 80040dc:	6178      	str	r0, [r7, #20]
 80040de:	e014      	b.n	800410a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	4a24      	ldr	r2, [pc, #144]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ea:	6593      	str	r3, [r2, #88]	; 0x58
 80040ec:	4b22      	ldr	r3, [pc, #136]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040f8:	f7fe fd14 	bl	8002b24 <HAL_PWREx_GetVoltageRange>
 80040fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004108:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d10b      	bne.n	800412a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d919      	bls.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2ba0      	cmp	r3, #160	; 0xa0
 800411c:	d902      	bls.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800411e:	2302      	movs	r3, #2
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	e013      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004124:	2301      	movs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	e010      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b80      	cmp	r3, #128	; 0x80
 800412e:	d902      	bls.n	8004136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004130:	2303      	movs	r3, #3
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	e00a      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b80      	cmp	r3, #128	; 0x80
 800413a:	d102      	bne.n	8004142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800413c:	2302      	movs	r3, #2
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	e004      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b70      	cmp	r3, #112	; 0x70
 8004146:	d101      	bne.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004148:	2301      	movs	r3, #1
 800414a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 0207 	bic.w	r2, r3, #7
 8004154:	4909      	ldr	r1, [pc, #36]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	429a      	cmp	r2, r3
 8004168:	d001      	beq.n	800416e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	40022000 	.word	0x40022000

08004180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004188:	2300      	movs	r3, #0
 800418a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800418c:	2300      	movs	r3, #0
 800418e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004198:	2b00      	cmp	r3, #0
 800419a:	d03f      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a4:	d01c      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80041a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041aa:	d802      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80041b0:	e01f      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80041b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041b6:	d003      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80041b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041bc:	d01c      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80041be:	e018      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041c0:	4b85      	ldr	r3, [pc, #532]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a84      	ldr	r2, [pc, #528]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041cc:	e015      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3304      	adds	r3, #4
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fab9 	bl	800474c <RCCEx_PLLSAI1_Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041de:	e00c      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3320      	adds	r3, #32
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fba0 	bl	800492c <RCCEx_PLLSAI2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041f0:	e003      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	74fb      	strb	r3, [r7, #19]
      break;
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80041f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fa:	7cfb      	ldrb	r3, [r7, #19]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004200:	4b75      	ldr	r3, [pc, #468]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420e:	4972      	ldr	r1, [pc, #456]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004216:	e001      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004230:	d01c      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004236:	d802      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00e      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800423c:	e01f      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800423e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004242:	d003      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004244:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004248:	d01c      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800424a:	e018      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800424c:	4b62      	ldr	r3, [pc, #392]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a61      	ldr	r2, [pc, #388]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004256:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004258:	e015      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	2100      	movs	r1, #0
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fa73 	bl	800474c <RCCEx_PLLSAI1_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800426a:	e00c      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3320      	adds	r3, #32
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fb5a 	bl	800492c <RCCEx_PLLSAI2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	74fb      	strb	r3, [r7, #19]
      break;
 8004282:	e000      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10b      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800428c:	4b52      	ldr	r3, [pc, #328]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800429a:	494f      	ldr	r1, [pc, #316]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042a2:	e001      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80a0 	beq.w	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00d      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d0:	4b41      	ldr	r3, [pc, #260]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	6593      	str	r3, [r2, #88]	; 0x58
 80042dc:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e8:	2301      	movs	r3, #1
 80042ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ec:	4b3b      	ldr	r3, [pc, #236]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3a      	ldr	r2, [pc, #232]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042f8:	f7fc fd98 	bl	8000e2c <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042fe:	e009      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004300:	f7fc fd94 	bl	8000e2c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d902      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	74fb      	strb	r3, [r7, #19]
        break;
 8004312:	e005      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004314:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ef      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d15c      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004326:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004330:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	429a      	cmp	r2, r3
 8004342:	d019      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004350:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004360:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004370:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fc fd53 	bl	8000e2c <HAL_GetTick>
 8004386:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004388:	e00b      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fc fd4f 	bl	8000e2c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d902      	bls.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	74fb      	strb	r3, [r7, #19]
            break;
 80043a0:	e006      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ec      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c6:	4904      	ldr	r1, [pc, #16]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043ce:	e009      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	74bb      	strb	r3, [r7, #18]
 80043d4:	e006      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e4:	7c7b      	ldrb	r3, [r7, #17]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d105      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ea:	4b9e      	ldr	r3, [pc, #632]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	4a9d      	ldr	r2, [pc, #628]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004402:	4b98      	ldr	r3, [pc, #608]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f023 0203 	bic.w	r2, r3, #3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	4994      	ldr	r1, [pc, #592]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004424:	4b8f      	ldr	r3, [pc, #572]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 020c 	bic.w	r2, r3, #12
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	498c      	ldr	r1, [pc, #560]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004446:	4b87      	ldr	r3, [pc, #540]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	4983      	ldr	r1, [pc, #524]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004468:	4b7e      	ldr	r3, [pc, #504]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	497b      	ldr	r1, [pc, #492]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800448a:	4b76      	ldr	r3, [pc, #472]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004498:	4972      	ldr	r1, [pc, #456]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ac:	4b6d      	ldr	r3, [pc, #436]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	496a      	ldr	r1, [pc, #424]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ce:	4b65      	ldr	r3, [pc, #404]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044dc:	4961      	ldr	r1, [pc, #388]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044f0:	4b5c      	ldr	r3, [pc, #368]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fe:	4959      	ldr	r1, [pc, #356]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004512:	4b54      	ldr	r3, [pc, #336]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	4950      	ldr	r1, [pc, #320]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004534:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	4948      	ldr	r1, [pc, #288]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004556:	4b43      	ldr	r3, [pc, #268]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004564:	493f      	ldr	r1, [pc, #252]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d028      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004578:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004586:	4937      	ldr	r1, [pc, #220]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004596:	d106      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004598:	4b32      	ldr	r3, [pc, #200]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a31      	ldr	r2, [pc, #196]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800459e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045a2:	60d3      	str	r3, [r2, #12]
 80045a4:	e011      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045ae:	d10c      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f8c8 	bl	800474c <RCCEx_PLLSAI1_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d028      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	491f      	ldr	r1, [pc, #124]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f4:	d106      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4a1a      	ldr	r2, [pc, #104]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004600:	60d3      	str	r3, [r2, #12]
 8004602:	e011      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800460c:	d10c      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	2101      	movs	r1, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f899 	bl	800474c <RCCEx_PLLSAI1_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004642:	4908      	ldr	r1, [pc, #32]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004652:	d109      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4b03      	ldr	r3, [pc, #12]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a02      	ldr	r2, [pc, #8]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
 8004660:	e014      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004670:	d10c      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	2101      	movs	r1, #1
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f867 	bl	800474c <RCCEx_PLLSAI1_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d02f      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004698:	4b2b      	ldr	r3, [pc, #172]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a6:	4928      	ldr	r1, [pc, #160]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	2102      	movs	r1, #2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f844 	bl	800474c <RCCEx_PLLSAI1_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	74bb      	strb	r3, [r7, #18]
 80046d2:	e011      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3320      	adds	r3, #32
 80046e2:	2102      	movs	r1, #2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f921 	bl	800492c <RCCEx_PLLSAI2_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004704:	4b10      	ldr	r3, [pc, #64]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004712:	490d      	ldr	r1, [pc, #52]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004736:	4904      	ldr	r1, [pc, #16]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800473e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40021000 	.word	0x40021000

0800474c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800475a:	4b73      	ldr	r3, [pc, #460]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d018      	beq.n	8004798 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004766:	4b70      	ldr	r3, [pc, #448]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0203 	and.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d10d      	bne.n	8004792 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
       ||
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800477e:	4b6a      	ldr	r3, [pc, #424]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
       ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d044      	beq.n	800481c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
 8004796:	e041      	b.n	800481c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d00c      	beq.n	80047ba <RCCEx_PLLSAI1_Config+0x6e>
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d013      	beq.n	80047cc <RCCEx_PLLSAI1_Config+0x80>
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d120      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047a8:	4b5f      	ldr	r3, [pc, #380]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d11d      	bne.n	80047f0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b8:	e01a      	b.n	80047f0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047ba:	4b5b      	ldr	r3, [pc, #364]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d116      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ca:	e013      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047cc:	4b56      	ldr	r3, [pc, #344]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047d8:	4b53      	ldr	r3, [pc, #332]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047e8:	e006      	b.n	80047f8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
      break;
 80047ee:	e004      	b.n	80047fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047f0:	bf00      	nop
 80047f2:	e002      	b.n	80047fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10d      	bne.n	800481c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004800:	4b49      	ldr	r3, [pc, #292]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	3b01      	subs	r3, #1
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	430b      	orrs	r3, r1
 8004816:	4944      	ldr	r1, [pc, #272]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004818:	4313      	orrs	r3, r2
 800481a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d17d      	bne.n	800491e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004822:	4b41      	ldr	r3, [pc, #260]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a40      	ldr	r2, [pc, #256]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004828:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800482c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482e:	f7fc fafd 	bl	8000e2c <HAL_GetTick>
 8004832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004834:	e009      	b.n	800484a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004836:	f7fc faf9 	bl	8000e2c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d902      	bls.n	800484a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	73fb      	strb	r3, [r7, #15]
        break;
 8004848:	e005      	b.n	8004856 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800484a:	4b37      	ldr	r3, [pc, #220]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ef      	bne.n	8004836 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d160      	bne.n	800491e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d111      	bne.n	8004886 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004862:	4b31      	ldr	r3, [pc, #196]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800486a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6892      	ldr	r2, [r2, #8]
 8004872:	0211      	lsls	r1, r2, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68d2      	ldr	r2, [r2, #12]
 8004878:	0912      	lsrs	r2, r2, #4
 800487a:	0452      	lsls	r2, r2, #17
 800487c:	430a      	orrs	r2, r1
 800487e:	492a      	ldr	r1, [pc, #168]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004880:	4313      	orrs	r3, r2
 8004882:	610b      	str	r3, [r1, #16]
 8004884:	e027      	b.n	80048d6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d112      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800488c:	4b26      	ldr	r3, [pc, #152]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6892      	ldr	r2, [r2, #8]
 800489c:	0211      	lsls	r1, r2, #8
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6912      	ldr	r2, [r2, #16]
 80048a2:	0852      	lsrs	r2, r2, #1
 80048a4:	3a01      	subs	r2, #1
 80048a6:	0552      	lsls	r2, r2, #21
 80048a8:	430a      	orrs	r2, r1
 80048aa:	491f      	ldr	r1, [pc, #124]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	610b      	str	r3, [r1, #16]
 80048b0:	e011      	b.n	80048d6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6892      	ldr	r2, [r2, #8]
 80048c2:	0211      	lsls	r1, r2, #8
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6952      	ldr	r2, [r2, #20]
 80048c8:	0852      	lsrs	r2, r2, #1
 80048ca:	3a01      	subs	r2, #1
 80048cc:	0652      	lsls	r2, r2, #25
 80048ce:	430a      	orrs	r2, r1
 80048d0:	4915      	ldr	r1, [pc, #84]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048d6:	4b14      	ldr	r3, [pc, #80]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a13      	ldr	r2, [pc, #76]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fc faa3 	bl	8000e2c <HAL_GetTick>
 80048e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048e8:	e009      	b.n	80048fe <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ea:	f7fc fa9f 	bl	8000e2c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d902      	bls.n	80048fe <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	73fb      	strb	r3, [r7, #15]
          break;
 80048fc:	e005      	b.n	800490a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0ef      	beq.n	80048ea <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	4903      	ldr	r1, [pc, #12]	; (8004928 <RCCEx_PLLSAI1_Config+0x1dc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40021000 	.word	0x40021000

0800492c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800493a:	4b68      	ldr	r3, [pc, #416]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004946:	4b65      	ldr	r3, [pc, #404]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0203 	and.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d10d      	bne.n	8004972 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
       ||
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
       ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d044      	beq.n	80049fc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	e041      	b.n	80049fc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d00c      	beq.n	800499a <RCCEx_PLLSAI2_Config+0x6e>
 8004980:	2b03      	cmp	r3, #3
 8004982:	d013      	beq.n	80049ac <RCCEx_PLLSAI2_Config+0x80>
 8004984:	2b01      	cmp	r3, #1
 8004986:	d120      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004988:	4b54      	ldr	r3, [pc, #336]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11d      	bne.n	80049d0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004998:	e01a      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800499a:	4b50      	ldr	r3, [pc, #320]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049aa:	e013      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049ac:	4b4b      	ldr	r3, [pc, #300]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10f      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049b8:	4b48      	ldr	r3, [pc, #288]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049c8:	e006      	b.n	80049d8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
      break;
 80049ce:	e004      	b.n	80049da <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049d0:	bf00      	nop
 80049d2:	e002      	b.n	80049da <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10d      	bne.n	80049fc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049e0:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	430b      	orrs	r3, r1
 80049f6:	4939      	ldr	r1, [pc, #228]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d167      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a02:	4b36      	ldr	r3, [pc, #216]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a35      	ldr	r2, [pc, #212]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0e:	f7fc fa0d 	bl	8000e2c <HAL_GetTick>
 8004a12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a14:	e009      	b.n	8004a2a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a16:	f7fc fa09 	bl	8000e2c <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d902      	bls.n	8004a2a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	73fb      	strb	r3, [r7, #15]
        break;
 8004a28:	e005      	b.n	8004a36 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a2a:	4b2c      	ldr	r3, [pc, #176]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1ef      	bne.n	8004a16 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d14a      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d111      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a42:	4b26      	ldr	r3, [pc, #152]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	0211      	lsls	r1, r2, #8
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68d2      	ldr	r2, [r2, #12]
 8004a58:	0912      	lsrs	r2, r2, #4
 8004a5a:	0452      	lsls	r2, r2, #17
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	491f      	ldr	r1, [pc, #124]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	614b      	str	r3, [r1, #20]
 8004a64:	e011      	b.n	8004a8a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a66:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6892      	ldr	r2, [r2, #8]
 8004a76:	0211      	lsls	r1, r2, #8
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6912      	ldr	r2, [r2, #16]
 8004a7c:	0852      	lsrs	r2, r2, #1
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	0652      	lsls	r2, r2, #25
 8004a82:	430a      	orrs	r2, r1
 8004a84:	4915      	ldr	r1, [pc, #84]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a96:	f7fc f9c9 	bl	8000e2c <HAL_GetTick>
 8004a9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a9c:	e009      	b.n	8004ab2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a9e:	f7fc f9c5 	bl	8000e2c <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d902      	bls.n	8004ab2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	73fb      	strb	r3, [r7, #15]
          break;
 8004ab0:	e005      	b.n	8004abe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ef      	beq.n	8004a9e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ac6:	695a      	ldr	r2, [r3, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	4903      	ldr	r1, [pc, #12]	; (8004adc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000

08004ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e049      	b.n	8004b86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f003 fc2a 	bl	8008360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f000 faa6 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d001      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e04f      	b.n	8004c48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a23      	ldr	r2, [pc, #140]	; (8004c54 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d018      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <HAL_TIM_Base_Start_IT+0xcc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d115      	bne.n	8004c32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <HAL_TIM_Base_Start_IT+0xdc>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b06      	cmp	r3, #6
 8004c16:	d015      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0xb4>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1e:	d011      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c30:	e008      	b.n	8004c44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e000      	b.n	8004c46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40013400 	.word	0x40013400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	00010007 	.word	0x00010007

08004c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0202 	mvn.w	r2, #2
 8004c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f9be 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9b0 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f9c1 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d122      	bne.n	8004d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0204 	mvn.w	r2, #4
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f994 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f986 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f997 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d122      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0208 	mvn.w	r2, #8
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f96a 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f95c 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f96d 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b10      	cmp	r3, #16
 8004d80:	d122      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0210 	mvn.w	r2, #16
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f940 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f932 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f943 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d10e      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d107      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0201 	mvn.w	r2, #1
 8004dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f002 f8ee 	bl	8006fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b80      	cmp	r3, #128	; 0x80
 8004e00:	d10e      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0c:	2b80      	cmp	r3, #128	; 0x80
 8004e0e:	d107      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 faee 	bl	80053fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2e:	d10e      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b80      	cmp	r3, #128	; 0x80
 8004e3c:	d107      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fae1 	bl	8005410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d10e      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d107      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8f1 	bl	800505c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d10e      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d107      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f06f 0220 	mvn.w	r2, #32
 8004e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 faa1 	bl	80053e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_TIM_ConfigClockSource+0x18>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e0a8      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x16a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ee8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b40      	cmp	r3, #64	; 0x40
 8004f00:	d067      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x124>
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d80b      	bhi.n	8004f1e <HAL_TIM_ConfigClockSource+0x70>
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d073      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x144>
 8004f0a:	2b10      	cmp	r3, #16
 8004f0c:	d802      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x66>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d06f      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f12:	e078      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d06c      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x144>
 8004f18:	2b30      	cmp	r3, #48	; 0x30
 8004f1a:	d06a      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004f1c:	e073      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f1e:	2b70      	cmp	r3, #112	; 0x70
 8004f20:	d00d      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x90>
 8004f22:	2b70      	cmp	r3, #112	; 0x70
 8004f24:	d804      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x82>
 8004f26:	2b50      	cmp	r3, #80	; 0x50
 8004f28:	d033      	beq.n	8004f92 <HAL_TIM_ConfigClockSource+0xe4>
 8004f2a:	2b60      	cmp	r3, #96	; 0x60
 8004f2c:	d041      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004f2e:	e06a      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f34:	d066      	beq.n	8005004 <HAL_TIM_ConfigClockSource+0x156>
 8004f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3a:	d017      	beq.n	8004f6c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004f3c:	e063      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6899      	ldr	r1, [r3, #8]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f000 f9a3 	bl	8005298 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	609a      	str	r2, [r3, #8]
      break;
 8004f6a:	e04c      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6899      	ldr	r1, [r3, #8]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f000 f98c 	bl	8005298 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f8e:	609a      	str	r2, [r3, #8]
      break;
 8004f90:	e039      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6859      	ldr	r1, [r3, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f000 f900 	bl	80051a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2150      	movs	r1, #80	; 0x50
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f959 	bl	8005262 <TIM_ITRx_SetConfig>
      break;
 8004fb0:	e029      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f000 f91f 	bl	8005202 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2160      	movs	r1, #96	; 0x60
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f949 	bl	8005262 <TIM_ITRx_SetConfig>
      break;
 8004fd0:	e019      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6859      	ldr	r1, [r3, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f000 f8e0 	bl	80051a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2140      	movs	r1, #64	; 0x40
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f939 	bl	8005262 <TIM_ITRx_SetConfig>
      break;
 8004ff0:	e009      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	f000 f930 	bl	8005262 <TIM_ITRx_SetConfig>
        break;
 8005002:	e000      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005004:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a40      	ldr	r2, [pc, #256]	; (8005184 <TIM_Base_SetConfig+0x114>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d00f      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a3d      	ldr	r2, [pc, #244]	; (8005188 <TIM_Base_SetConfig+0x118>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00b      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a3c      	ldr	r2, [pc, #240]	; (800518c <TIM_Base_SetConfig+0x11c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d007      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3b      	ldr	r2, [pc, #236]	; (8005190 <TIM_Base_SetConfig+0x120>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3a      	ldr	r2, [pc, #232]	; (8005194 <TIM_Base_SetConfig+0x124>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d108      	bne.n	80050c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2f      	ldr	r2, [pc, #188]	; (8005184 <TIM_Base_SetConfig+0x114>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01f      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d01b      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a2c      	ldr	r2, [pc, #176]	; (8005188 <TIM_Base_SetConfig+0x118>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d017      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2b      	ldr	r2, [pc, #172]	; (800518c <TIM_Base_SetConfig+0x11c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2a      	ldr	r2, [pc, #168]	; (8005190 <TIM_Base_SetConfig+0x120>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00f      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a29      	ldr	r2, [pc, #164]	; (8005194 <TIM_Base_SetConfig+0x124>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a28      	ldr	r2, [pc, #160]	; (8005198 <TIM_Base_SetConfig+0x128>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a27      	ldr	r2, [pc, #156]	; (800519c <TIM_Base_SetConfig+0x12c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <TIM_Base_SetConfig+0x130>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d108      	bne.n	800511c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a10      	ldr	r2, [pc, #64]	; (8005184 <TIM_Base_SetConfig+0x114>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00f      	beq.n	8005168 <TIM_Base_SetConfig+0xf8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a12      	ldr	r2, [pc, #72]	; (8005194 <TIM_Base_SetConfig+0x124>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00b      	beq.n	8005168 <TIM_Base_SetConfig+0xf8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a11      	ldr	r2, [pc, #68]	; (8005198 <TIM_Base_SetConfig+0x128>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_Base_SetConfig+0xf8>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a10      	ldr	r2, [pc, #64]	; (800519c <TIM_Base_SetConfig+0x12c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0xf8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <TIM_Base_SetConfig+0x130>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d103      	bne.n	8005170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	615a      	str	r2, [r3, #20]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800
 8005190:	40000c00 	.word	0x40000c00
 8005194:	40013400 	.word	0x40013400
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400
 80051a0:	40014800 	.word	0x40014800

080051a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0201 	bic.w	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f023 030a 	bic.w	r3, r3, #10
 80051e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005202:	b480      	push	{r7}
 8005204:	b087      	sub	sp, #28
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0210 	bic.w	r2, r3, #16
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800522c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	031b      	lsls	r3, r3, #12
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800523e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	f043 0307 	orr.w	r3, r3, #7
 8005284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	021a      	lsls	r2, r3, #8
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4313      	orrs	r3, r2
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e068      	b.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2e      	ldr	r2, [pc, #184]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d108      	bne.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800532a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01d      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005362:	d018      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1a      	ldr	r2, [pc, #104]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10c      	bne.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40013400 	.word	0x40013400
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40014000 	.word	0x40014000

080053e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e040      	b.n	80054b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f002 ffc2 	bl	80083d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2224      	movs	r2, #36	; 0x24
 8005450:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f8c0 	bl	80055e8 <UART_SetConfig>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e022      	b.n	80054b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fb3e 	bl	8005afc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800548e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800549e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fbc5 	bl	8005c40 <UART_CheckIdleState>
 80054b6:	4603      	mov	r3, r0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	; 0x28
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	f040 8081 	bne.w	80055dc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <HAL_UART_Transmit+0x26>
 80054e0:	88fb      	ldrh	r3, [r7, #6]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e079      	b.n	80055de <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_UART_Transmit+0x38>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e072      	b.n	80055de <HAL_UART_Transmit+0x11e>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2221      	movs	r2, #33	; 0x21
 800550a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800550c:	f7fb fc8e 	bl	8000e2c <HAL_GetTick>
 8005510:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552a:	d108      	bne.n	800553e <HAL_UART_Transmit+0x7e>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	e003      	b.n	8005546 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800554e:	e02d      	b.n	80055ac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2200      	movs	r2, #0
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 fbb5 	bl	8005cca <UART_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e039      	b.n	80055de <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	881a      	ldrh	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800557c:	b292      	uxth	r2, r2
 800557e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	3302      	adds	r3, #2
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	e008      	b.n	800559a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	781a      	ldrb	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	b292      	uxth	r2, r2
 8005592:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3301      	adds	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1cb      	bne.n	8005550 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2200      	movs	r2, #0
 80055c0:	2140      	movs	r1, #64	; 0x40
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 fb81 	bl	8005cca <UART_WaitOnFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e005      	b.n	80055de <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	e000      	b.n	80055de <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80055ec:	b088      	sub	sp, #32
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4313      	orrs	r3, r2
 800560c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4bac      	ldr	r3, [pc, #688]	; (80058c8 <UART_SetConfig+0x2e0>)
 8005616:	4013      	ands	r3, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	69f9      	ldr	r1, [r7, #28]
 800561e:	430b      	orrs	r3, r1
 8005620:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4aa2      	ldr	r2, [pc, #648]	; (80058cc <UART_SetConfig+0x2e4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	4313      	orrs	r3, r2
 8005650:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	430a      	orrs	r2, r1
 8005664:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a99      	ldr	r2, [pc, #612]	; (80058d0 <UART_SetConfig+0x2e8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d121      	bne.n	80056b4 <UART_SetConfig+0xcc>
 8005670:	4b98      	ldr	r3, [pc, #608]	; (80058d4 <UART_SetConfig+0x2ec>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b03      	cmp	r3, #3
 800567c:	d816      	bhi.n	80056ac <UART_SetConfig+0xc4>
 800567e:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <UART_SetConfig+0x9c>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	08005695 	.word	0x08005695
 8005688:	080056a1 	.word	0x080056a1
 800568c:	0800569b 	.word	0x0800569b
 8005690:	080056a7 	.word	0x080056a7
 8005694:	2301      	movs	r3, #1
 8005696:	76fb      	strb	r3, [r7, #27]
 8005698:	e0e8      	b.n	800586c <UART_SetConfig+0x284>
 800569a:	2302      	movs	r3, #2
 800569c:	76fb      	strb	r3, [r7, #27]
 800569e:	e0e5      	b.n	800586c <UART_SetConfig+0x284>
 80056a0:	2304      	movs	r3, #4
 80056a2:	76fb      	strb	r3, [r7, #27]
 80056a4:	e0e2      	b.n	800586c <UART_SetConfig+0x284>
 80056a6:	2308      	movs	r3, #8
 80056a8:	76fb      	strb	r3, [r7, #27]
 80056aa:	e0df      	b.n	800586c <UART_SetConfig+0x284>
 80056ac:	2310      	movs	r3, #16
 80056ae:	76fb      	strb	r3, [r7, #27]
 80056b0:	bf00      	nop
 80056b2:	e0db      	b.n	800586c <UART_SetConfig+0x284>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a87      	ldr	r2, [pc, #540]	; (80058d8 <UART_SetConfig+0x2f0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d134      	bne.n	8005728 <UART_SetConfig+0x140>
 80056be:	4b85      	ldr	r3, [pc, #532]	; (80058d4 <UART_SetConfig+0x2ec>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c4:	f003 030c 	and.w	r3, r3, #12
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	d829      	bhi.n	8005720 <UART_SetConfig+0x138>
 80056cc:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <UART_SetConfig+0xec>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	08005709 	.word	0x08005709
 80056d8:	08005721 	.word	0x08005721
 80056dc:	08005721 	.word	0x08005721
 80056e0:	08005721 	.word	0x08005721
 80056e4:	08005715 	.word	0x08005715
 80056e8:	08005721 	.word	0x08005721
 80056ec:	08005721 	.word	0x08005721
 80056f0:	08005721 	.word	0x08005721
 80056f4:	0800570f 	.word	0x0800570f
 80056f8:	08005721 	.word	0x08005721
 80056fc:	08005721 	.word	0x08005721
 8005700:	08005721 	.word	0x08005721
 8005704:	0800571b 	.word	0x0800571b
 8005708:	2300      	movs	r3, #0
 800570a:	76fb      	strb	r3, [r7, #27]
 800570c:	e0ae      	b.n	800586c <UART_SetConfig+0x284>
 800570e:	2302      	movs	r3, #2
 8005710:	76fb      	strb	r3, [r7, #27]
 8005712:	e0ab      	b.n	800586c <UART_SetConfig+0x284>
 8005714:	2304      	movs	r3, #4
 8005716:	76fb      	strb	r3, [r7, #27]
 8005718:	e0a8      	b.n	800586c <UART_SetConfig+0x284>
 800571a:	2308      	movs	r3, #8
 800571c:	76fb      	strb	r3, [r7, #27]
 800571e:	e0a5      	b.n	800586c <UART_SetConfig+0x284>
 8005720:	2310      	movs	r3, #16
 8005722:	76fb      	strb	r3, [r7, #27]
 8005724:	bf00      	nop
 8005726:	e0a1      	b.n	800586c <UART_SetConfig+0x284>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a6b      	ldr	r2, [pc, #428]	; (80058dc <UART_SetConfig+0x2f4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d120      	bne.n	8005774 <UART_SetConfig+0x18c>
 8005732:	4b68      	ldr	r3, [pc, #416]	; (80058d4 <UART_SetConfig+0x2ec>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005738:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800573c:	2b10      	cmp	r3, #16
 800573e:	d00f      	beq.n	8005760 <UART_SetConfig+0x178>
 8005740:	2b10      	cmp	r3, #16
 8005742:	d802      	bhi.n	800574a <UART_SetConfig+0x162>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <UART_SetConfig+0x16c>
 8005748:	e010      	b.n	800576c <UART_SetConfig+0x184>
 800574a:	2b20      	cmp	r3, #32
 800574c:	d005      	beq.n	800575a <UART_SetConfig+0x172>
 800574e:	2b30      	cmp	r3, #48	; 0x30
 8005750:	d009      	beq.n	8005766 <UART_SetConfig+0x17e>
 8005752:	e00b      	b.n	800576c <UART_SetConfig+0x184>
 8005754:	2300      	movs	r3, #0
 8005756:	76fb      	strb	r3, [r7, #27]
 8005758:	e088      	b.n	800586c <UART_SetConfig+0x284>
 800575a:	2302      	movs	r3, #2
 800575c:	76fb      	strb	r3, [r7, #27]
 800575e:	e085      	b.n	800586c <UART_SetConfig+0x284>
 8005760:	2304      	movs	r3, #4
 8005762:	76fb      	strb	r3, [r7, #27]
 8005764:	e082      	b.n	800586c <UART_SetConfig+0x284>
 8005766:	2308      	movs	r3, #8
 8005768:	76fb      	strb	r3, [r7, #27]
 800576a:	e07f      	b.n	800586c <UART_SetConfig+0x284>
 800576c:	2310      	movs	r3, #16
 800576e:	76fb      	strb	r3, [r7, #27]
 8005770:	bf00      	nop
 8005772:	e07b      	b.n	800586c <UART_SetConfig+0x284>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a59      	ldr	r2, [pc, #356]	; (80058e0 <UART_SetConfig+0x2f8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d120      	bne.n	80057c0 <UART_SetConfig+0x1d8>
 800577e:	4b55      	ldr	r3, [pc, #340]	; (80058d4 <UART_SetConfig+0x2ec>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005784:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005788:	2b40      	cmp	r3, #64	; 0x40
 800578a:	d00f      	beq.n	80057ac <UART_SetConfig+0x1c4>
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d802      	bhi.n	8005796 <UART_SetConfig+0x1ae>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <UART_SetConfig+0x1b8>
 8005794:	e010      	b.n	80057b8 <UART_SetConfig+0x1d0>
 8005796:	2b80      	cmp	r3, #128	; 0x80
 8005798:	d005      	beq.n	80057a6 <UART_SetConfig+0x1be>
 800579a:	2bc0      	cmp	r3, #192	; 0xc0
 800579c:	d009      	beq.n	80057b2 <UART_SetConfig+0x1ca>
 800579e:	e00b      	b.n	80057b8 <UART_SetConfig+0x1d0>
 80057a0:	2300      	movs	r3, #0
 80057a2:	76fb      	strb	r3, [r7, #27]
 80057a4:	e062      	b.n	800586c <UART_SetConfig+0x284>
 80057a6:	2302      	movs	r3, #2
 80057a8:	76fb      	strb	r3, [r7, #27]
 80057aa:	e05f      	b.n	800586c <UART_SetConfig+0x284>
 80057ac:	2304      	movs	r3, #4
 80057ae:	76fb      	strb	r3, [r7, #27]
 80057b0:	e05c      	b.n	800586c <UART_SetConfig+0x284>
 80057b2:	2308      	movs	r3, #8
 80057b4:	76fb      	strb	r3, [r7, #27]
 80057b6:	e059      	b.n	800586c <UART_SetConfig+0x284>
 80057b8:	2310      	movs	r3, #16
 80057ba:	76fb      	strb	r3, [r7, #27]
 80057bc:	bf00      	nop
 80057be:	e055      	b.n	800586c <UART_SetConfig+0x284>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a47      	ldr	r2, [pc, #284]	; (80058e4 <UART_SetConfig+0x2fc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d124      	bne.n	8005814 <UART_SetConfig+0x22c>
 80057ca:	4b42      	ldr	r3, [pc, #264]	; (80058d4 <UART_SetConfig+0x2ec>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d8:	d012      	beq.n	8005800 <UART_SetConfig+0x218>
 80057da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057de:	d802      	bhi.n	80057e6 <UART_SetConfig+0x1fe>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <UART_SetConfig+0x20c>
 80057e4:	e012      	b.n	800580c <UART_SetConfig+0x224>
 80057e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ea:	d006      	beq.n	80057fa <UART_SetConfig+0x212>
 80057ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057f0:	d009      	beq.n	8005806 <UART_SetConfig+0x21e>
 80057f2:	e00b      	b.n	800580c <UART_SetConfig+0x224>
 80057f4:	2300      	movs	r3, #0
 80057f6:	76fb      	strb	r3, [r7, #27]
 80057f8:	e038      	b.n	800586c <UART_SetConfig+0x284>
 80057fa:	2302      	movs	r3, #2
 80057fc:	76fb      	strb	r3, [r7, #27]
 80057fe:	e035      	b.n	800586c <UART_SetConfig+0x284>
 8005800:	2304      	movs	r3, #4
 8005802:	76fb      	strb	r3, [r7, #27]
 8005804:	e032      	b.n	800586c <UART_SetConfig+0x284>
 8005806:	2308      	movs	r3, #8
 8005808:	76fb      	strb	r3, [r7, #27]
 800580a:	e02f      	b.n	800586c <UART_SetConfig+0x284>
 800580c:	2310      	movs	r3, #16
 800580e:	76fb      	strb	r3, [r7, #27]
 8005810:	bf00      	nop
 8005812:	e02b      	b.n	800586c <UART_SetConfig+0x284>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2c      	ldr	r2, [pc, #176]	; (80058cc <UART_SetConfig+0x2e4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d124      	bne.n	8005868 <UART_SetConfig+0x280>
 800581e:	4b2d      	ldr	r3, [pc, #180]	; (80058d4 <UART_SetConfig+0x2ec>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582c:	d012      	beq.n	8005854 <UART_SetConfig+0x26c>
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005832:	d802      	bhi.n	800583a <UART_SetConfig+0x252>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d007      	beq.n	8005848 <UART_SetConfig+0x260>
 8005838:	e012      	b.n	8005860 <UART_SetConfig+0x278>
 800583a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583e:	d006      	beq.n	800584e <UART_SetConfig+0x266>
 8005840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005844:	d009      	beq.n	800585a <UART_SetConfig+0x272>
 8005846:	e00b      	b.n	8005860 <UART_SetConfig+0x278>
 8005848:	2300      	movs	r3, #0
 800584a:	76fb      	strb	r3, [r7, #27]
 800584c:	e00e      	b.n	800586c <UART_SetConfig+0x284>
 800584e:	2302      	movs	r3, #2
 8005850:	76fb      	strb	r3, [r7, #27]
 8005852:	e00b      	b.n	800586c <UART_SetConfig+0x284>
 8005854:	2304      	movs	r3, #4
 8005856:	76fb      	strb	r3, [r7, #27]
 8005858:	e008      	b.n	800586c <UART_SetConfig+0x284>
 800585a:	2308      	movs	r3, #8
 800585c:	76fb      	strb	r3, [r7, #27]
 800585e:	e005      	b.n	800586c <UART_SetConfig+0x284>
 8005860:	2310      	movs	r3, #16
 8005862:	76fb      	strb	r3, [r7, #27]
 8005864:	bf00      	nop
 8005866:	e001      	b.n	800586c <UART_SetConfig+0x284>
 8005868:	2310      	movs	r3, #16
 800586a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a16      	ldr	r2, [pc, #88]	; (80058cc <UART_SetConfig+0x2e4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	f040 8087 	bne.w	8005986 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005878:	7efb      	ldrb	r3, [r7, #27]
 800587a:	2b08      	cmp	r3, #8
 800587c:	d836      	bhi.n	80058ec <UART_SetConfig+0x304>
 800587e:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0x29c>)
 8005880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005884:	080058a9 	.word	0x080058a9
 8005888:	080058ed 	.word	0x080058ed
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058ed 	.word	0x080058ed
 8005894:	080058b7 	.word	0x080058b7
 8005898:	080058ed 	.word	0x080058ed
 800589c:	080058ed 	.word	0x080058ed
 80058a0:	080058ed 	.word	0x080058ed
 80058a4:	080058bf 	.word	0x080058bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a8:	f7fe fbde 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80058ac:	6178      	str	r0, [r7, #20]
        break;
 80058ae:	e022      	b.n	80058f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b0:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <UART_SetConfig+0x300>)
 80058b2:	617b      	str	r3, [r7, #20]
        break;
 80058b4:	e01f      	b.n	80058f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b6:	f7fe fb41 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 80058ba:	6178      	str	r0, [r7, #20]
        break;
 80058bc:	e01b      	b.n	80058f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c2:	617b      	str	r3, [r7, #20]
        break;
 80058c4:	e017      	b.n	80058f6 <UART_SetConfig+0x30e>
 80058c6:	bf00      	nop
 80058c8:	efff69f3 	.word	0xefff69f3
 80058cc:	40008000 	.word	0x40008000
 80058d0:	40013800 	.word	0x40013800
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40004400 	.word	0x40004400
 80058dc:	40004800 	.word	0x40004800
 80058e0:	40004c00 	.word	0x40004c00
 80058e4:	40005000 	.word	0x40005000
 80058e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	76bb      	strb	r3, [r7, #26]
        break;
 80058f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 80f1 	beq.w	8005ae0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	4413      	add	r3, r2
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	429a      	cmp	r2, r3
 800590c:	d305      	bcc.n	800591a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	429a      	cmp	r2, r3
 8005918:	d902      	bls.n	8005920 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	76bb      	strb	r3, [r7, #26]
 800591e:	e0df      	b.n	8005ae0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4619      	mov	r1, r3
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	f04f 0400 	mov.w	r4, #0
 8005930:	0214      	lsls	r4, r2, #8
 8005932:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005936:	020b      	lsls	r3, r1, #8
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6852      	ldr	r2, [r2, #4]
 800593c:	0852      	lsrs	r2, r2, #1
 800593e:	4611      	mov	r1, r2
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	eb13 0b01 	adds.w	fp, r3, r1
 8005948:	eb44 0c02 	adc.w	ip, r4, r2
 800594c:	4658      	mov	r0, fp
 800594e:	4661      	mov	r1, ip
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f04f 0400 	mov.w	r4, #0
 8005958:	461a      	mov	r2, r3
 800595a:	4623      	mov	r3, r4
 800595c:	f7fb f87e 	bl	8000a5c <__aeabi_uldivmod>
 8005960:	4603      	mov	r3, r0
 8005962:	460c      	mov	r4, r1
 8005964:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800596c:	d308      	bcc.n	8005980 <UART_SetConfig+0x398>
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005974:	d204      	bcs.n	8005980 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	60da      	str	r2, [r3, #12]
 800597e:	e0af      	b.n	8005ae0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	76bb      	strb	r3, [r7, #26]
 8005984:	e0ac      	b.n	8005ae0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598e:	d15b      	bne.n	8005a48 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005990:	7efb      	ldrb	r3, [r7, #27]
 8005992:	2b08      	cmp	r3, #8
 8005994:	d827      	bhi.n	80059e6 <UART_SetConfig+0x3fe>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0x3b4>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059c1 	.word	0x080059c1
 80059a0:	080059c9 	.word	0x080059c9
 80059a4:	080059d1 	.word	0x080059d1
 80059a8:	080059e7 	.word	0x080059e7
 80059ac:	080059d7 	.word	0x080059d7
 80059b0:	080059e7 	.word	0x080059e7
 80059b4:	080059e7 	.word	0x080059e7
 80059b8:	080059e7 	.word	0x080059e7
 80059bc:	080059df 	.word	0x080059df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c0:	f7fe fb52 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80059c4:	6178      	str	r0, [r7, #20]
        break;
 80059c6:	e013      	b.n	80059f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c8:	f7fe fb64 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 80059cc:	6178      	str	r0, [r7, #20]
        break;
 80059ce:	e00f      	b.n	80059f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d0:	4b49      	ldr	r3, [pc, #292]	; (8005af8 <UART_SetConfig+0x510>)
 80059d2:	617b      	str	r3, [r7, #20]
        break;
 80059d4:	e00c      	b.n	80059f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d6:	f7fe fab1 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 80059da:	6178      	str	r0, [r7, #20]
        break;
 80059dc:	e008      	b.n	80059f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e2:	617b      	str	r3, [r7, #20]
        break;
 80059e4:	e004      	b.n	80059f0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	76bb      	strb	r3, [r7, #26]
        break;
 80059ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d074      	beq.n	8005ae0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	005a      	lsls	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	441a      	add	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b0f      	cmp	r3, #15
 8005a12:	d916      	bls.n	8005a42 <UART_SetConfig+0x45a>
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1a:	d212      	bcs.n	8005a42 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f023 030f 	bic.w	r3, r3, #15
 8005a24:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	085b      	lsrs	r3, r3, #1
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	89fb      	ldrh	r3, [r7, #14]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	89fa      	ldrh	r2, [r7, #14]
 8005a3e:	60da      	str	r2, [r3, #12]
 8005a40:	e04e      	b.n	8005ae0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	76bb      	strb	r3, [r7, #26]
 8005a46:	e04b      	b.n	8005ae0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a48:	7efb      	ldrb	r3, [r7, #27]
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d827      	bhi.n	8005a9e <UART_SetConfig+0x4b6>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x46c>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a89 	.word	0x08005a89
 8005a60:	08005a9f 	.word	0x08005a9f
 8005a64:	08005a8f 	.word	0x08005a8f
 8005a68:	08005a9f 	.word	0x08005a9f
 8005a6c:	08005a9f 	.word	0x08005a9f
 8005a70:	08005a9f 	.word	0x08005a9f
 8005a74:	08005a97 	.word	0x08005a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a78:	f7fe faf6 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8005a7c:	6178      	str	r0, [r7, #20]
        break;
 8005a7e:	e013      	b.n	8005aa8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a80:	f7fe fb08 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 8005a84:	6178      	str	r0, [r7, #20]
        break;
 8005a86:	e00f      	b.n	8005aa8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a88:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <UART_SetConfig+0x510>)
 8005a8a:	617b      	str	r3, [r7, #20]
        break;
 8005a8c:	e00c      	b.n	8005aa8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8e:	f7fe fa55 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8005a92:	6178      	str	r0, [r7, #20]
        break;
 8005a94:	e008      	b.n	8005aa8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9a:	617b      	str	r3, [r7, #20]
        break;
 8005a9c:	e004      	b.n	8005aa8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	76bb      	strb	r3, [r7, #26]
        break;
 8005aa6:	bf00      	nop
    }

    if (pclk != 0U)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d018      	beq.n	8005ae0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	085a      	lsrs	r2, r3, #1
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	441a      	add	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b0f      	cmp	r3, #15
 8005ac8:	d908      	bls.n	8005adc <UART_SetConfig+0x4f4>
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad0:	d204      	bcs.n	8005adc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	60da      	str	r2, [r3, #12]
 8005ada:	e001      	b.n	8005ae0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005aec:	7ebb      	ldrb	r3, [r7, #26]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005af8:	00f42400 	.word	0x00f42400

08005afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01a      	beq.n	8005c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bfa:	d10a      	bne.n	8005c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	605a      	str	r2, [r3, #4]
  }
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005c4e:	f7fb f8ed 	bl	8000e2c <HAL_GetTick>
 8005c52:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d10e      	bne.n	8005c80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f82a 	bl	8005cca <UART_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e020      	b.n	8005cc2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d10e      	bne.n	8005cac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f814 	bl	8005cca <UART_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e00a      	b.n	8005cc2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cda:	e05d      	b.n	8005d98 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce2:	d059      	beq.n	8005d98 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce4:	f7fb f8a2 	bl	8000e2c <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d302      	bcc.n	8005cfa <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d11b      	bne.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0201 	bic.w	r2, r2, #1
 8005d18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e042      	b.n	8005db8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02b      	beq.n	8005d98 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4e:	d123      	bne.n	8005d98 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d68:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e00f      	b.n	8005db8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69da      	ldr	r2, [r3, #28]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	4013      	ands	r3, r2
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	bf0c      	ite	eq
 8005da8:	2301      	moveq	r3, #1
 8005daa:	2300      	movne	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	461a      	mov	r2, r3
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d092      	beq.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HTS221_H_Init>:
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	80fb      	strh	r3, [r7, #6]
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2120      	movs	r1, #32
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fc69 	bl	80076a8 <SENSOR_IO_Read>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	73fb      	strb	r3, [r7, #15]
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	f023 0304 	bic.w	r3, r3, #4
 8005de0:	73fb      	strb	r3, [r7, #15]
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	73fb      	strb	r3, [r7, #15]
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	f023 0303 	bic.w	r3, r3, #3
 8005df0:	73fb      	strb	r3, [r7, #15]
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e00:	73fb      	strb	r3, [r7, #15]
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	7bfa      	ldrb	r2, [r7, #15]
 8005e08:	2120      	movs	r1, #32
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 fc32 	bl	8007674 <SENSOR_IO_Write>
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HTS221_H_ReadID>:
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	80fb      	strh	r3, [r7, #6]
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]
 8005e26:	f001 fc1b 	bl	8007660 <SENSOR_IO_Init>
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	210f      	movs	r1, #15
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 fc39 	bl	80076a8 <SENSOR_IO_Read>
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HTS221_H_ReadHumidity>:
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	80fb      	strh	r3, [r7, #6]
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	b2d8      	uxtb	r0, r3
 8005e52:	f107 020c 	add.w	r2, r7, #12
 8005e56:	2302      	movs	r3, #2
 8005e58:	21b0      	movs	r1, #176	; 0xb0
 8005e5a:	f001 fc43 	bl	80076e4 <SENSOR_IO_ReadMultiple>
 8005e5e:	7b3b      	ldrb	r3, [r7, #12]
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	83fb      	strh	r3, [r7, #30]
 8005e66:	7b7b      	ldrb	r3, [r7, #13]
 8005e68:	085b      	lsrs	r3, r3, #1
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	83bb      	strh	r3, [r7, #28]
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	b2d8      	uxtb	r0, r3
 8005e72:	f107 020c 	add.w	r2, r7, #12
 8005e76:	2302      	movs	r3, #2
 8005e78:	21b6      	movs	r1, #182	; 0xb6
 8005e7a:	f001 fc33 	bl	80076e4 <SENSOR_IO_ReadMultiple>
 8005e7e:	7b7b      	ldrb	r3, [r7, #13]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	b21a      	sxth	r2, r3
 8005e84:	7b3b      	ldrb	r3, [r7, #12]
 8005e86:	b21b      	sxth	r3, r3
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	837b      	strh	r3, [r7, #26]
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	b2d8      	uxtb	r0, r3
 8005e90:	f107 020c 	add.w	r2, r7, #12
 8005e94:	2302      	movs	r3, #2
 8005e96:	21ba      	movs	r1, #186	; 0xba
 8005e98:	f001 fc24 	bl	80076e4 <SENSOR_IO_ReadMultiple>
 8005e9c:	7b7b      	ldrb	r3, [r7, #13]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	b21a      	sxth	r2, r3
 8005ea2:	7b3b      	ldrb	r3, [r7, #12]
 8005ea4:	b21b      	sxth	r3, r3
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	833b      	strh	r3, [r7, #24]
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	b2d8      	uxtb	r0, r3
 8005eae:	f107 020c 	add.w	r2, r7, #12
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	21a8      	movs	r1, #168	; 0xa8
 8005eb6:	f001 fc15 	bl	80076e4 <SENSOR_IO_ReadMultiple>
 8005eba:	7b7b      	ldrb	r3, [r7, #13]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	b21a      	sxth	r2, r3
 8005ec0:	7b3b      	ldrb	r3, [r7, #12]
 8005ec2:	b21b      	sxth	r3, r3
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	82fb      	strh	r3, [r7, #22]
 8005ec8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005ecc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eda:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005ede:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	ee07 3a90 	vmov	s15, r3
 8005ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005eec:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005ef0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005ef4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f16:	edc7 7a04 	vstr	s15, [r7, #16]
 8005f1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f1e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f26:	edc7 7a04 	vstr	s15, [r7, #16]
 8005f2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f2e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005f74 <HTS221_H_ReadHumidity+0x130>
 8005f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3a:	dd01      	ble.n	8005f40 <HTS221_H_ReadHumidity+0xfc>
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <HTS221_H_ReadHumidity+0x134>)
 8005f3e:	e00a      	b.n	8005f56 <HTS221_H_ReadHumidity+0x112>
 8005f40:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4c:	d502      	bpl.n	8005f54 <HTS221_H_ReadHumidity+0x110>
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	e000      	b.n	8005f56 <HTS221_H_ReadHumidity+0x112>
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005f60:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f64:	eef0 7a66 	vmov.f32	s15, s13
 8005f68:	eeb0 0a67 	vmov.f32	s0, s15
 8005f6c:	3720      	adds	r7, #32
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	447a0000 	.word	0x447a0000
 8005f78:	447a0000 	.word	0x447a0000

08005f7c <HTS221_T_Init>:
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	6039      	str	r1, [r7, #0]
 8005f86:	80fb      	strh	r3, [r7, #6]
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2120      	movs	r1, #32
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fb8a 	bl	80076a8 <SENSOR_IO_Read>
 8005f94:	4603      	mov	r3, r0
 8005f96:	73fb      	strb	r3, [r7, #15]
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	f023 0304 	bic.w	r3, r3, #4
 8005f9e:	73fb      	strb	r3, [r7, #15]
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	f043 0304 	orr.w	r3, r3, #4
 8005fa6:	73fb      	strb	r3, [r7, #15]
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	73fb      	strb	r3, [r7, #15]
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fbe:	73fb      	strb	r3, [r7, #15]
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	7bfa      	ldrb	r2, [r7, #15]
 8005fc6:	2120      	movs	r1, #32
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 fb53 	bl	8007674 <SENSOR_IO_Write>
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HTS221_T_ReadTemp>:
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b088      	sub	sp, #32
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	4603      	mov	r3, r0
 8005fde:	80fb      	strh	r3, [r7, #6]
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	b2d8      	uxtb	r0, r3
 8005fe4:	f107 0208 	add.w	r2, r7, #8
 8005fe8:	2302      	movs	r3, #2
 8005fea:	21b2      	movs	r1, #178	; 0xb2
 8005fec:	f001 fb7a 	bl	80076e4 <SENSOR_IO_ReadMultiple>
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2135      	movs	r1, #53	; 0x35
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f001 fb56 	bl	80076a8 <SENSOR_IO_Read>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	7ffb      	ldrb	r3, [r7, #31]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	b21b      	sxth	r3, r3
 8006006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600a:	b21a      	sxth	r2, r3
 800600c:	7a3b      	ldrb	r3, [r7, #8]
 800600e:	b21b      	sxth	r3, r3
 8006010:	4313      	orrs	r3, r2
 8006012:	83bb      	strh	r3, [r7, #28]
 8006014:	7ffb      	ldrb	r3, [r7, #31]
 8006016:	019b      	lsls	r3, r3, #6
 8006018:	b21b      	sxth	r3, r3
 800601a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601e:	b21a      	sxth	r2, r3
 8006020:	7a7b      	ldrb	r3, [r7, #9]
 8006022:	b21b      	sxth	r3, r3
 8006024:	4313      	orrs	r3, r2
 8006026:	837b      	strh	r3, [r7, #26]
 8006028:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800602c:	10db      	asrs	r3, r3, #3
 800602e:	833b      	strh	r3, [r7, #24]
 8006030:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006034:	10db      	asrs	r3, r3, #3
 8006036:	82fb      	strh	r3, [r7, #22]
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	b2d8      	uxtb	r0, r3
 800603c:	f107 0208 	add.w	r2, r7, #8
 8006040:	2304      	movs	r3, #4
 8006042:	21bc      	movs	r1, #188	; 0xbc
 8006044:	f001 fb4e 	bl	80076e4 <SENSOR_IO_ReadMultiple>
 8006048:	7a7b      	ldrb	r3, [r7, #9]
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	b21a      	sxth	r2, r3
 800604e:	7a3b      	ldrb	r3, [r7, #8]
 8006050:	b21b      	sxth	r3, r3
 8006052:	4313      	orrs	r3, r2
 8006054:	82bb      	strh	r3, [r7, #20]
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	b21a      	sxth	r2, r3
 800605c:	7abb      	ldrb	r3, [r7, #10]
 800605e:	b21b      	sxth	r3, r3
 8006060:	4313      	orrs	r3, r2
 8006062:	827b      	strh	r3, [r7, #18]
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	b2d8      	uxtb	r0, r3
 8006068:	f107 0208 	add.w	r2, r7, #8
 800606c:	2302      	movs	r3, #2
 800606e:	21aa      	movs	r1, #170	; 0xaa
 8006070:	f001 fb38 	bl	80076e4 <SENSOR_IO_ReadMultiple>
 8006074:	7a7b      	ldrb	r3, [r7, #9]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	b21a      	sxth	r2, r3
 800607a:	7a3b      	ldrb	r3, [r7, #8]
 800607c:	b21b      	sxth	r3, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	823b      	strh	r3, [r7, #16]
 8006082:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006086:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006094:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006098:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80060aa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80060ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060d0:	edc7 7a03 	vstr	s15, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	ee07 3a90 	vmov	s15, r3
 80060da:	eeb0 0a67 	vmov.f32	s0, s15
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <LSM6DSL_AccInit>:
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	80fb      	strh	r3, [r7, #6]
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	2110      	movs	r1, #16
 80060f4:	20d4      	movs	r0, #212	; 0xd4
 80060f6:	f001 fad7 	bl	80076a8 <SENSOR_IO_Read>
 80060fa:	4603      	mov	r3, r0
 80060fc:	73bb      	strb	r3, [r7, #14]
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	73fb      	strb	r3, [r7, #15]
 8006102:	7bbb      	ldrb	r3, [r7, #14]
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	73bb      	strb	r3, [r7, #14]
 800610a:	7bba      	ldrb	r2, [r7, #14]
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	4313      	orrs	r3, r2
 8006110:	73bb      	strb	r3, [r7, #14]
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	461a      	mov	r2, r3
 8006116:	2110      	movs	r1, #16
 8006118:	20d4      	movs	r0, #212	; 0xd4
 800611a:	f001 faab 	bl	8007674 <SENSOR_IO_Write>
 800611e:	2112      	movs	r1, #18
 8006120:	20d4      	movs	r0, #212	; 0xd4
 8006122:	f001 fac1 	bl	80076a8 <SENSOR_IO_Read>
 8006126:	4603      	mov	r3, r0
 8006128:	73bb      	strb	r3, [r7, #14]
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	0a1b      	lsrs	r3, r3, #8
 800612e:	b29b      	uxth	r3, r3
 8006130:	73fb      	strb	r3, [r7, #15]
 8006132:	7bbb      	ldrb	r3, [r7, #14]
 8006134:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8006138:	73bb      	strb	r3, [r7, #14]
 800613a:	7bba      	ldrb	r2, [r7, #14]
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	4313      	orrs	r3, r2
 8006140:	73bb      	strb	r3, [r7, #14]
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	461a      	mov	r2, r3
 8006146:	2112      	movs	r1, #18
 8006148:	20d4      	movs	r0, #212	; 0xd4
 800614a:	f001 fa93 	bl	8007674 <SENSOR_IO_Write>
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <LSM6DSL_AccDeInit>:
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	2300      	movs	r3, #0
 800615e:	71fb      	strb	r3, [r7, #7]
 8006160:	2110      	movs	r1, #16
 8006162:	20d4      	movs	r0, #212	; 0xd4
 8006164:	f001 faa0 	bl	80076a8 <SENSOR_IO_Read>
 8006168:	4603      	mov	r3, r0
 800616a:	71fb      	strb	r3, [r7, #7]
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	71fb      	strb	r3, [r7, #7]
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	461a      	mov	r2, r3
 8006178:	2110      	movs	r1, #16
 800617a:	20d4      	movs	r0, #212	; 0xd4
 800617c:	f001 fa7a 	bl	8007674 <SENSOR_IO_Write>
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <LSM6DSL_AccReadID>:
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
 800618c:	f001 fa68 	bl	8007660 <SENSOR_IO_Init>
 8006190:	210f      	movs	r1, #15
 8006192:	20d4      	movs	r0, #212	; 0xd4
 8006194:	f001 fa88 	bl	80076a8 <SENSOR_IO_Read>
 8006198:	4603      	mov	r3, r0
 800619a:	4618      	mov	r0, r3
 800619c:	bd80      	pop	{r7, pc}

0800619e <LSM6DSL_AccLowPower>:
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	4603      	mov	r3, r0
 80061a6:	80fb      	strh	r3, [r7, #6]
 80061a8:	2300      	movs	r3, #0
 80061aa:	73fb      	strb	r3, [r7, #15]
 80061ac:	2115      	movs	r1, #21
 80061ae:	20d4      	movs	r0, #212	; 0xd4
 80061b0:	f001 fa7a 	bl	80076a8 <SENSOR_IO_Read>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73fb      	strb	r3, [r7, #15]
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	f023 0310 	bic.w	r3, r3, #16
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <LSM6DSL_AccLowPower+0x30>
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	f043 0310 	orr.w	r3, r3, #16
 80061cc:	73fb      	strb	r3, [r7, #15]
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	461a      	mov	r2, r3
 80061d2:	2115      	movs	r1, #21
 80061d4:	20d4      	movs	r0, #212	; 0xd4
 80061d6:	f001 fa4d 	bl	8007674 <SENSOR_IO_Write>
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <LSM6DSL_AccReadXYZ>:
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	2300      	movs	r3, #0
 80061ee:	75fb      	strb	r3, [r7, #23]
 80061f0:	2300      	movs	r3, #0
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	2110      	movs	r1, #16
 80061fc:	20d4      	movs	r0, #212	; 0xd4
 80061fe:	f001 fa53 	bl	80076a8 <SENSOR_IO_Read>
 8006202:	4603      	mov	r3, r0
 8006204:	75fb      	strb	r3, [r7, #23]
 8006206:	f107 0208 	add.w	r2, r7, #8
 800620a:	2306      	movs	r3, #6
 800620c:	2128      	movs	r1, #40	; 0x28
 800620e:	20d4      	movs	r0, #212	; 0xd4
 8006210:	f001 fa68 	bl	80076e4 <SENSOR_IO_ReadMultiple>
 8006214:	2300      	movs	r3, #0
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e01f      	b.n	800625a <LSM6DSL_AccReadXYZ+0x76>
 800621a:	7ffb      	ldrb	r3, [r7, #31]
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	3301      	adds	r3, #1
 8006220:	f107 0220 	add.w	r2, r7, #32
 8006224:	4413      	add	r3, r2
 8006226:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800622a:	b29b      	uxth	r3, r3
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	b29a      	uxth	r2, r3
 8006230:	7ffb      	ldrb	r3, [r7, #31]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	f107 0120 	add.w	r1, r7, #32
 8006238:	440b      	add	r3, r1
 800623a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800623e:	b29b      	uxth	r3, r3
 8006240:	4413      	add	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	7ffb      	ldrb	r3, [r7, #31]
 8006246:	b212      	sxth	r2, r2
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	f107 0120 	add.w	r1, r7, #32
 800624e:	440b      	add	r3, r1
 8006250:	f823 2c10 	strh.w	r2, [r3, #-16]
 8006254:	7ffb      	ldrb	r3, [r7, #31]
 8006256:	3301      	adds	r3, #1
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	7ffb      	ldrb	r3, [r7, #31]
 800625c:	2b02      	cmp	r3, #2
 800625e:	d9dc      	bls.n	800621a <LSM6DSL_AccReadXYZ+0x36>
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	f003 030c 	and.w	r3, r3, #12
 8006266:	2b0c      	cmp	r3, #12
 8006268:	d828      	bhi.n	80062bc <LSM6DSL_AccReadXYZ+0xd8>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <LSM6DSL_AccReadXYZ+0x8c>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	080062a5 	.word	0x080062a5
 8006274:	080062bd 	.word	0x080062bd
 8006278:	080062bd 	.word	0x080062bd
 800627c:	080062bd 	.word	0x080062bd
 8006280:	080062b7 	.word	0x080062b7
 8006284:	080062bd 	.word	0x080062bd
 8006288:	080062bd 	.word	0x080062bd
 800628c:	080062bd 	.word	0x080062bd
 8006290:	080062ab 	.word	0x080062ab
 8006294:	080062bd 	.word	0x080062bd
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062bd 	.word	0x080062bd
 80062a0:	080062b1 	.word	0x080062b1
 80062a4:	4b18      	ldr	r3, [pc, #96]	; (8006308 <LSM6DSL_AccReadXYZ+0x124>)
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	e008      	b.n	80062bc <LSM6DSL_AccReadXYZ+0xd8>
 80062aa:	4b18      	ldr	r3, [pc, #96]	; (800630c <LSM6DSL_AccReadXYZ+0x128>)
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	e005      	b.n	80062bc <LSM6DSL_AccReadXYZ+0xd8>
 80062b0:	4b17      	ldr	r3, [pc, #92]	; (8006310 <LSM6DSL_AccReadXYZ+0x12c>)
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	e002      	b.n	80062bc <LSM6DSL_AccReadXYZ+0xd8>
 80062b6:	4b17      	ldr	r3, [pc, #92]	; (8006314 <LSM6DSL_AccReadXYZ+0x130>)
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	bf00      	nop
 80062bc:	2300      	movs	r3, #0
 80062be:	77fb      	strb	r3, [r7, #31]
 80062c0:	e01b      	b.n	80062fa <LSM6DSL_AccReadXYZ+0x116>
 80062c2:	7ffb      	ldrb	r3, [r7, #31]
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	f107 0220 	add.w	r2, r7, #32
 80062ca:	4413      	add	r3, r2
 80062cc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80062dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e0:	7ffb      	ldrb	r3, [r7, #31]
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4413      	add	r3, r2
 80062e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062ec:	ee17 2a90 	vmov	r2, s15
 80062f0:	b212      	sxth	r2, r2
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	7ffb      	ldrb	r3, [r7, #31]
 80062f6:	3301      	adds	r3, #1
 80062f8:	77fb      	strb	r3, [r7, #31]
 80062fa:	7ffb      	ldrb	r3, [r7, #31]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d9e0      	bls.n	80062c2 <LSM6DSL_AccReadXYZ+0xde>
 8006300:	bf00      	nop
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	3d79db23 	.word	0x3d79db23
 800630c:	3df9db23 	.word	0x3df9db23
 8006310:	3e79db23 	.word	0x3e79db23
 8006314:	3ef9db23 	.word	0x3ef9db23

08006318 <LSM6DSL_GyroInit>:
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	80fb      	strh	r3, [r7, #6]
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
 8006326:	2111      	movs	r1, #17
 8006328:	20d4      	movs	r0, #212	; 0xd4
 800632a:	f001 f9bd 	bl	80076a8 <SENSOR_IO_Read>
 800632e:	4603      	mov	r3, r0
 8006330:	73bb      	strb	r3, [r7, #14]
 8006332:	88fb      	ldrh	r3, [r7, #6]
 8006334:	73fb      	strb	r3, [r7, #15]
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	73bb      	strb	r3, [r7, #14]
 800633e:	7bba      	ldrb	r2, [r7, #14]
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	4313      	orrs	r3, r2
 8006344:	73bb      	strb	r3, [r7, #14]
 8006346:	7bbb      	ldrb	r3, [r7, #14]
 8006348:	461a      	mov	r2, r3
 800634a:	2111      	movs	r1, #17
 800634c:	20d4      	movs	r0, #212	; 0xd4
 800634e:	f001 f991 	bl	8007674 <SENSOR_IO_Write>
 8006352:	2112      	movs	r1, #18
 8006354:	20d4      	movs	r0, #212	; 0xd4
 8006356:	f001 f9a7 	bl	80076a8 <SENSOR_IO_Read>
 800635a:	4603      	mov	r3, r0
 800635c:	73bb      	strb	r3, [r7, #14]
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	0a1b      	lsrs	r3, r3, #8
 8006362:	b29b      	uxth	r3, r3
 8006364:	73fb      	strb	r3, [r7, #15]
 8006366:	7bbb      	ldrb	r3, [r7, #14]
 8006368:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800636c:	73bb      	strb	r3, [r7, #14]
 800636e:	7bba      	ldrb	r2, [r7, #14]
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	4313      	orrs	r3, r2
 8006374:	73bb      	strb	r3, [r7, #14]
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	461a      	mov	r2, r3
 800637a:	2112      	movs	r1, #18
 800637c:	20d4      	movs	r0, #212	; 0xd4
 800637e:	f001 f979 	bl	8007674 <SENSOR_IO_Write>
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <LSM6DSL_GyroDeInit>:
 800638a:	b580      	push	{r7, lr}
 800638c:	b082      	sub	sp, #8
 800638e:	af00      	add	r7, sp, #0
 8006390:	2300      	movs	r3, #0
 8006392:	71fb      	strb	r3, [r7, #7]
 8006394:	2111      	movs	r1, #17
 8006396:	20d4      	movs	r0, #212	; 0xd4
 8006398:	f001 f986 	bl	80076a8 <SENSOR_IO_Read>
 800639c:	4603      	mov	r3, r0
 800639e:	71fb      	strb	r3, [r7, #7]
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	71fb      	strb	r3, [r7, #7]
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	461a      	mov	r2, r3
 80063ac:	2111      	movs	r1, #17
 80063ae:	20d4      	movs	r0, #212	; 0xd4
 80063b0:	f001 f960 	bl	8007674 <SENSOR_IO_Write>
 80063b4:	bf00      	nop
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <LSM6DSL_GyroReadID>:
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
 80063c0:	f001 f94e 	bl	8007660 <SENSOR_IO_Init>
 80063c4:	210f      	movs	r1, #15
 80063c6:	20d4      	movs	r0, #212	; 0xd4
 80063c8:	f001 f96e 	bl	80076a8 <SENSOR_IO_Read>
 80063cc:	4603      	mov	r3, r0
 80063ce:	4618      	mov	r0, r3
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <LSM6DSL_GyroLowPower>:
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	4603      	mov	r3, r0
 80063da:	80fb      	strh	r3, [r7, #6]
 80063dc:	2300      	movs	r3, #0
 80063de:	73fb      	strb	r3, [r7, #15]
 80063e0:	2116      	movs	r1, #22
 80063e2:	20d4      	movs	r0, #212	; 0xd4
 80063e4:	f001 f960 	bl	80076a8 <SENSOR_IO_Read>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f2:	73fb      	strb	r3, [r7, #15]
 80063f4:	88fb      	ldrh	r3, [r7, #6]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <LSM6DSL_GyroLowPower+0x30>
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006400:	73fb      	strb	r3, [r7, #15]
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	461a      	mov	r2, r3
 8006406:	2116      	movs	r1, #22
 8006408:	20d4      	movs	r0, #212	; 0xd4
 800640a:	f001 f933 	bl	8007674 <SENSOR_IO_Write>
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <LSM6DSL_GyroReadXYZAngRate>:
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	2300      	movs	r3, #0
 8006422:	75fb      	strb	r3, [r7, #23]
 8006424:	2300      	movs	r3, #0
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	f04f 0300 	mov.w	r3, #0
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	2111      	movs	r1, #17
 8006430:	20d4      	movs	r0, #212	; 0xd4
 8006432:	f001 f939 	bl	80076a8 <SENSOR_IO_Read>
 8006436:	4603      	mov	r3, r0
 8006438:	75fb      	strb	r3, [r7, #23]
 800643a:	f107 0208 	add.w	r2, r7, #8
 800643e:	2306      	movs	r3, #6
 8006440:	2122      	movs	r1, #34	; 0x22
 8006442:	20d4      	movs	r0, #212	; 0xd4
 8006444:	f001 f94e 	bl	80076e4 <SENSOR_IO_ReadMultiple>
 8006448:	2300      	movs	r3, #0
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e01f      	b.n	800648e <LSM6DSL_GyroReadXYZAngRate+0x76>
 800644e:	7ffb      	ldrb	r3, [r7, #31]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	3301      	adds	r3, #1
 8006454:	f107 0220 	add.w	r2, r7, #32
 8006458:	4413      	add	r3, r2
 800645a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800645e:	b29b      	uxth	r3, r3
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	b29a      	uxth	r2, r3
 8006464:	7ffb      	ldrb	r3, [r7, #31]
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	f107 0120 	add.w	r1, r7, #32
 800646c:	440b      	add	r3, r1
 800646e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006472:	b29b      	uxth	r3, r3
 8006474:	4413      	add	r3, r2
 8006476:	b29a      	uxth	r2, r3
 8006478:	7ffb      	ldrb	r3, [r7, #31]
 800647a:	b212      	sxth	r2, r2
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	f107 0120 	add.w	r1, r7, #32
 8006482:	440b      	add	r3, r1
 8006484:	f823 2c10 	strh.w	r2, [r3, #-16]
 8006488:	7ffb      	ldrb	r3, [r7, #31]
 800648a:	3301      	adds	r3, #1
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	7ffb      	ldrb	r3, [r7, #31]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d9dc      	bls.n	800644e <LSM6DSL_GyroReadXYZAngRate+0x36>
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	f003 030c 	and.w	r3, r3, #12
 800649a:	2b0c      	cmp	r3, #12
 800649c:	d828      	bhi.n	80064f0 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064d9 	.word	0x080064d9
 80064a8:	080064f1 	.word	0x080064f1
 80064ac:	080064f1 	.word	0x080064f1
 80064b0:	080064f1 	.word	0x080064f1
 80064b4:	080064df 	.word	0x080064df
 80064b8:	080064f1 	.word	0x080064f1
 80064bc:	080064f1 	.word	0x080064f1
 80064c0:	080064f1 	.word	0x080064f1
 80064c4:	080064e5 	.word	0x080064e5
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f1 	.word	0x080064f1
 80064d0:	080064f1 	.word	0x080064f1
 80064d4:	080064eb 	.word	0x080064eb
 80064d8:	4b16      	ldr	r3, [pc, #88]	; (8006534 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	e008      	b.n	80064f0 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 80064de:	4b16      	ldr	r3, [pc, #88]	; (8006538 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e005      	b.n	80064f0 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 80064e4:	4b15      	ldr	r3, [pc, #84]	; (800653c <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e002      	b.n	80064f0 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 80064ea:	4b15      	ldr	r3, [pc, #84]	; (8006540 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	bf00      	nop
 80064f0:	2300      	movs	r3, #0
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e017      	b.n	8006526 <LSM6DSL_GyroReadXYZAngRate+0x10e>
 80064f6:	7ffb      	ldrb	r3, [r7, #31]
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	f107 0220 	add.w	r2, r7, #32
 80064fe:	4413      	add	r3, r2
 8006500:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8006504:	ee07 3a90 	vmov	s15, r3
 8006508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800650c:	7ffb      	ldrb	r3, [r7, #31]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	edd7 7a06 	vldr	s15, [r7, #24]
 8006518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651c:	edc3 7a00 	vstr	s15, [r3]
 8006520:	7ffb      	ldrb	r3, [r7, #31]
 8006522:	3301      	adds	r3, #1
 8006524:	77fb      	strb	r3, [r7, #31]
 8006526:	7ffb      	ldrb	r3, [r7, #31]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d9e4      	bls.n	80064f6 <LSM6DSL_GyroReadXYZAngRate+0xde>
 800652c:	bf00      	nop
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	410c0000 	.word	0x410c0000
 8006538:	418c0000 	.word	0x418c0000
 800653c:	420c0000 	.word	0x420c0000
 8006540:	428c0000 	.word	0x428c0000

08006544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 800654a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800654c:	f7fa fc06 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006550:	f000 faf6 	bl	8006b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006554:	f000 fcf0 	bl	8006f38 <MX_GPIO_Init>
  MX_DMA_Init();
 8006558:	f000 fcd0 	bl	8006efc <MX_DMA_Init>
  MX_I2C1_Init();
 800655c:	f000 fb9c 	bl	8006c98 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8006560:	f000 fc9c 	bl	8006e9c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8006564:	f000 fbfe 	bl	8006d64 <MX_TIM2_Init>
  MX_DAC1_Init();
 8006568:	f000 fb64 	bl	8006c34 <MX_DAC1_Init>
  MX_QUADSPI_Init();
 800656c:	f000 fbd4 	bl	8006d18 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8006570:	f000 fc46 	bl	8006e00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	//I2C Sensor Initialization
	BSP_ACCELERO_Init();
 8006574:	f001 f8d4 	bl	8007720 <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 8006578:	f001 fd7a 	bl	8008070 <BSP_TSENSOR_Init>
	BSP_GYRO_Init();
 800657c:	f001 f926 	bl	80077cc <BSP_GYRO_Init>
	BSP_HSENSOR_Init();
 8006580:	f001 f966 	bl	8007850 <BSP_HSENSOR_Init>

	// Start the timer

	BSP_QSPI_Init();
 8006584:	f001 f984 	bl	8007890 <BSP_QSPI_Init>
	uint32_t note_c7[21];
	uint32_t note_e7[17];
	uint32_t note_g7[14];

	// Tone C6
	for (uint8_t i=0; i<42;i++) {
 8006588:	2300      	movs	r3, #0
 800658a:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
 800658e:	e031      	b.n	80065f4 <main+0xb0>
		note_c6[i] = ((arm_sin_f32(i*2*PI/42) + 1)*((0xFF + 1)/2)) / 2;
 8006590:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800659e:	ed9f 7ae0 	vldr	s14, [pc, #896]	; 8006920 <main+0x3dc>
 80065a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065a6:	ed9f 7adf 	vldr	s14, [pc, #892]	; 8006924 <main+0x3e0>
 80065aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065ae:	eeb0 0a66 	vmov.f32	s0, s13
 80065b2:	f002 f829 	bl	8008608 <arm_sin_f32>
 80065b6:	eeb0 7a40 	vmov.f32	s14, s0
 80065ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80065be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065c2:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 8006928 <main+0x3e4>
 80065c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80065ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80065ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065d2:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 80065d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065da:	ee17 2a90 	vmov	r2, s15
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80065e4:	440b      	add	r3, r1
 80065e6:	f843 2ce0 	str.w	r2, [r3, #-224]
	for (uint8_t i=0; i<42;i++) {
 80065ea:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 80065ee:	3301      	adds	r3, #1
 80065f0:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
 80065f4:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 80065f8:	2b29      	cmp	r3, #41	; 0x29
 80065fa:	d9c9      	bls.n	8006590 <main+0x4c>
	}

	// Tone E6
	for (uint8_t i=0; i<33;i++) {
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
 8006602:	e02f      	b.n	8006664 <main+0x120>
		note_e6[i] = ((arm_sin_f32(i*2*PI/33) + 1)*((0xFF + 1)/2)) / 2;
 8006604:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006612:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8006920 <main+0x3dc>
 8006616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800661a:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 800692c <main+0x3e8>
 800661e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006622:	eeb0 0a66 	vmov.f32	s0, s13
 8006626:	f001 ffef 	bl	8008608 <arm_sin_f32>
 800662a:	eeb0 7a40 	vmov.f32	s14, s0
 800662e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006636:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8006928 <main+0x3e4>
 800663a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800663e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006646:	f897 22a6 	ldrb.w	r2, [r7, #678]	; 0x2a6
 800664a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800664e:	ee17 1a90 	vmov	r1, s15
 8006652:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8006656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i=0; i<33;i++) {
 800665a:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 800665e:	3301      	adds	r3, #1
 8006660:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
 8006664:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 8006668:	2b20      	cmp	r3, #32
 800666a:	d9cb      	bls.n	8006604 <main+0xc0>
	}

	// Tone G6
	for (uint8_t i=0; i<28;i++) {
 800666c:	2300      	movs	r3, #0
 800666e:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
 8006672:	e02f      	b.n	80066d4 <main+0x190>
		note_g6[i] = ((arm_sin_f32(i*2*PI/28) + 1)*((0xFF + 1)/2)) / 2;
 8006674:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006682:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8006920 <main+0x3dc>
 8006686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800668a:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 800668e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006692:	eeb0 0a66 	vmov.f32	s0, s13
 8006696:	f001 ffb7 	bl	8008608 <arm_sin_f32>
 800669a:	eeb0 7a40 	vmov.f32	s14, s0
 800669e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80066a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066a6:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8006928 <main+0x3e4>
 80066aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066b6:	f897 22a5 	ldrb.w	r2, [r7, #677]	; 0x2a5
 80066ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066be:	ee17 1a90 	vmov	r1, s15
 80066c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80066c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i=0; i<28;i++) {
 80066ca:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 80066ce:	3301      	adds	r3, #1
 80066d0:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
 80066d4:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 80066d8:	2b1b      	cmp	r3, #27
 80066da:	d9cb      	bls.n	8006674 <main+0x130>
	}

	// Tone C7
	for (uint8_t i=0; i<21;i++) {
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
 80066e2:	e02f      	b.n	8006744 <main+0x200>
		note_c7[i] = ((arm_sin_f32(i*2*PI/21) + 1)*((0xFF + 1)/2)) / 2;
 80066e4:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066f2:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8006920 <main+0x3dc>
 80066f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066fa:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 80066fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006702:	eeb0 0a66 	vmov.f32	s0, s13
 8006706:	f001 ff7f 	bl	8008608 <arm_sin_f32>
 800670a:	eeb0 7a40 	vmov.f32	s14, s0
 800670e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006716:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006928 <main+0x3e4>
 800671a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800671e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006726:	f897 22a4 	ldrb.w	r2, [r7, #676]	; 0x2a4
 800672a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800672e:	ee17 1a90 	vmov	r1, s15
 8006732:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i=0; i<21;i++) {
 800673a:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 800673e:	3301      	adds	r3, #1
 8006740:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
 8006744:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 8006748:	2b14      	cmp	r3, #20
 800674a:	d9cb      	bls.n	80066e4 <main+0x1a0>
	}

	// Tone E7
	for (uint8_t i=0; i<17;i++) {
 800674c:	2300      	movs	r3, #0
 800674e:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
 8006752:	e02f      	b.n	80067b4 <main+0x270>
		note_e7[i] = ((arm_sin_f32(i*2*PI/17) + 1)*((0xFF + 1)/2)) / 2;
 8006754:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006762:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8006920 <main+0x3dc>
 8006766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800676a:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 800676e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006772:	eeb0 0a66 	vmov.f32	s0, s13
 8006776:	f001 ff47 	bl	8008608 <arm_sin_f32>
 800677a:	eeb0 7a40 	vmov.f32	s14, s0
 800677e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006786:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8006928 <main+0x3e4>
 800678a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800678e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006796:	f897 22a3 	ldrb.w	r2, [r7, #675]	; 0x2a3
 800679a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800679e:	ee17 1a90 	vmov	r1, s15
 80067a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i=0; i<17;i++) {
 80067aa:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 80067ae:	3301      	adds	r3, #1
 80067b0:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
 80067b4:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d9cb      	bls.n	8006754 <main+0x210>
	}

	// Tone G7
	for (uint8_t i=0; i<14;i++) {
 80067bc:	2300      	movs	r3, #0
 80067be:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
 80067c2:	e02e      	b.n	8006822 <main+0x2de>
		note_g7[i] = ((arm_sin_f32(i*2*PI/14) + 1)*((0xFF + 1)/2)) / 2;
 80067c4:	f897 32a2 	ldrb.w	r3, [r7, #674]	; 0x2a2
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8006920 <main+0x3dc>
 80067d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067da:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80067de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067e2:	eeb0 0a66 	vmov.f32	s0, s13
 80067e6:	f001 ff0f 	bl	8008608 <arm_sin_f32>
 80067ea:	eeb0 7a40 	vmov.f32	s14, s0
 80067ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80067f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067f6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8006928 <main+0x3e4>
 80067fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80067fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006806:	f897 22a2 	ldrb.w	r2, [r7, #674]	; 0x2a2
 800680a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800680e:	ee17 1a90 	vmov	r1, s15
 8006812:	1d3b      	adds	r3, r7, #4
 8006814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i=0; i<14;i++) {
 8006818:	f897 32a2 	ldrb.w	r3, [r7, #674]	; 0x2a2
 800681c:	3301      	adds	r3, #1
 800681e:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
 8006822:	f897 32a2 	ldrb.w	r3, [r7, #674]	; 0x2a2
 8006826:	2b0d      	cmp	r3, #13
 8006828:	d9cc      	bls.n	80067c4 <main+0x280>


	/*
	 * Prepare the Flash - note: probably need quite a few blocks
	 */
	BSP_QSPI_Erase_Block(0);
 800682a:	2000      	movs	r0, #0
 800682c:	f001 f960 	bl	8007af0 <BSP_QSPI_Erase_Block>
	BSP_QSPI_Erase_Block(64000);
 8006830:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
 8006834:	f001 f95c 	bl	8007af0 <BSP_QSPI_Erase_Block>
	BSP_QSPI_Erase_Block(128000);
 8006838:	f44f 30fa 	mov.w	r0, #128000	; 0x1f400
 800683c:	f001 f958 	bl	8007af0 <BSP_QSPI_Erase_Block>
	/*
	 * Write the notes into flash
	 */

	// C6
	for(int i=0; i<526; i++){
 8006840:	2300      	movs	r3, #0
 8006842:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8006846:	e024      	b.n	8006892 <main+0x34e>
		for(int j=0; j<42; j++){
 8006848:	2300      	movs	r3, #0
 800684a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800684e:	e017      	b.n	8006880 <main+0x33c>
			soundBuffer[42*i+j] = note_c6[j] % 256;
 8006850:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 800685a:	4413      	add	r3, r2
 800685c:	f853 1ce0 	ldr.w	r1, [r3, #-224]
 8006860:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8006864:	222a      	movs	r2, #42	; 0x2a
 8006866:	fb02 f203 	mul.w	r2, r2, r3
 800686a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800686e:	4413      	add	r3, r2
 8006870:	b2c9      	uxtb	r1, r1
 8006872:	4a2f      	ldr	r2, [pc, #188]	; (8006930 <main+0x3ec>)
 8006874:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<42; j++){
 8006876:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800687a:	3301      	adds	r3, #1
 800687c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006880:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006884:	2b29      	cmp	r3, #41	; 0x29
 8006886:	dde3      	ble.n	8006850 <main+0x30c>
	for(int i=0; i<526; i++){
 8006888:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800688c:	3301      	adds	r3, #1
 800688e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8006892:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8006896:	f240 220d 	movw	r2, #525	; 0x20d
 800689a:	4293      	cmp	r3, r2
 800689c:	ddd4      	ble.n	8006848 <main+0x304>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 11025*0, 22050);
 800689e:	f245 6222 	movw	r2, #22050	; 0x5622
 80068a2:	2100      	movs	r1, #0
 80068a4:	4822      	ldr	r0, [pc, #136]	; (8006930 <main+0x3ec>)
 80068a6:	f001 f8a5 	bl	80079f4 <BSP_QSPI_Write>


	// E6
	for(int i=0; i<668; i++){
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80068b0:	e022      	b.n	80068f8 <main+0x3b4>
		for(int j=0; j<33; j++){
 80068b2:	2300      	movs	r3, #0
 80068b4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80068b8:	e015      	b.n	80068e6 <main+0x3a2>
			soundBuffer[i*33+j] = note_e6[j] % 256;
 80068ba:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80068be:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80068c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068c6:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80068ca:	4613      	mov	r3, r2
 80068cc:	015b      	lsls	r3, r3, #5
 80068ce:	441a      	add	r2, r3
 80068d0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80068d4:	4413      	add	r3, r2
 80068d6:	b2c9      	uxtb	r1, r1
 80068d8:	4a15      	ldr	r2, [pc, #84]	; (8006930 <main+0x3ec>)
 80068da:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<33; j++){
 80068dc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80068e0:	3301      	adds	r3, #1
 80068e2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80068e6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	dde5      	ble.n	80068ba <main+0x376>
	for(int i=0; i<668; i++){
 80068ee:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80068f2:	3301      	adds	r3, #1
 80068f4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80068f8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80068fc:	f5b3 7f27 	cmp.w	r3, #668	; 0x29c
 8006900:	dbd7      	blt.n	80068b2 <main+0x36e>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 22050*1, 22050);
 8006902:	f245 6222 	movw	r2, #22050	; 0x5622
 8006906:	f245 6122 	movw	r1, #22050	; 0x5622
 800690a:	4809      	ldr	r0, [pc, #36]	; (8006930 <main+0x3ec>)
 800690c:	f001 f872 	bl	80079f4 <BSP_QSPI_Write>

	// G6
	for(int i=0; i<786; i++){
 8006910:	2300      	movs	r3, #0
 8006912:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006916:	e02e      	b.n	8006976 <main+0x432>
		for(int j=0; j<28; j++){
 8006918:	2300      	movs	r3, #0
 800691a:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 800691e:	e021      	b.n	8006964 <main+0x420>
 8006920:	40490fdb 	.word	0x40490fdb
 8006924:	42280000 	.word	0x42280000
 8006928:	43000000 	.word	0x43000000
 800692c:	42040000 	.word	0x42040000
 8006930:	2000031c 	.word	0x2000031c
			soundBuffer[i*28+j] = note_g6[j] % 256;
 8006934:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006938:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800693c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006940:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8006944:	4613      	mov	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	461a      	mov	r2, r3
 800694e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8006952:	4413      	add	r3, r2
 8006954:	b2c9      	uxtb	r1, r1
 8006956:	4a6f      	ldr	r2, [pc, #444]	; (8006b14 <main+0x5d0>)
 8006958:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<28; j++){
 800695a:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800695e:	3301      	adds	r3, #1
 8006960:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8006964:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8006968:	2b1b      	cmp	r3, #27
 800696a:	dde3      	ble.n	8006934 <main+0x3f0>
	for(int i=0; i<786; i++){
 800696c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006970:	3301      	adds	r3, #1
 8006972:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8006976:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800697a:	f240 3211 	movw	r2, #785	; 0x311
 800697e:	4293      	cmp	r3, r2
 8006980:	ddca      	ble.n	8006918 <main+0x3d4>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 22050*2, 22050);
 8006982:	f245 6222 	movw	r2, #22050	; 0x5622
 8006986:	f64a 4144 	movw	r1, #44100	; 0xac44
 800698a:	4862      	ldr	r0, [pc, #392]	; (8006b14 <main+0x5d0>)
 800698c:	f001 f832 	bl	80079f4 <BSP_QSPI_Write>



	// C7
	for(int i=0; i<1050; i++){
 8006990:	2300      	movs	r3, #0
 8006992:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8006996:	e024      	b.n	80069e2 <main+0x49e>
		for(int j=0; j<21; j++){
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 800699e:	e017      	b.n	80069d0 <main+0x48c>
			soundBuffer[i*21+j] = note_c7[j] % 256;
 80069a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80069a4:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 80069a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069ac:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 80069b0:	4613      	mov	r3, r2
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	4413      	add	r3, r2
 80069b6:	00da      	lsls	r2, r3, #3
 80069b8:	1ad2      	subs	r2, r2, r3
 80069ba:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80069be:	4413      	add	r3, r2
 80069c0:	b2c9      	uxtb	r1, r1
 80069c2:	4a54      	ldr	r2, [pc, #336]	; (8006b14 <main+0x5d0>)
 80069c4:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<21; j++){
 80069c6:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80069ca:	3301      	adds	r3, #1
 80069cc:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80069d0:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80069d4:	2b14      	cmp	r3, #20
 80069d6:	dde3      	ble.n	80069a0 <main+0x45c>
	for(int i=0; i<1050; i++){
 80069d8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80069dc:	3301      	adds	r3, #1
 80069de:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80069e2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80069e6:	f240 4219 	movw	r2, #1049	; 0x419
 80069ea:	4293      	cmp	r3, r2
 80069ec:	ddd4      	ble.n	8006998 <main+0x454>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 22050*3, 22050);
 80069ee:	f245 6222 	movw	r2, #22050	; 0x5622
 80069f2:	4949      	ldr	r1, [pc, #292]	; (8006b18 <main+0x5d4>)
 80069f4:	4847      	ldr	r0, [pc, #284]	; (8006b14 <main+0x5d0>)
 80069f6:	f000 fffd 	bl	80079f4 <BSP_QSPI_Write>


	// E7
	for(int i=0; i<1296; i++){
 80069fa:	2300      	movs	r3, #0
 80069fc:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8006a00:	e022      	b.n	8006a48 <main+0x504>
		for(int j=0; j<17; j++){
 8006a02:	2300      	movs	r3, #0
 8006a04:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8006a08:	e015      	b.n	8006a36 <main+0x4f2>
			soundBuffer[i*17+j] = note_e7[j] % 256;
 8006a0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a0e:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8006a12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a16:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	441a      	add	r2, r3
 8006a20:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8006a24:	4413      	add	r3, r2
 8006a26:	b2c9      	uxtb	r1, r1
 8006a28:	4a3a      	ldr	r2, [pc, #232]	; (8006b14 <main+0x5d0>)
 8006a2a:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<17; j++){
 8006a2c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8006a30:	3301      	adds	r3, #1
 8006a32:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8006a36:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8006a3a:	2b10      	cmp	r3, #16
 8006a3c:	dde5      	ble.n	8006a0a <main+0x4c6>
	for(int i=0; i<1296; i++){
 8006a3e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8006a42:	3301      	adds	r3, #1
 8006a44:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8006a48:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8006a4c:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8006a50:	dbd7      	blt.n	8006a02 <main+0x4be>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 22050*4, 22050);
 8006a52:	f245 6222 	movw	r2, #22050	; 0x5622
 8006a56:	4931      	ldr	r1, [pc, #196]	; (8006b1c <main+0x5d8>)
 8006a58:	482e      	ldr	r0, [pc, #184]	; (8006b14 <main+0x5d0>)
 8006a5a:	f000 ffcb 	bl	80079f4 <BSP_QSPI_Write>


	// G7
	for(int i=0; i<1574; i++){
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8006a64:	e023      	b.n	8006aae <main+0x56a>
		for(int j=0; j<14; j++){
 8006a66:	2300      	movs	r3, #0
 8006a68:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8006a6c:	e016      	b.n	8006a9c <main+0x558>
			soundBuffer[i*14+j] = note_g7[j] % 256;
 8006a6e:	1d3b      	adds	r3, r7, #4
 8006a70:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8006a74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a78:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	1a9b      	subs	r3, r3, r2
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	461a      	mov	r2, r3
 8006a86:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8006a8a:	4413      	add	r3, r2
 8006a8c:	b2c9      	uxtb	r1, r1
 8006a8e:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <main+0x5d0>)
 8006a90:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<14; j++){
 8006a92:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8006a96:	3301      	adds	r3, #1
 8006a98:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8006a9c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8006aa0:	2b0d      	cmp	r3, #13
 8006aa2:	dde4      	ble.n	8006a6e <main+0x52a>
	for(int i=0; i<1574; i++){
 8006aa4:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8006aae:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8006ab2:	f240 6225 	movw	r2, #1573	; 0x625
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	ddd5      	ble.n	8006a66 <main+0x522>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 22050*5, 22050);
 8006aba:	f245 6222 	movw	r2, #22050	; 0x5622
 8006abe:	4918      	ldr	r1, [pc, #96]	; (8006b20 <main+0x5dc>)
 8006ac0:	4814      	ldr	r0, [pc, #80]	; (8006b14 <main+0x5d0>)
 8006ac2:	f000 ff97 	bl	80079f4 <BSP_QSPI_Write>



	// Prepare to play the first two notes
	BSP_QSPI_Read((uint8_t *)&soundBufferDac[0], 0, 22050);
 8006ac6:	f245 6222 	movw	r2, #22050	; 0x5622
 8006aca:	2100      	movs	r1, #0
 8006acc:	4815      	ldr	r0, [pc, #84]	; (8006b24 <main+0x5e0>)
 8006ace:	f000 ff4b 	bl	8007968 <BSP_QSPI_Read>
	BSP_QSPI_Read((uint8_t *)&soundBufferDac[22050], 22050, 22050);
 8006ad2:	f245 6222 	movw	r2, #22050	; 0x5622
 8006ad6:	f245 6122 	movw	r1, #22050	; 0x5622
 8006ada:	4813      	ldr	r0, [pc, #76]	; (8006b28 <main+0x5e4>)
 8006adc:	f000 ff44 	bl	8007968 <BSP_QSPI_Read>

	sprintf(accelerometerStr, "Ready! \n");
 8006ae0:	4a12      	ldr	r2, [pc, #72]	; (8006b2c <main+0x5e8>)
 8006ae2:	4b13      	ldr	r3, [pc, #76]	; (8006b30 <main+0x5ec>)
 8006ae4:	cb03      	ldmia	r3!, {r0, r1}
 8006ae6:	6010      	str	r0, [r2, #0]
 8006ae8:	6051      	str	r1, [r2, #4]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	7213      	strb	r3, [r2, #8]
	HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8006aee:	2364      	movs	r3, #100	; 0x64
 8006af0:	221e      	movs	r2, #30
 8006af2:	490e      	ldr	r1, [pc, #56]	; (8006b2c <main+0x5e8>)
 8006af4:	480f      	ldr	r0, [pc, #60]	; (8006b34 <main+0x5f0>)
 8006af6:	f7fe fce3 	bl	80054c0 <HAL_UART_Transmit>

	// Beep twice to indicate it's ready
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)soundBufferDac, 11025, DAC_ALIGN_8B_R);
 8006afa:	2308      	movs	r3, #8
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	f642 3311 	movw	r3, #11025	; 0x2b11
 8006b02:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <main+0x5e0>)
 8006b04:	2100      	movs	r1, #0
 8006b06:	480c      	ldr	r0, [pc, #48]	; (8006b38 <main+0x5f4>)
 8006b08:	f7fa faf2 	bl	80010f0 <HAL_DAC_Start_DMA>

	// Start the measurement
	HAL_TIM_Base_Start_IT(&htim2);
 8006b0c:	480b      	ldr	r0, [pc, #44]	; (8006b3c <main+0x5f8>)
 8006b0e:	f7fe f83f 	bl	8004b90 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8006b12:	e7fe      	b.n	8006b12 <main+0x5ce>
 8006b14:	2000031c 	.word	0x2000031c
 8006b18:	00010266 	.word	0x00010266
 8006b1c:	00015888 	.word	0x00015888
 8006b20:	0001aeaa 	.word	0x0001aeaa
 8006b24:	20005bc4 	.word	0x20005bc4
 8006b28:	2000b1e6 	.word	0x2000b1e6
 8006b2c:	20005a84 	.word	0x20005a84
 8006b30:	08008f1c 	.word	0x08008f1c
 8006b34:	20005aa4 	.word	0x20005aa4
 8006b38:	20000308 	.word	0x20000308
 8006b3c:	20005b4c 	.word	0x20005b4c

08006b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b0b8      	sub	sp, #224	; 0xe0
 8006b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006b4a:	2244      	movs	r2, #68	; 0x44
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 fdca 	bl	80086e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b54:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	605a      	str	r2, [r3, #4]
 8006b5e:	609a      	str	r2, [r3, #8]
 8006b60:	60da      	str	r2, [r3, #12]
 8006b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006b64:	463b      	mov	r3, r7
 8006b66:	2288      	movs	r2, #136	; 0x88
 8006b68:	2100      	movs	r1, #0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f001 fdbc 	bl	80086e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006b70:	2310      	movs	r3, #16
 8006b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006b82:	2360      	movs	r3, #96	; 0x60
 8006b84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006b9a:	2328      	movs	r3, #40	; 0x28
 8006b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006ba0:	2307      	movs	r3, #7
 8006ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006bac:	2302      	movs	r3, #2
 8006bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fc fcf8 	bl	80035ac <HAL_RCC_OscConfig>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8006bc2:	f000 fc55 	bl	8007470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006bc6:	230f      	movs	r3, #15
 8006bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006bde:	2300      	movs	r3, #0
 8006be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006be4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006be8:	2104      	movs	r1, #4
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fd f8c4 	bl	8003d78 <HAL_RCC_ClockConfig>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <SystemClock_Config+0xba>
  {
    Error_Handler();
 8006bf6:	f000 fc3b 	bl	8007470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8006bfa:	2341      	movs	r3, #65	; 0x41
 8006bfc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006c02:	2300      	movs	r3, #0
 8006c04:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c06:	463b      	mov	r3, r7
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fd fab9 	bl	8004180 <HAL_RCCEx_PeriphCLKConfig>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8006c14:	f000 fc2c 	bl	8007470 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006c18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006c1c:	f7fb ff90 	bl	8002b40 <HAL_PWREx_ControlVoltageScaling>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8006c26:	f000 fc23 	bl	8007470 <Error_Handler>
  }
}
 8006c2a:	bf00      	nop
 8006c2c:	37e0      	adds	r7, #224	; 0xe0
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006c3a:	1d3b      	adds	r3, r7, #4
 8006c3c:	2224      	movs	r2, #36	; 0x24
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 fd51 	bl	80086e8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8006c46:	4b12      	ldr	r3, [pc, #72]	; (8006c90 <MX_DAC1_Init+0x5c>)
 8006c48:	4a12      	ldr	r2, [pc, #72]	; (8006c94 <MX_DAC1_Init+0x60>)
 8006c4a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006c4c:	4810      	ldr	r0, [pc, #64]	; (8006c90 <MX_DAC1_Init+0x5c>)
 8006c4e:	f7fa fa2c 	bl	80010aa <HAL_DAC_Init>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006c58:	f000 fc0a 	bl	8007470 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8006c60:	2324      	movs	r3, #36	; 0x24
 8006c62:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006c70:	1d3b      	adds	r3, r7, #4
 8006c72:	2200      	movs	r2, #0
 8006c74:	4619      	mov	r1, r3
 8006c76:	4806      	ldr	r0, [pc, #24]	; (8006c90 <MX_DAC1_Init+0x5c>)
 8006c78:	f7fa fb0c 	bl	8001294 <HAL_DAC_ConfigChannel>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8006c82:	f000 fbf5 	bl	8007470 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8006c86:	bf00      	nop
 8006c88:	3728      	adds	r7, #40	; 0x28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000308 	.word	0x20000308
 8006c94:	40007400 	.word	0x40007400

08006c98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006c9c:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006c9e:	4a1c      	ldr	r2, [pc, #112]	; (8006d10 <MX_I2C1_Init+0x78>)
 8006ca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8006ca2:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	; (8006d14 <MX_I2C1_Init+0x7c>)
 8006ca6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006ca8:	4b18      	ldr	r3, [pc, #96]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006cae:	4b17      	ldr	r3, [pc, #92]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006cb4:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006cc0:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006cc6:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ccc:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006cd2:	480e      	ldr	r0, [pc, #56]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006cd4:	f7fb f986 	bl	8001fe4 <HAL_I2C_Init>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006cde:	f000 fbc7 	bl	8007470 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4809      	ldr	r0, [pc, #36]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006ce6:	f7fb fe85 	bl	80029f4 <HAL_I2CEx_ConfigAnalogFilter>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006cf0:	f000 fbbe 	bl	8007470 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4805      	ldr	r0, [pc, #20]	; (8006d0c <MX_I2C1_Init+0x74>)
 8006cf8:	f7fb fec7 	bl	8002a8a <HAL_I2CEx_ConfigDigitalFilter>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006d02:	f000 fbb5 	bl	8007470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006d06:	bf00      	nop
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20005940 	.word	0x20005940
 8006d10:	40005400 	.word	0x40005400
 8006d14:	10909cec 	.word	0x10909cec

08006d18 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8006d1c:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <MX_QUADSPI_Init+0x44>)
 8006d1e:	4a10      	ldr	r2, [pc, #64]	; (8006d60 <MX_QUADSPI_Init+0x48>)
 8006d20:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8006d22:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <MX_QUADSPI_Init+0x44>)
 8006d24:	22ff      	movs	r2, #255	; 0xff
 8006d26:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <MX_QUADSPI_Init+0x44>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <MX_QUADSPI_Init+0x44>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8006d34:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <MX_QUADSPI_Init+0x44>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <MX_QUADSPI_Init+0x44>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <MX_QUADSPI_Init+0x44>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006d46:	4805      	ldr	r0, [pc, #20]	; (8006d5c <MX_QUADSPI_Init+0x44>)
 8006d48:	f7fb ff50 	bl	8002bec <HAL_QSPI_Init>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8006d52:	f000 fb8d 	bl	8007470 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8006d56:	bf00      	nop
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	2001081c 	.word	0x2001081c
 8006d60:	a0001000 	.word	0xa0001000

08006d64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d6a:	f107 0310 	add.w	r3, r7, #16
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	605a      	str	r2, [r3, #4]
 8006d74:	609a      	str	r2, [r3, #8]
 8006d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d78:	1d3b      	adds	r3, r7, #4
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	605a      	str	r2, [r3, #4]
 8006d80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006d82:	4b1e      	ldr	r3, [pc, #120]	; (8006dfc <MX_TIM2_Init+0x98>)
 8006d84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006d8a:	4b1c      	ldr	r3, [pc, #112]	; (8006dfc <MX_TIM2_Init+0x98>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d90:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <MX_TIM2_Init+0x98>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8006d96:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <MX_TIM2_Init+0x98>)
 8006d98:	f240 7216 	movw	r2, #1814	; 0x716
 8006d9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d9e:	4b17      	ldr	r3, [pc, #92]	; (8006dfc <MX_TIM2_Init+0x98>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <MX_TIM2_Init+0x98>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006daa:	4814      	ldr	r0, [pc, #80]	; (8006dfc <MX_TIM2_Init+0x98>)
 8006dac:	f7fd fe98 	bl	8004ae0 <HAL_TIM_Base_Init>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006db6:	f000 fb5b 	bl	8007470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006dc0:	f107 0310 	add.w	r3, r7, #16
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	480d      	ldr	r0, [pc, #52]	; (8006dfc <MX_TIM2_Init+0x98>)
 8006dc8:	f7fe f871 	bl	8004eae <HAL_TIM_ConfigClockSource>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006dd2:	f000 fb4d 	bl	8007470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006dd6:	2320      	movs	r3, #32
 8006dd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	4806      	ldr	r0, [pc, #24]	; (8006dfc <MX_TIM2_Init+0x98>)
 8006de4:	f7fe fa78 	bl	80052d8 <HAL_TIMEx_MasterConfigSynchronization>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006dee:	f000 fb3f 	bl	8007470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006df2:	bf00      	nop
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20005b4c 	.word	0x20005b4c

08006e00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e06:	f107 0310 	add.w	r3, r7, #16
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	605a      	str	r2, [r3, #4]
 8006e10:	609a      	str	r2, [r3, #8]
 8006e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e14:	1d3b      	adds	r3, r7, #4
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	605a      	str	r2, [r3, #4]
 8006e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006e1e:	4b1d      	ldr	r3, [pc, #116]	; (8006e94 <MX_TIM3_Init+0x94>)
 8006e20:	4a1d      	ldr	r2, [pc, #116]	; (8006e98 <MX_TIM3_Init+0x98>)
 8006e22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006e24:	4b1b      	ldr	r3, [pc, #108]	; (8006e94 <MX_TIM3_Init+0x94>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e2a:	4b1a      	ldr	r3, [pc, #104]	; (8006e94 <MX_TIM3_Init+0x94>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7256;
 8006e30:	4b18      	ldr	r3, [pc, #96]	; (8006e94 <MX_TIM3_Init+0x94>)
 8006e32:	f641 4258 	movw	r2, #7256	; 0x1c58
 8006e36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e38:	4b16      	ldr	r3, [pc, #88]	; (8006e94 <MX_TIM3_Init+0x94>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e3e:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <MX_TIM3_Init+0x94>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006e44:	4813      	ldr	r0, [pc, #76]	; (8006e94 <MX_TIM3_Init+0x94>)
 8006e46:	f7fd fe4b 	bl	8004ae0 <HAL_TIM_Base_Init>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8006e50:	f000 fb0e 	bl	8007470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006e5a:	f107 0310 	add.w	r3, r7, #16
 8006e5e:	4619      	mov	r1, r3
 8006e60:	480c      	ldr	r0, [pc, #48]	; (8006e94 <MX_TIM3_Init+0x94>)
 8006e62:	f7fe f824 	bl	8004eae <HAL_TIM_ConfigClockSource>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8006e6c:	f000 fb00 	bl	8007470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006e70:	2320      	movs	r3, #32
 8006e72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006e78:	1d3b      	adds	r3, r7, #4
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4805      	ldr	r0, [pc, #20]	; (8006e94 <MX_TIM3_Init+0x94>)
 8006e7e:	f7fe fa2b 	bl	80052d8 <HAL_TIMEx_MasterConfigSynchronization>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006e88:	f000 faf2 	bl	8007470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006e8c:	bf00      	nop
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	200059cc 	.word	0x200059cc
 8006e98:	40000400 	.word	0x40000400

08006e9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006ea0:	4b14      	ldr	r3, [pc, #80]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006ea2:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <MX_USART1_UART_Init+0x5c>)
 8006ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006ea6:	4b13      	ldr	r3, [pc, #76]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006ea8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006eae:	4b11      	ldr	r3, [pc, #68]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006eba:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006ec2:	220c      	movs	r2, #12
 8006ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ecc:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006ed2:	4b08      	ldr	r3, [pc, #32]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006ede:	4805      	ldr	r0, [pc, #20]	; (8006ef4 <MX_USART1_UART_Init+0x58>)
 8006ee0:	f7fe faa0 	bl	8005424 <HAL_UART_Init>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006eea:	f000 fac1 	bl	8007470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006eee:	bf00      	nop
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20005aa4 	.word	0x20005aa4
 8006ef8:	40013800 	.word	0x40013800

08006efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f02:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <MX_DMA_Init+0x38>)
 8006f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f06:	4a0b      	ldr	r2, [pc, #44]	; (8006f34 <MX_DMA_Init+0x38>)
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	6493      	str	r3, [r2, #72]	; 0x48
 8006f0e:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <MX_DMA_Init+0x38>)
 8006f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	607b      	str	r3, [r7, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	200d      	movs	r0, #13
 8006f20:	f7fa f88d 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006f24:	200d      	movs	r0, #13
 8006f26:	f7fa f8a6 	bl	8001076 <HAL_NVIC_EnableIRQ>

}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	40021000 	.word	0x40021000

08006f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f3e:	f107 030c 	add.w	r3, r7, #12
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	605a      	str	r2, [r3, #4]
 8006f48:	609a      	str	r2, [r3, #8]
 8006f4a:	60da      	str	r2, [r3, #12]
 8006f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f4e:	4b1e      	ldr	r3, [pc, #120]	; (8006fc8 <MX_GPIO_Init+0x90>)
 8006f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f52:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <MX_GPIO_Init+0x90>)
 8006f54:	f043 0301 	orr.w	r3, r3, #1
 8006f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <MX_GPIO_Init+0x90>)
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	60bb      	str	r3, [r7, #8]
 8006f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f66:	4b18      	ldr	r3, [pc, #96]	; (8006fc8 <MX_GPIO_Init+0x90>)
 8006f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6a:	4a17      	ldr	r2, [pc, #92]	; (8006fc8 <MX_GPIO_Init+0x90>)
 8006f6c:	f043 0310 	orr.w	r3, r3, #16
 8006f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f72:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <MX_GPIO_Init+0x90>)
 8006f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f76:	f003 0310 	and.w	r3, r3, #16
 8006f7a:	607b      	str	r3, [r7, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f7e:	4b12      	ldr	r3, [pc, #72]	; (8006fc8 <MX_GPIO_Init+0x90>)
 8006f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f82:	4a11      	ldr	r2, [pc, #68]	; (8006fc8 <MX_GPIO_Init+0x90>)
 8006f84:	f043 0302 	orr.w	r3, r3, #2
 8006f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f8a:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <MX_GPIO_Init+0x90>)
 8006f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8006f96:	2200      	movs	r2, #0
 8006f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f9c:	480b      	ldr	r0, [pc, #44]	; (8006fcc <MX_GPIO_Init+0x94>)
 8006f9e:	f7fa ffef 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006fa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006fa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006fb4:	f107 030c 	add.w	r3, r7, #12
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4804      	ldr	r0, [pc, #16]	; (8006fcc <MX_GPIO_Init+0x94>)
 8006fbc:	f7fa fd44 	bl	8001a48 <HAL_GPIO_Init>

}
 8006fc0:	bf00      	nop
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	48000400 	.word	0x48000400

08006fd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	readAccelerometer();
 8006fd8:	f000 f9b4 	bl	8007344 <readAccelerometer>
}
 8006fdc:	bf00      	nop
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <beepOnce>:

void beepOnce(){
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af02      	add	r7, sp, #8
	BSP_QSPI_Read((uint8_t *)&soundBufferDac[0], 0, 22050);
 8006fea:	f245 6222 	movw	r2, #22050	; 0x5622
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4807      	ldr	r0, [pc, #28]	; (8007010 <beepOnce+0x2c>)
 8006ff2:	f000 fcb9 	bl	8007968 <BSP_QSPI_Read>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)soundBufferDac, 5512, DAC_ALIGN_8B_R);
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	f241 5388 	movw	r3, #5512	; 0x1588
 8006ffe:	4a04      	ldr	r2, [pc, #16]	; (8007010 <beepOnce+0x2c>)
 8007000:	2100      	movs	r1, #0
 8007002:	4804      	ldr	r0, [pc, #16]	; (8007014 <beepOnce+0x30>)
 8007004:	f7fa f874 	bl	80010f0 <HAL_DAC_Start_DMA>
}
 8007008:	bf00      	nop
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20005bc4 	.word	0x20005bc4
 8007014:	20000308 	.word	0x20000308

08007018 <beepMany>:

void beepMany() {
 8007018:	b5b0      	push	{r4, r5, r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af02      	add	r7, sp, #8
	numToBeep = counter / target;
 800701e:	4b14      	ldr	r3, [pc, #80]	; (8007070 <beepMany+0x58>)
 8007020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007024:	461a      	mov	r2, r3
 8007026:	4b13      	ldr	r3, [pc, #76]	; (8007074 <beepMany+0x5c>)
 8007028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800702c:	fb92 f3f3 	sdiv	r3, r2, r3
 8007030:	b2da      	uxtb	r2, r3
 8007032:	4b11      	ldr	r3, [pc, #68]	; (8007078 <beepMany+0x60>)
 8007034:	701a      	strb	r2, [r3, #0]
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)soundBufferDac, 11025, DAC_ALIGN_8B_R);
 8007036:	2308      	movs	r3, #8
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	f642 3311 	movw	r3, #11025	; 0x2b11
 800703e:	4a0f      	ldr	r2, [pc, #60]	; (800707c <beepMany+0x64>)
 8007040:	2100      	movs	r1, #0
 8007042:	480f      	ldr	r0, [pc, #60]	; (8007080 <beepMany+0x68>)
 8007044:	f7fa f854 	bl	80010f0 <HAL_DAC_Start_DMA>
	sprintf(beepStr, "Congratulations!\n");
 8007048:	4a0e      	ldr	r2, [pc, #56]	; (8007084 <beepMany+0x6c>)
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <beepMany+0x70>)
 800704c:	4615      	mov	r5, r2
 800704e:	461c      	mov	r4, r3
 8007050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007052:	6028      	str	r0, [r5, #0]
 8007054:	6069      	str	r1, [r5, #4]
 8007056:	60aa      	str	r2, [r5, #8]
 8007058:	60eb      	str	r3, [r5, #12]
 800705a:	8823      	ldrh	r3, [r4, #0]
 800705c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart1, (uint8_t*)beepStr, sizeof(beepStr), 100);
 800705e:	2364      	movs	r3, #100	; 0x64
 8007060:	221e      	movs	r2, #30
 8007062:	4908      	ldr	r1, [pc, #32]	; (8007084 <beepMany+0x6c>)
 8007064:	4809      	ldr	r0, [pc, #36]	; (800708c <beepMany+0x74>)
 8007066:	f7fe fa2b 	bl	80054c0 <HAL_UART_Transmit>
}
 800706a:	bf00      	nop
 800706c:	46bd      	mov	sp, r7
 800706e:	bdb0      	pop	{r4, r5, r7, pc}
 8007070:	200002d0 	.word	0x200002d0
 8007074:	200000a0 	.word	0x200000a0
 8007078:	20000134 	.word	0x20000134
 800707c:	20005bc4 	.word	0x20005bc4
 8007080:	20000308 	.word	0x20000308
 8007084:	20005a64 	.word	0x20005a64
 8007088:	08008f28 	.word	0x08008f28
 800708c:	20005aa4 	.word	0x20005aa4

08007090 <getXYZ>:

void getXYZ() {
 8007090:	b5b0      	push	{r4, r5, r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
	int16_t count2 = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	80fb      	strh	r3, [r7, #6]
	Sample_X = 0;
 800709a:	4b95      	ldr	r3, [pc, #596]	; (80072f0 <getXYZ+0x260>)
 800709c:	2200      	movs	r2, #0
 800709e:	801a      	strh	r2, [r3, #0]
	do{
		BSP_ACCELERO_AccGetXYZ(acceleroReading);
 80070a0:	4894      	ldr	r0, [pc, #592]	; (80072f4 <getXYZ+0x264>)
 80070a2:	f000 fb7b 	bl	800779c <BSP_ACCELERO_AccGetXYZ>
		Sample_X = Sample_X + (int)acceleroReading[0];
 80070a6:	4b93      	ldr	r3, [pc, #588]	; (80072f4 <getXYZ+0x264>)
 80070a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	4b90      	ldr	r3, [pc, #576]	; (80072f0 <getXYZ+0x260>)
 80070b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	4413      	add	r3, r2
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	b21a      	sxth	r2, r3
 80070bc:	4b8c      	ldr	r3, [pc, #560]	; (80072f0 <getXYZ+0x260>)
 80070be:	801a      	strh	r2, [r3, #0]
		count2++; // average represents the acceleration of
 80070c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3301      	adds	r3, #1
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	80fb      	strh	r3, [r7, #6]
		// an instant.
	} while (count2!=0x40); // 64 sums of the acceleration sample
 80070cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d1e5      	bne.n	80070a0 <getXYZ+0x10>

	Sample_X = Sample_X >> 6; // division by 64
 80070d4:	4b86      	ldr	r3, [pc, #536]	; (80072f0 <getXYZ+0x260>)
 80070d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070da:	119b      	asrs	r3, r3, #6
 80070dc:	b21a      	sxth	r2, r3
 80070de:	4b84      	ldr	r3, [pc, #528]	; (80072f0 <getXYZ+0x260>)
 80070e0:	801a      	strh	r2, [r3, #0]
	Sample_Y = Sample_X >> 6;
 80070e2:	4b83      	ldr	r3, [pc, #524]	; (80072f0 <getXYZ+0x260>)
 80070e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070e8:	119b      	asrs	r3, r3, #6
 80070ea:	b21a      	sxth	r2, r3
 80070ec:	4b82      	ldr	r3, [pc, #520]	; (80072f8 <getXYZ+0x268>)
 80070ee:	801a      	strh	r2, [r3, #0]

	//push up counter
	Sample_Z = (int)acceleroReading[2];
 80070f0:	4b80      	ldr	r3, [pc, #512]	; (80072f4 <getXYZ+0x264>)
 80070f2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80070f6:	4b81      	ldr	r3, [pc, #516]	; (80072fc <getXYZ+0x26c>)
 80070f8:	801a      	strh	r2, [r3, #0]
	if(abs(Sample_Z-1032)>100)/*otherwise in noise range*/{
 80070fa:	4b80      	ldr	r3, [pc, #512]	; (80072fc <getXYZ+0x26c>)
 80070fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007100:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8007104:	2b00      	cmp	r3, #0
 8007106:	bfb8      	it	lt
 8007108:	425b      	neglt	r3, r3
 800710a:	2b64      	cmp	r3, #100	; 0x64
 800710c:	f340 80e7 	ble.w	80072de <getXYZ+0x24e>
		calibratedz = Sample_Z-1032;
 8007110:	4b7a      	ldr	r3, [pc, #488]	; (80072fc <getXYZ+0x26c>)
 8007112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007116:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800711a:	4a79      	ldr	r2, [pc, #484]	; (8007300 <getXYZ+0x270>)
 800711c:	6013      	str	r3, [r2, #0]
		integral_velo += calibratedz/100;
 800711e:	4b78      	ldr	r3, [pc, #480]	; (8007300 <getXYZ+0x270>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a78      	ldr	r2, [pc, #480]	; (8007304 <getXYZ+0x274>)
 8007124:	fb82 1203 	smull	r1, r2, r2, r3
 8007128:	1152      	asrs	r2, r2, #5
 800712a:	17db      	asrs	r3, r3, #31
 800712c:	1ad2      	subs	r2, r2, r3
 800712e:	4b76      	ldr	r3, [pc, #472]	; (8007308 <getXYZ+0x278>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4413      	add	r3, r2
 8007134:	4a74      	ldr	r2, [pc, #464]	; (8007308 <getXYZ+0x278>)
 8007136:	6013      	str	r3, [r2, #0]
		if(abs(integral_velo/100 - arr[counter])> 4){
 8007138:	4b73      	ldr	r3, [pc, #460]	; (8007308 <getXYZ+0x278>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a71      	ldr	r2, [pc, #452]	; (8007304 <getXYZ+0x274>)
 800713e:	fb82 1203 	smull	r1, r2, r2, r3
 8007142:	1152      	asrs	r2, r2, #5
 8007144:	17db      	asrs	r3, r3, #31
 8007146:	1ad2      	subs	r2, r2, r3
 8007148:	4b70      	ldr	r3, [pc, #448]	; (800730c <getXYZ+0x27c>)
 800714a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800714e:	4619      	mov	r1, r3
 8007150:	4b6f      	ldr	r3, [pc, #444]	; (8007310 <getXYZ+0x280>)
 8007152:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	bfb8      	it	lt
 800715c:	425b      	neglt	r3, r3
 800715e:	2b04      	cmp	r3, #4
 8007160:	f340 80bd 	ble.w	80072de <getXYZ+0x24e>
			counter++;
 8007164:	4b69      	ldr	r3, [pc, #420]	; (800730c <getXYZ+0x27c>)
 8007166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800716a:	b29b      	uxth	r3, r3
 800716c:	3301      	adds	r3, #1
 800716e:	b29b      	uxth	r3, r3
 8007170:	b21a      	sxth	r2, r3
 8007172:	4b66      	ldr	r3, [pc, #408]	; (800730c <getXYZ+0x27c>)
 8007174:	801a      	strh	r2, [r3, #0]
			sprintf(accelerometerStr, "%d th Pushup detected.\n", counter);
 8007176:	4b65      	ldr	r3, [pc, #404]	; (800730c <getXYZ+0x27c>)
 8007178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800717c:	461a      	mov	r2, r3
 800717e:	4965      	ldr	r1, [pc, #404]	; (8007314 <getXYZ+0x284>)
 8007180:	4865      	ldr	r0, [pc, #404]	; (8007318 <getXYZ+0x288>)
 8007182:	f001 fab9 	bl	80086f8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8007186:	2364      	movs	r3, #100	; 0x64
 8007188:	221e      	movs	r2, #30
 800718a:	4963      	ldr	r1, [pc, #396]	; (8007318 <getXYZ+0x288>)
 800718c:	4863      	ldr	r0, [pc, #396]	; (800731c <getXYZ+0x28c>)
 800718e:	f7fe f997 	bl	80054c0 <HAL_UART_Transmit>
			arr[counter] = integral_velo/100;
 8007192:	4b5d      	ldr	r3, [pc, #372]	; (8007308 <getXYZ+0x278>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a5d      	ldr	r2, [pc, #372]	; (800730c <getXYZ+0x27c>)
 8007198:	f9b2 2000 	ldrsh.w	r2, [r2]
 800719c:	4611      	mov	r1, r2
 800719e:	4a59      	ldr	r2, [pc, #356]	; (8007304 <getXYZ+0x274>)
 80071a0:	fb82 0203 	smull	r0, r2, r2, r3
 80071a4:	1152      	asrs	r2, r2, #5
 80071a6:	17db      	asrs	r3, r3, #31
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	4a59      	ldr	r2, [pc, #356]	; (8007310 <getXYZ+0x280>)
 80071ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			if (counter == target) {
 80071b0:	4b56      	ldr	r3, [pc, #344]	; (800730c <getXYZ+0x27c>)
 80071b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80071b6:	4b5a      	ldr	r3, [pc, #360]	; (8007320 <getXYZ+0x290>)
 80071b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d104      	bne.n	80071ca <getXYZ+0x13a>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);	// toggle LED
 80071c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80071c4:	4857      	ldr	r0, [pc, #348]	; (8007324 <getXYZ+0x294>)
 80071c6:	f7fa fef3 	bl	8001fb0 <HAL_GPIO_TogglePin>
			}
			if((counter != 0) && (counter%target) == 0){
 80071ca:	4b50      	ldr	r3, [pc, #320]	; (800730c <getXYZ+0x27c>)
 80071cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d065      	beq.n	80072a0 <getXYZ+0x210>
 80071d4:	4b4d      	ldr	r3, [pc, #308]	; (800730c <getXYZ+0x27c>)
 80071d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071da:	4a51      	ldr	r2, [pc, #324]	; (8007320 <getXYZ+0x290>)
 80071dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80071e0:	fb93 f1f2 	sdiv	r1, r3, r2
 80071e4:	fb02 f201 	mul.w	r2, r2, r1
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d158      	bne.n	80072a0 <getXYZ+0x210>
				beepMany();
 80071ee:	f7ff ff13 	bl	8007018 <beepMany>
				int8_t times = counter / target;
 80071f2:	4b46      	ldr	r3, [pc, #280]	; (800730c <getXYZ+0x27c>)
 80071f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071f8:	461a      	mov	r2, r3
 80071fa:	4b49      	ldr	r3, [pc, #292]	; (8007320 <getXYZ+0x290>)
 80071fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007200:	fb92 f3f3 	sdiv	r3, r2, r3
 8007204:	717b      	strb	r3, [r7, #5]
				sprintf(accelerometerStr, "Achieved %d x the GOAL.\n", times);
 8007206:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800720a:	461a      	mov	r2, r3
 800720c:	4946      	ldr	r1, [pc, #280]	; (8007328 <getXYZ+0x298>)
 800720e:	4842      	ldr	r0, [pc, #264]	; (8007318 <getXYZ+0x288>)
 8007210:	f001 fa72 	bl	80086f8 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8007214:	2364      	movs	r3, #100	; 0x64
 8007216:	221e      	movs	r2, #30
 8007218:	493f      	ldr	r1, [pc, #252]	; (8007318 <getXYZ+0x288>)
 800721a:	4840      	ldr	r0, [pc, #256]	; (800731c <getXYZ+0x28c>)
 800721c:	f7fe f950 	bl	80054c0 <HAL_UART_Transmit>
				sprintf(accelerometerStr, "Burned %d calories.\n", (int)(weight*armLength*10*counter / 4.184));
 8007220:	4b42      	ldr	r3, [pc, #264]	; (800732c <getXYZ+0x29c>)
 8007222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007226:	4b42      	ldr	r3, [pc, #264]	; (8007330 <getXYZ+0x2a0>)
 8007228:	e9d3 3400 	ldrd	r3, r4, [r3]
 800722c:	461a      	mov	r2, r3
 800722e:	4623      	mov	r3, r4
 8007230:	f7f9 f9da 	bl	80005e8 <__aeabi_dmul>
 8007234:	4603      	mov	r3, r0
 8007236:	460c      	mov	r4, r1
 8007238:	4618      	mov	r0, r3
 800723a:	4621      	mov	r1, r4
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	4b3c      	ldr	r3, [pc, #240]	; (8007334 <getXYZ+0x2a4>)
 8007242:	f7f9 f9d1 	bl	80005e8 <__aeabi_dmul>
 8007246:	4603      	mov	r3, r0
 8007248:	460c      	mov	r4, r1
 800724a:	4625      	mov	r5, r4
 800724c:	461c      	mov	r4, r3
 800724e:	4b2f      	ldr	r3, [pc, #188]	; (800730c <getXYZ+0x27c>)
 8007250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007254:	4618      	mov	r0, r3
 8007256:	f7f9 f95d 	bl	8000514 <__aeabi_i2d>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4620      	mov	r0, r4
 8007260:	4629      	mov	r1, r5
 8007262:	f7f9 f9c1 	bl	80005e8 <__aeabi_dmul>
 8007266:	4603      	mov	r3, r0
 8007268:	460c      	mov	r4, r1
 800726a:	4618      	mov	r0, r3
 800726c:	4621      	mov	r1, r4
 800726e:	a31e      	add	r3, pc, #120	; (adr r3, 80072e8 <getXYZ+0x258>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f7f9 fae2 	bl	800083c <__aeabi_ddiv>
 8007278:	4603      	mov	r3, r0
 800727a:	460c      	mov	r4, r1
 800727c:	4618      	mov	r0, r3
 800727e:	4621      	mov	r1, r4
 8007280:	f7f9 fbc4 	bl	8000a0c <__aeabi_d2iz>
 8007284:	4603      	mov	r3, r0
 8007286:	461a      	mov	r2, r3
 8007288:	492b      	ldr	r1, [pc, #172]	; (8007338 <getXYZ+0x2a8>)
 800728a:	4823      	ldr	r0, [pc, #140]	; (8007318 <getXYZ+0x288>)
 800728c:	f001 fa34 	bl	80086f8 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8007290:	2364      	movs	r3, #100	; 0x64
 8007292:	221e      	movs	r2, #30
 8007294:	4920      	ldr	r1, [pc, #128]	; (8007318 <getXYZ+0x288>)
 8007296:	4821      	ldr	r0, [pc, #132]	; (800731c <getXYZ+0x28c>)
 8007298:	f7fe f912 	bl	80054c0 <HAL_UART_Transmit>
			if((counter != 0) && (counter%target) == 0){
 800729c:	bf00      	nop
				}
			}

		}
	}
}
 800729e:	e01e      	b.n	80072de <getXYZ+0x24e>
				beepOnce();
 80072a0:	f7ff fea0 	bl	8006fe4 <beepOnce>
				if ((target-counter) > 0) {
 80072a4:	4b1e      	ldr	r3, [pc, #120]	; (8007320 <getXYZ+0x290>)
 80072a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072aa:	461a      	mov	r2, r3
 80072ac:	4b17      	ldr	r3, [pc, #92]	; (800730c <getXYZ+0x27c>)
 80072ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	dd12      	ble.n	80072de <getXYZ+0x24e>
					sprintf(beepStr, "%d more until your goal.\n",(int)(target-counter));
 80072b8:	4b19      	ldr	r3, [pc, #100]	; (8007320 <getXYZ+0x290>)
 80072ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072be:	461a      	mov	r2, r3
 80072c0:	4b12      	ldr	r3, [pc, #72]	; (800730c <getXYZ+0x27c>)
 80072c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	491c      	ldr	r1, [pc, #112]	; (800733c <getXYZ+0x2ac>)
 80072cc:	481c      	ldr	r0, [pc, #112]	; (8007340 <getXYZ+0x2b0>)
 80072ce:	f001 fa13 	bl	80086f8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)beepStr, sizeof(beepStr), 100);
 80072d2:	2364      	movs	r3, #100	; 0x64
 80072d4:	221e      	movs	r2, #30
 80072d6:	491a      	ldr	r1, [pc, #104]	; (8007340 <getXYZ+0x2b0>)
 80072d8:	4810      	ldr	r0, [pc, #64]	; (800731c <getXYZ+0x28c>)
 80072da:	f7fe f8f1 	bl	80054c0 <HAL_UART_Transmit>
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bdb0      	pop	{r4, r5, r7, pc}
 80072e6:	bf00      	nop
 80072e8:	7ef9db23 	.word	0x7ef9db23
 80072ec:	4010bc6a 	.word	0x4010bc6a
 80072f0:	20005bc0 	.word	0x20005bc0
 80072f4:	20000128 	.word	0x20000128
 80072f8:	20005b24 	.word	0x20005b24
 80072fc:	2000598c 	.word	0x2000598c
 8007300:	200002cc 	.word	0x200002cc
 8007304:	51eb851f 	.word	0x51eb851f
 8007308:	20000138 	.word	0x20000138
 800730c:	200002d0 	.word	0x200002d0
 8007310:	2000013c 	.word	0x2000013c
 8007314:	08008f3c 	.word	0x08008f3c
 8007318:	20005a84 	.word	0x20005a84
 800731c:	20005aa4 	.word	0x20005aa4
 8007320:	200000a0 	.word	0x200000a0
 8007324:	48000400 	.word	0x48000400
 8007328:	08008f54 	.word	0x08008f54
 800732c:	20000090 	.word	0x20000090
 8007330:	20000098 	.word	0x20000098
 8007334:	40240000 	.word	0x40240000
 8007338:	08008f70 	.word	0x08008f70
 800733c:	08008f88 	.word	0x08008f88
 8007340:	20005a64 	.word	0x20005a64

08007344 <readAccelerometer>:

	sprintf(accelerometerStr, "Calibration completed. \n");
	HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
}

void readAccelerometer() {
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0

	// get one
	getXYZ();
 8007348:	f7ff fea2 	bl	8007090 <getXYZ>
	accelerationx[0] = Sample_X - sstatex;
 800734c:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <readAccelerometer+0x44>)
 800734e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007352:	b29a      	uxth	r2, r3
 8007354:	4b0d      	ldr	r3, [pc, #52]	; (800738c <readAccelerometer+0x48>)
 8007356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800735a:	b29b      	uxth	r3, r3
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	b29b      	uxth	r3, r3
 8007360:	b21a      	sxth	r2, r3
 8007362:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <readAccelerometer+0x4c>)
 8007364:	801a      	strh	r2, [r3, #0]
	//velocityx[0] = velocityx[1] + accelerationx[1] + ((accelerationx[0] - accelerationx[1])>>1) ;

	// get one
	getXYZ();
 8007366:	f7ff fe93 	bl	8007090 <getXYZ>
	accelerationx[1] = Sample_X - sstatex;
 800736a:	4b07      	ldr	r3, [pc, #28]	; (8007388 <readAccelerometer+0x44>)
 800736c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007370:	b29a      	uxth	r2, r3
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <readAccelerometer+0x48>)
 8007374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007378:	b29b      	uxth	r3, r3
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	b29b      	uxth	r3, r3
 800737e:	b21a      	sxth	r2, r3
 8007380:	4b03      	ldr	r3, [pc, #12]	; (8007390 <readAccelerometer+0x4c>)
 8007382:	805a      	strh	r2, [r3, #2]
	//		}else{
	//			beepMany();
	//		}
	//	}
	//	is_checking = 0;
}
 8007384:	bf00      	nop
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20005bc0 	.word	0x20005bc0
 800738c:	20005b26 	.word	0x20005b26
 8007390:	20000130 	.word	0x20000130

08007394 <HAL_DAC_ConvCpltCallbackCh1>:
	}

	return 0;
}

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef * hdac){
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af02      	add	r7, sp, #8
 800739a:	6078      	str	r0, [r7, #4]
	if (numToBeep >= 1) {
 800739c:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <HAL_DAC_ConvCpltCallbackCh1+0xbc>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d050      	beq.n	8007446 <HAL_DAC_ConvCpltCallbackCh1+0xb2>
		if(this_note == 0) {
 80073a4:	4b2b      	ldr	r3, [pc, #172]	; (8007454 <HAL_DAC_ConvCpltCallbackCh1+0xc0>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10d      	bne.n	80073c8 <HAL_DAC_ConvCpltCallbackCh1+0x34>
			BSP_QSPI_Read((uint8_t *)&soundBufferDac[0], 22050*2, 22050);
 80073ac:	f245 6222 	movw	r2, #22050	; 0x5622
 80073b0:	f64a 4144 	movw	r1, #44100	; 0xac44
 80073b4:	4828      	ldr	r0, [pc, #160]	; (8007458 <HAL_DAC_ConvCpltCallbackCh1+0xc4>)
 80073b6:	f000 fad7 	bl	8007968 <BSP_QSPI_Read>
			BSP_QSPI_Read((uint8_t *)&soundBufferDac[22050], 22050*3, 22050);
 80073ba:	f245 6222 	movw	r2, #22050	; 0x5622
 80073be:	4927      	ldr	r1, [pc, #156]	; (800745c <HAL_DAC_ConvCpltCallbackCh1+0xc8>)
 80073c0:	4827      	ldr	r0, [pc, #156]	; (8007460 <HAL_DAC_ConvCpltCallbackCh1+0xcc>)
 80073c2:	f000 fad1 	bl	8007968 <BSP_QSPI_Read>
 80073c6:	e021      	b.n	800740c <HAL_DAC_ConvCpltCallbackCh1+0x78>
		} else if (this_note == 1) {
 80073c8:	4b22      	ldr	r3, [pc, #136]	; (8007454 <HAL_DAC_ConvCpltCallbackCh1+0xc0>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10c      	bne.n	80073ea <HAL_DAC_ConvCpltCallbackCh1+0x56>
			BSP_QSPI_Read((uint8_t *)&soundBufferDac[0], 22050*4, 22050);
 80073d0:	f245 6222 	movw	r2, #22050	; 0x5622
 80073d4:	4923      	ldr	r1, [pc, #140]	; (8007464 <HAL_DAC_ConvCpltCallbackCh1+0xd0>)
 80073d6:	4820      	ldr	r0, [pc, #128]	; (8007458 <HAL_DAC_ConvCpltCallbackCh1+0xc4>)
 80073d8:	f000 fac6 	bl	8007968 <BSP_QSPI_Read>
			BSP_QSPI_Read((uint8_t *)&soundBufferDac[22050], 22050*5, 22050);
 80073dc:	f245 6222 	movw	r2, #22050	; 0x5622
 80073e0:	4921      	ldr	r1, [pc, #132]	; (8007468 <HAL_DAC_ConvCpltCallbackCh1+0xd4>)
 80073e2:	481f      	ldr	r0, [pc, #124]	; (8007460 <HAL_DAC_ConvCpltCallbackCh1+0xcc>)
 80073e4:	f000 fac0 	bl	8007968 <BSP_QSPI_Read>
 80073e8:	e010      	b.n	800740c <HAL_DAC_ConvCpltCallbackCh1+0x78>
		} else if (this_note == 2) {
 80073ea:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <HAL_DAC_ConvCpltCallbackCh1+0xc0>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d10c      	bne.n	800740c <HAL_DAC_ConvCpltCallbackCh1+0x78>
			BSP_QSPI_Read((uint8_t *)&soundBufferDac[0], 22050*0, 22050);
 80073f2:	f245 6222 	movw	r2, #22050	; 0x5622
 80073f6:	2100      	movs	r1, #0
 80073f8:	4817      	ldr	r0, [pc, #92]	; (8007458 <HAL_DAC_ConvCpltCallbackCh1+0xc4>)
 80073fa:	f000 fab5 	bl	8007968 <BSP_QSPI_Read>
			BSP_QSPI_Read((uint8_t *)&soundBufferDac[22050], 22050*1, 22050);
 80073fe:	f245 6222 	movw	r2, #22050	; 0x5622
 8007402:	f245 6122 	movw	r1, #22050	; 0x5622
 8007406:	4816      	ldr	r0, [pc, #88]	; (8007460 <HAL_DAC_ConvCpltCallbackCh1+0xcc>)
 8007408:	f000 faae 	bl	8007968 <BSP_QSPI_Read>
		}

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)soundBufferDac, 11025, DAC_ALIGN_8B_R);
 800740c:	2308      	movs	r3, #8
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	f642 3311 	movw	r3, #11025	; 0x2b11
 8007414:	4a10      	ldr	r2, [pc, #64]	; (8007458 <HAL_DAC_ConvCpltCallbackCh1+0xc4>)
 8007416:	2100      	movs	r1, #0
 8007418:	4814      	ldr	r0, [pc, #80]	; (800746c <HAL_DAC_ConvCpltCallbackCh1+0xd8>)
 800741a:	f7f9 fe69 	bl	80010f0 <HAL_DAC_Start_DMA>

		if(this_note < 2){
 800741e:	4b0d      	ldr	r3, [pc, #52]	; (8007454 <HAL_DAC_ConvCpltCallbackCh1+0xc0>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d806      	bhi.n	8007434 <HAL_DAC_ConvCpltCallbackCh1+0xa0>
			this_note++;
 8007426:	4b0b      	ldr	r3, [pc, #44]	; (8007454 <HAL_DAC_ConvCpltCallbackCh1+0xc0>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	b2da      	uxtb	r2, r3
 800742e:	4b09      	ldr	r3, [pc, #36]	; (8007454 <HAL_DAC_ConvCpltCallbackCh1+0xc0>)
 8007430:	701a      	strb	r2, [r3, #0]
 8007432:	e002      	b.n	800743a <HAL_DAC_ConvCpltCallbackCh1+0xa6>
		} else {
			this_note = 0;
 8007434:	4b07      	ldr	r3, [pc, #28]	; (8007454 <HAL_DAC_ConvCpltCallbackCh1+0xc0>)
 8007436:	2200      	movs	r2, #0
 8007438:	701a      	strb	r2, [r3, #0]
		}

		numToBeep--;
 800743a:	4b05      	ldr	r3, [pc, #20]	; (8007450 <HAL_DAC_ConvCpltCallbackCh1+0xbc>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	3b01      	subs	r3, #1
 8007440:	b2da      	uxtb	r2, r3
 8007442:	4b03      	ldr	r3, [pc, #12]	; (8007450 <HAL_DAC_ConvCpltCallbackCh1+0xbc>)
 8007444:	701a      	strb	r2, [r3, #0]
	}

}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000134 	.word	0x20000134
 8007454:	2000012e 	.word	0x2000012e
 8007458:	20005bc4 	.word	0x20005bc4
 800745c:	00010266 	.word	0x00010266
 8007460:	2000b1e6 	.word	0x2000b1e6
 8007464:	00015888 	.word	0x00015888
 8007468:	0001aeaa 	.word	0x0001aeaa
 800746c:	20000308 	.word	0x20000308

08007470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007474:	bf00      	nop
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	; 0x28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007488:	4b27      	ldr	r3, [pc, #156]	; (8007528 <I2Cx_MspInit+0xa8>)
 800748a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748c:	4a26      	ldr	r2, [pc, #152]	; (8007528 <I2Cx_MspInit+0xa8>)
 800748e:	f043 0302 	orr.w	r3, r3, #2
 8007492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007494:	4b24      	ldr	r3, [pc, #144]	; (8007528 <I2Cx_MspInit+0xa8>)
 8007496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80074a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80074a4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80074a6:	2312      	movs	r3, #18
 80074a8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80074aa:	2301      	movs	r3, #1
 80074ac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074ae:	2303      	movs	r3, #3
 80074b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80074b2:	2304      	movs	r3, #4
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80074b6:	f107 0314 	add.w	r3, r7, #20
 80074ba:	4619      	mov	r1, r3
 80074bc:	481b      	ldr	r0, [pc, #108]	; (800752c <I2Cx_MspInit+0xac>)
 80074be:	f7fa fac3 	bl	8001a48 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80074c2:	f107 0314 	add.w	r3, r7, #20
 80074c6:	4619      	mov	r1, r3
 80074c8:	4818      	ldr	r0, [pc, #96]	; (800752c <I2Cx_MspInit+0xac>)
 80074ca:	f7fa fabd 	bl	8001a48 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80074ce:	4b16      	ldr	r3, [pc, #88]	; (8007528 <I2Cx_MspInit+0xa8>)
 80074d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d2:	4a15      	ldr	r2, [pc, #84]	; (8007528 <I2Cx_MspInit+0xa8>)
 80074d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074d8:	6593      	str	r3, [r2, #88]	; 0x58
 80074da:	4b13      	ldr	r3, [pc, #76]	; (8007528 <I2Cx_MspInit+0xa8>)
 80074dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80074e6:	4b10      	ldr	r3, [pc, #64]	; (8007528 <I2Cx_MspInit+0xa8>)
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	4a0f      	ldr	r2, [pc, #60]	; (8007528 <I2Cx_MspInit+0xa8>)
 80074ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80074f2:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <I2Cx_MspInit+0xa8>)
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	4a0c      	ldr	r2, [pc, #48]	; (8007528 <I2Cx_MspInit+0xa8>)
 80074f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80074fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80074fe:	2200      	movs	r2, #0
 8007500:	210f      	movs	r1, #15
 8007502:	2021      	movs	r0, #33	; 0x21
 8007504:	f7f9 fd9b 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007508:	2021      	movs	r0, #33	; 0x21
 800750a:	f7f9 fdb4 	bl	8001076 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800750e:	2200      	movs	r2, #0
 8007510:	210f      	movs	r1, #15
 8007512:	2022      	movs	r0, #34	; 0x22
 8007514:	f7f9 fd93 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8007518:	2022      	movs	r0, #34	; 0x22
 800751a:	f7f9 fdac 	bl	8001076 <HAL_NVIC_EnableIRQ>
}
 800751e:	bf00      	nop
 8007520:	3728      	adds	r7, #40	; 0x28
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	40021000 	.word	0x40021000
 800752c:	48000400 	.word	0x48000400

08007530 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a12      	ldr	r2, [pc, #72]	; (8007584 <I2Cx_Init+0x54>)
 800753c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a11      	ldr	r2, [pc, #68]	; (8007588 <I2Cx_Init+0x58>)
 8007542:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff ff89 	bl	8007480 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fa fd38 	bl	8001fe4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8007574:	2100      	movs	r1, #0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fb fa3c 	bl	80029f4 <HAL_I2CEx_ConfigAnalogFilter>
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	40005800 	.word	0x40005800
 8007588:	00702681 	.word	0x00702681

0800758c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08a      	sub	sp, #40	; 0x28
 8007590:	af04      	add	r7, sp, #16
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	4608      	mov	r0, r1
 8007596:	4611      	mov	r1, r2
 8007598:	461a      	mov	r2, r3
 800759a:	4603      	mov	r3, r0
 800759c:	72fb      	strb	r3, [r7, #11]
 800759e:	460b      	mov	r3, r1
 80075a0:	813b      	strh	r3, [r7, #8]
 80075a2:	4613      	mov	r3, r2
 80075a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80075aa:	7afb      	ldrb	r3, [r7, #11]
 80075ac:	b299      	uxth	r1, r3
 80075ae:	88f8      	ldrh	r0, [r7, #6]
 80075b0:	893a      	ldrh	r2, [r7, #8]
 80075b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075b6:	9302      	str	r3, [sp, #8]
 80075b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	4603      	mov	r3, r0
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7fa fee0 	bl	8002388 <HAL_I2C_Mem_Read>
 80075c8:	4603      	mov	r3, r0
 80075ca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80075d2:	7afb      	ldrb	r3, [r7, #11]
 80075d4:	4619      	mov	r1, r3
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f832 	bl	8007640 <I2Cx_Error>
  }
  return status;
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b08a      	sub	sp, #40	; 0x28
 80075ea:	af04      	add	r7, sp, #16
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	4608      	mov	r0, r1
 80075f0:	4611      	mov	r1, r2
 80075f2:	461a      	mov	r2, r3
 80075f4:	4603      	mov	r3, r0
 80075f6:	72fb      	strb	r3, [r7, #11]
 80075f8:	460b      	mov	r3, r1
 80075fa:	813b      	strh	r3, [r7, #8]
 80075fc:	4613      	mov	r3, r2
 80075fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	b299      	uxth	r1, r3
 8007608:	88f8      	ldrh	r0, [r7, #6]
 800760a:	893a      	ldrh	r2, [r7, #8]
 800760c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007610:	9302      	str	r3, [sp, #8]
 8007612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	4603      	mov	r3, r0
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7fa fd9f 	bl	8002160 <HAL_I2C_Mem_Write>
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d004      	beq.n	8007636 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800762c:	7afb      	ldrb	r3, [r7, #11]
 800762e:	4619      	mov	r1, r3
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 f805 	bl	8007640 <I2Cx_Error>
  }
  return status;
 8007636:	7dfb      	ldrb	r3, [r7, #23]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7fa fd58 	bl	8002102 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff ff6c 	bl	8007530 <I2Cx_Init>
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8007664:	4802      	ldr	r0, [pc, #8]	; (8007670 <SENSOR_IO_Init+0x10>)
 8007666:	f7ff ff63 	bl	8007530 <I2Cx_Init>
}
 800766a:	bf00      	nop
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	200108e0 	.word	0x200108e0

08007674 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af02      	add	r7, sp, #8
 800767a:	4603      	mov	r3, r0
 800767c:	71fb      	strb	r3, [r7, #7]
 800767e:	460b      	mov	r3, r1
 8007680:	71bb      	strb	r3, [r7, #6]
 8007682:	4613      	mov	r3, r2
 8007684:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8007686:	79bb      	ldrb	r3, [r7, #6]
 8007688:	b29a      	uxth	r2, r3
 800768a:	79f9      	ldrb	r1, [r7, #7]
 800768c:	2301      	movs	r3, #1
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	1d7b      	adds	r3, r7, #5
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	2301      	movs	r3, #1
 8007696:	4803      	ldr	r0, [pc, #12]	; (80076a4 <SENSOR_IO_Write+0x30>)
 8007698:	f7ff ffa5 	bl	80075e6 <I2Cx_WriteMultiple>
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	200108e0 	.word	0x200108e0

080076a8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	4603      	mov	r3, r0
 80076b0:	460a      	mov	r2, r1
 80076b2:	71fb      	strb	r3, [r7, #7]
 80076b4:	4613      	mov	r3, r2
 80076b6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80076bc:	79bb      	ldrb	r3, [r7, #6]
 80076be:	b29a      	uxth	r2, r3
 80076c0:	79f9      	ldrb	r1, [r7, #7]
 80076c2:	2301      	movs	r3, #1
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	f107 030f 	add.w	r3, r7, #15
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	2301      	movs	r3, #1
 80076ce:	4804      	ldr	r0, [pc, #16]	; (80076e0 <SENSOR_IO_Read+0x38>)
 80076d0:	f7ff ff5c 	bl	800758c <I2Cx_ReadMultiple>

  return read_value;
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	200108e0 	.word	0x200108e0

080076e4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	603a      	str	r2, [r7, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
 80076f2:	460b      	mov	r3, r1
 80076f4:	71bb      	strb	r3, [r7, #6]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80076fa:	79bb      	ldrb	r3, [r7, #6]
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	79f9      	ldrb	r1, [r7, #7]
 8007700:	88bb      	ldrh	r3, [r7, #4]
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	2301      	movs	r3, #1
 800770a:	4804      	ldr	r0, [pc, #16]	; (800771c <SENSOR_IO_ReadMultiple+0x38>)
 800770c:	f7ff ff3e 	bl	800758c <I2Cx_ReadMultiple>
 8007710:	4603      	mov	r3, r0
 8007712:	b29b      	uxth	r3, r3
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	200108e0 	.word	0x200108e0

08007720 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800772a:	2300      	movs	r3, #0
 800772c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800772e:	4b19      	ldr	r3, [pc, #100]	; (8007794 <BSP_ACCELERO_Init+0x74>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	4798      	blx	r3
 8007734:	4603      	mov	r3, r0
 8007736:	2b6a      	cmp	r3, #106	; 0x6a
 8007738:	d002      	beq.n	8007740 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	73fb      	strb	r3, [r7, #15]
 800773e:	e024      	b.n	800778a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8007740:	4b15      	ldr	r3, [pc, #84]	; (8007798 <BSP_ACCELERO_Init+0x78>)
 8007742:	4a14      	ldr	r2, [pc, #80]	; (8007794 <BSP_ACCELERO_Init+0x74>)
 8007744:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8007746:	2330      	movs	r3, #48	; 0x30
 8007748:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800774a:	2300      	movs	r3, #0
 800774c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800774e:	2300      	movs	r3, #0
 8007750:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007752:	2340      	movs	r3, #64	; 0x40
 8007754:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800775e:	797a      	ldrb	r2, [r7, #5]
 8007760:	7abb      	ldrb	r3, [r7, #10]
 8007762:	4313      	orrs	r3, r2
 8007764:	b2db      	uxtb	r3, r3
 8007766:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8007768:	7a3b      	ldrb	r3, [r7, #8]
 800776a:	f043 0304 	orr.w	r3, r3, #4
 800776e:	b2db      	uxtb	r3, r3
 8007770:	021b      	lsls	r3, r3, #8
 8007772:	b21a      	sxth	r2, r3
 8007774:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	b21b      	sxth	r3, r3
 800777c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <BSP_ACCELERO_Init+0x78>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	89ba      	ldrh	r2, [r7, #12]
 8007786:	4610      	mov	r0, r2
 8007788:	4798      	blx	r3
  }  

  return ret;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000024 	.word	0x20000024
 8007798:	200002d4 	.word	0x200002d4

0800779c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80077a4:	4b08      	ldr	r3, [pc, #32]	; (80077c8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d009      	beq.n	80077c0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d004      	beq.n	80077c0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80077b6:	4b04      	ldr	r3, [pc, #16]	; (80077c8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	4798      	blx	r3
    }
  }
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	200002d4 	.word	0x200002d4

080077cc <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80077d6:	2300      	movs	r3, #0
 80077d8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <BSP_GYRO_Init+0x7c>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	4798      	blx	r3
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b6a      	cmp	r3, #106	; 0x6a
 80077e4:	d002      	beq.n	80077ec <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	73fb      	strb	r3, [r7, #15]
 80077ea:	e028      	b.n	800783e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80077ec:	4b17      	ldr	r3, [pc, #92]	; (800784c <BSP_GYRO_Init+0x80>)
 80077ee:	4a16      	ldr	r2, [pc, #88]	; (8007848 <BSP_GYRO_Init+0x7c>)
 80077f0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80077f6:	2330      	movs	r3, #48	; 0x30
 80077f8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007802:	2340      	movs	r3, #64	; 0x40
 8007804:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800780a:	230c      	movs	r3, #12
 800780c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800780e:	7aba      	ldrb	r2, [r7, #10]
 8007810:	797b      	ldrb	r3, [r7, #5]
 8007812:	4313      	orrs	r3, r2
 8007814:	b2db      	uxtb	r3, r3
 8007816:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8007818:	7a3b      	ldrb	r3, [r7, #8]
 800781a:	f043 0304 	orr.w	r3, r3, #4
 800781e:	b2db      	uxtb	r3, r3
 8007820:	021b      	lsls	r3, r3, #8
 8007822:	b21a      	sxth	r2, r3
 8007824:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007828:	4313      	orrs	r3, r2
 800782a:	b21b      	sxth	r3, r3
 800782c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800782e:	4b07      	ldr	r3, [pc, #28]	; (800784c <BSP_GYRO_Init+0x80>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	89ba      	ldrh	r2, [r7, #12]
 8007836:	4610      	mov	r0, r2
 8007838:	4798      	blx	r3
    
    ret = GYRO_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800783e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000058 	.word	0x20000058
 800784c:	200002d8 	.word	0x200002d8

08007850 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <BSP_HSENSOR_Init+0x38>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	20be      	movs	r0, #190	; 0xbe
 800785c:	4798      	blx	r3
 800785e:	4603      	mov	r3, r0
 8007860:	2bbc      	cmp	r3, #188	; 0xbc
 8007862:	d002      	beq.n	800786a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	607b      	str	r3, [r7, #4]
 8007868:	e009      	b.n	800787e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800786a:	4b08      	ldr	r3, [pc, #32]	; (800788c <BSP_HSENSOR_Init+0x3c>)
 800786c:	4a06      	ldr	r2, [pc, #24]	; (8007888 <BSP_HSENSOR_Init+0x38>)
 800786e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8007870:	4b06      	ldr	r3, [pc, #24]	; (800788c <BSP_HSENSOR_Init+0x3c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	20be      	movs	r0, #190	; 0xbe
 8007878:	4798      	blx	r3
    ret = HSENSOR_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800787e:	687b      	ldr	r3, [r7, #4]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000008 	.word	0x20000008
 800788c:	200002dc 	.word	0x200002dc

08007890 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8007896:	4b32      	ldr	r3, [pc, #200]	; (8007960 <BSP_QSPI_Init+0xd0>)
 8007898:	4a32      	ldr	r2, [pc, #200]	; (8007964 <BSP_QSPI_Init+0xd4>)
 800789a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800789c:	4830      	ldr	r0, [pc, #192]	; (8007960 <BSP_QSPI_Init+0xd0>)
 800789e:	f7fb fa1b 	bl	8002cd8 <HAL_QSPI_DeInit>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e054      	b.n	8007956 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80078ac:	f000 f964 	bl	8007b78 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 80078b0:	4b2b      	ldr	r3, [pc, #172]	; (8007960 <BSP_QSPI_Init+0xd0>)
 80078b2:	2202      	movs	r2, #2
 80078b4:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80078b6:	4b2a      	ldr	r3, [pc, #168]	; (8007960 <BSP_QSPI_Init+0xd0>)
 80078b8:	2204      	movs	r2, #4
 80078ba:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80078bc:	4b28      	ldr	r3, [pc, #160]	; (8007960 <BSP_QSPI_Init+0xd0>)
 80078be:	2210      	movs	r2, #16
 80078c0:	60da      	str	r2, [r3, #12]
 80078c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80078c6:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	fa93 f3a3 	rbit	r3, r3
 80078ce:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 80078da:	2320      	movs	r3, #32
 80078dc:	e003      	b.n	80078e6 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	fab3 f383 	clz	r3, r3
 80078e4:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 80078e6:	3b01      	subs	r3, #1
 80078e8:	461a      	mov	r2, r3
 80078ea:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <BSP_QSPI_Init+0xd0>)
 80078ec:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80078ee:	4b1c      	ldr	r3, [pc, #112]	; (8007960 <BSP_QSPI_Init+0xd0>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80078f4:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <BSP_QSPI_Init+0xd0>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80078fa:	4819      	ldr	r0, [pc, #100]	; (8007960 <BSP_QSPI_Init+0xd0>)
 80078fc:	f7fb f976 	bl	8002bec <HAL_QSPI_Init>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e025      	b.n	8007956 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 800790a:	4815      	ldr	r0, [pc, #84]	; (8007960 <BSP_QSPI_Init+0xd0>)
 800790c:	f000 f974 	bl	8007bf8 <QSPI_ResetMemory>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8007916:	2304      	movs	r3, #4
 8007918:	e01d      	b.n	8007956 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800791a:	2101      	movs	r1, #1
 800791c:	4810      	ldr	r0, [pc, #64]	; (8007960 <BSP_QSPI_Init+0xd0>)
 800791e:	f000 fa35 	bl	8007d8c <QSPI_QuadMode>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e014      	b.n	8007956 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800792c:	2101      	movs	r1, #1
 800792e:	480c      	ldr	r0, [pc, #48]	; (8007960 <BSP_QSPI_Init+0xd0>)
 8007930:	f000 fad4 	bl	8007edc <QSPI_HighPerfMode>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e00b      	b.n	8007956 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800793e:	4b08      	ldr	r3, [pc, #32]	; (8007960 <BSP_QSPI_Init+0xd0>)
 8007940:	2201      	movs	r2, #1
 8007942:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8007944:	4806      	ldr	r0, [pc, #24]	; (8007960 <BSP_QSPI_Init+0xd0>)
 8007946:	f7fb f951 	bl	8002bec <HAL_QSPI_Init>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e000      	b.n	8007956 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	2001092c 	.word	0x2001092c
 8007964:	a0001000 	.word	0xa0001000

08007968 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b092      	sub	sp, #72	; 0x48
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8007974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007978:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 800797a:	23eb      	movs	r3, #235	; 0xeb
 800797c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 800797e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007982:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8007984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007988:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 800798e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007992:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8007994:	2300      	movs	r3, #0
 8007996:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8007998:	23aa      	movs	r3, #170	; 0xaa
 800799a:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 800799c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80079a0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80079a2:	2304      	movs	r3, #4
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 80079aa:	2300      	movs	r3, #0
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 80079ae:	2300      	movs	r3, #0
 80079b0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 80079b2:	2300      	movs	r3, #0
 80079b4:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80079b6:	f107 0310 	add.w	r3, r7, #16
 80079ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80079be:	4619      	mov	r1, r3
 80079c0:	480b      	ldr	r0, [pc, #44]	; (80079f0 <BSP_QSPI_Read+0x88>)
 80079c2:	f7fb f9ad 	bl	8002d20 <HAL_QSPI_Command>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e00b      	b.n	80079e8 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80079d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d4:	68f9      	ldr	r1, [r7, #12]
 80079d6:	4806      	ldr	r0, [pc, #24]	; (80079f0 <BSP_QSPI_Read+0x88>)
 80079d8:	f7fb fa97 	bl	8002f0a <HAL_QSPI_Receive>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3748      	adds	r7, #72	; 0x48
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	2001092c 	.word	0x2001092c

080079f4 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b096      	sub	sp, #88	; 0x58
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007a08:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8007a0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d901      	bls.n	8007a16 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4413      	add	r3, r2
 8007a20:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8007a28:	2338      	movs	r3, #56	; 0x38
 8007a2a:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8007a2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007a30:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8007a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a36:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8007a3c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8007a40:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8007a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a54:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8007a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8007a5a:	4824      	ldr	r0, [pc, #144]	; (8007aec <BSP_QSPI_Write+0xf8>)
 8007a5c:	f000 f910 	bl	8007c80 <QSPI_WriteEnable>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e03b      	b.n	8007ae2 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a6a:	f107 0314 	add.w	r3, r7, #20
 8007a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a72:	4619      	mov	r1, r3
 8007a74:	481d      	ldr	r0, [pc, #116]	; (8007aec <BSP_QSPI_Write+0xf8>)
 8007a76:	f7fb f953 	bl	8002d20 <HAL_QSPI_Command>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e02e      	b.n	8007ae2 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a88:	68f9      	ldr	r1, [r7, #12]
 8007a8a:	4818      	ldr	r0, [pc, #96]	; (8007aec <BSP_QSPI_Write+0xf8>)
 8007a8c:	f7fb f9a6 	bl	8002ddc <HAL_QSPI_Transmit>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e023      	b.n	8007ae2 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007a9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8007a9e:	4813      	ldr	r0, [pc, #76]	; (8007aec <BSP_QSPI_Write+0xf8>)
 8007aa0:	f000 f93a 	bl	8007d18 <QSPI_AutoPollingMemReady>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e019      	b.n	8007ae2 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8007aae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab2:	4413      	add	r3, r2
 8007ab4:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aba:	4413      	add	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8007abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d203      	bcs.n	8007ad2 <BSP_QSPI_Write+0xde>
 8007aca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	e001      	b.n	8007ad6 <BSP_QSPI_Write+0xe2>
 8007ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ad6:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8007ad8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d3b8      	bcc.n	8007a52 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3758      	adds	r7, #88	; 0x58
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	2001092c 	.word	0x2001092c

08007af0 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b090      	sub	sp, #64	; 0x40
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007afc:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 8007afe:	23d8      	movs	r3, #216	; 0xd8
 8007b00:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8007b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8007b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b0c:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8007b16:	2300      	movs	r3, #0
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007b22:	2300      	movs	r3, #0
 8007b24:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007b26:	2300      	movs	r3, #0
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8007b2a:	4812      	ldr	r0, [pc, #72]	; (8007b74 <BSP_QSPI_Erase_Block+0x84>)
 8007b2c:	f000 f8a8 	bl	8007c80 <QSPI_WriteEnable>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e017      	b.n	8007b6a <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007b3a:	f107 0308 	add.w	r3, r7, #8
 8007b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b42:	4619      	mov	r1, r3
 8007b44:	480b      	ldr	r0, [pc, #44]	; (8007b74 <BSP_QSPI_Erase_Block+0x84>)
 8007b46:	f7fb f8eb 	bl	8002d20 <HAL_QSPI_Command>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e00a      	b.n	8007b6a <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8007b54:	f640 51ac 	movw	r1, #3500	; 0xdac
 8007b58:	4806      	ldr	r0, [pc, #24]	; (8007b74 <BSP_QSPI_Erase_Block+0x84>)
 8007b5a:	f000 f8dd 	bl	8007d18 <QSPI_AutoPollingMemReady>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3740      	adds	r7, #64	; 0x40
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	2001092c 	.word	0x2001092c

08007b78 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8007b7e:	4b1c      	ldr	r3, [pc, #112]	; (8007bf0 <BSP_QSPI_MspInit+0x78>)
 8007b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b82:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <BSP_QSPI_MspInit+0x78>)
 8007b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b88:	6513      	str	r3, [r2, #80]	; 0x50
 8007b8a:	4b19      	ldr	r3, [pc, #100]	; (8007bf0 <BSP_QSPI_MspInit+0x78>)
 8007b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b92:	60bb      	str	r3, [r7, #8]
 8007b94:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8007b96:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <BSP_QSPI_MspInit+0x78>)
 8007b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9a:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <BSP_QSPI_MspInit+0x78>)
 8007b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba0:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8007ba2:	4b13      	ldr	r3, [pc, #76]	; (8007bf0 <BSP_QSPI_MspInit+0x78>)
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	4a12      	ldr	r2, [pc, #72]	; (8007bf0 <BSP_QSPI_MspInit+0x78>)
 8007ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bae:	4b10      	ldr	r3, [pc, #64]	; (8007bf0 <BSP_QSPI_MspInit+0x78>)
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb2:	4a0f      	ldr	r2, [pc, #60]	; (8007bf0 <BSP_QSPI_MspInit+0x78>)
 8007bb4:	f043 0310 	orr.w	r3, r3, #16
 8007bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bba:	4b0d      	ldr	r3, [pc, #52]	; (8007bf0 <BSP_QSPI_MspInit+0x78>)
 8007bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	607b      	str	r3, [r7, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8007bc6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8007bca:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007bd8:	230a      	movs	r3, #10
 8007bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bdc:	f107 030c 	add.w	r3, r7, #12
 8007be0:	4619      	mov	r1, r3
 8007be2:	4804      	ldr	r0, [pc, #16]	; (8007bf4 <BSP_QSPI_MspInit+0x7c>)
 8007be4:	f7f9 ff30 	bl	8001a48 <HAL_GPIO_Init>
}
 8007be8:	bf00      	nop
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	48001000 	.word	0x48001000

08007bf8 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b090      	sub	sp, #64	; 0x40
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c04:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8007c06:	2366      	movs	r3, #102	; 0x66
 8007c08:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8007c12:	2300      	movs	r3, #0
 8007c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007c22:	2300      	movs	r3, #0
 8007c24:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c26:	f107 0308 	add.w	r3, r7, #8
 8007c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4812      	ldr	r0, [pc, #72]	; (8007c7c <QSPI_ResetMemory+0x84>)
 8007c32:	f7fb f875 	bl	8002d20 <HAL_QSPI_Command>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e019      	b.n	8007c74 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8007c40:	2399      	movs	r3, #153	; 0x99
 8007c42:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c44:	f107 0308 	add.w	r3, r7, #8
 8007c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	480b      	ldr	r0, [pc, #44]	; (8007c7c <QSPI_ResetMemory+0x84>)
 8007c50:	f7fb f866 	bl	8002d20 <HAL_QSPI_Command>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e00a      	b.n	8007c74 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007c5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007c62:	4806      	ldr	r0, [pc, #24]	; (8007c7c <QSPI_ResetMemory+0x84>)
 8007c64:	f000 f858 	bl	8007d18 <QSPI_AutoPollingMemReady>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3740      	adds	r7, #64	; 0x40
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	2001092c 	.word	0x2001092c

08007c80 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b096      	sub	sp, #88	; 0x58
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8007c8e:	2306      	movs	r3, #6
 8007c90:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007c96:	2300      	movs	r3, #0
 8007c98:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007caa:	2300      	movs	r3, #0
 8007cac:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007cae:	f107 0320 	add.w	r3, r7, #32
 8007cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4816      	ldr	r0, [pc, #88]	; (8007d14 <QSPI_WriteEnable+0x94>)
 8007cba:	f7fb f831 	bl	8002d20 <HAL_QSPI_Command>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e020      	b.n	8007d0a <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8007ccc:	2302      	movs	r3, #2
 8007cce:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8007cd8:	2310      	movs	r3, #16
 8007cda:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8007cdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ce0:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8007ce2:	2305      	movs	r3, #5
 8007ce4:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8007ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cea:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007cec:	f107 0208 	add.w	r2, r7, #8
 8007cf0:	f107 0120 	add.w	r1, r7, #32
 8007cf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cf8:	4806      	ldr	r0, [pc, #24]	; (8007d14 <QSPI_WriteEnable+0x94>)
 8007cfa:	f7fb f9a8 	bl	800304e <HAL_QSPI_AutoPolling>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3758      	adds	r7, #88	; 0x58
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	2001092c 	.word	0x2001092c

08007d18 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b096      	sub	sp, #88	; 0x58
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d26:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8007d28:	2305      	movs	r3, #5
 8007d2a:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8007d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d38:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007d42:	2300      	movs	r3, #0
 8007d44:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007d46:	2300      	movs	r3, #0
 8007d48:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8007d56:	2301      	movs	r3, #1
 8007d58:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8007d5a:	2310      	movs	r3, #16
 8007d5c:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8007d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d62:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8007d64:	f107 0208 	add.w	r2, r7, #8
 8007d68:	f107 0120 	add.w	r1, r7, #32
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	4806      	ldr	r0, [pc, #24]	; (8007d88 <QSPI_AutoPollingMemReady+0x70>)
 8007d70:	f7fb f96d 	bl	800304e <HAL_QSPI_AutoPolling>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e000      	b.n	8007d80 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3758      	adds	r7, #88	; 0x58
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	2001092c 	.word	0x2001092c

08007d8c <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b092      	sub	sp, #72	; 0x48
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8007d9e:	2305      	movs	r3, #5
 8007da0:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8007da2:	2300      	movs	r3, #0
 8007da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007da6:	2300      	movs	r3, #0
 8007da8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8007daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8007db4:	2301      	movs	r3, #1
 8007db6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007db8:	2300      	movs	r3, #0
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007dc4:	f107 0310 	add.w	r3, r7, #16
 8007dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4842      	ldr	r0, [pc, #264]	; (8007ed8 <QSPI_QuadMode+0x14c>)
 8007dd0:	f7fa ffa6 	bl	8002d20 <HAL_QSPI_Command>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e077      	b.n	8007ece <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007dde:	f107 030f 	add.w	r3, r7, #15
 8007de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de6:	4619      	mov	r1, r3
 8007de8:	483b      	ldr	r0, [pc, #236]	; (8007ed8 <QSPI_QuadMode+0x14c>)
 8007dea:	f7fb f88e 	bl	8002f0a <HAL_QSPI_Receive>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e06a      	b.n	8007ece <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8007df8:	4837      	ldr	r0, [pc, #220]	; (8007ed8 <QSPI_QuadMode+0x14c>)
 8007dfa:	f7ff ff41 	bl	8007c80 <QSPI_WriteEnable>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e062      	b.n	8007ece <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d105      	bne.n	8007e1a <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	e004      	b.n	8007e24 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8007e24:	2301      	movs	r3, #1
 8007e26:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e28:	f107 0310 	add.w	r3, r7, #16
 8007e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e30:	4619      	mov	r1, r3
 8007e32:	4829      	ldr	r0, [pc, #164]	; (8007ed8 <QSPI_QuadMode+0x14c>)
 8007e34:	f7fa ff74 	bl	8002d20 <HAL_QSPI_Command>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e045      	b.n	8007ece <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e42:	f107 030f 	add.w	r3, r7, #15
 8007e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4822      	ldr	r0, [pc, #136]	; (8007ed8 <QSPI_QuadMode+0x14c>)
 8007e4e:	f7fa ffc5 	bl	8002ddc <HAL_QSPI_Transmit>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e038      	b.n	8007ece <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007e5c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007e60:	481d      	ldr	r0, [pc, #116]	; (8007ed8 <QSPI_QuadMode+0x14c>)
 8007e62:	f7ff ff59 	bl	8007d18 <QSPI_AutoPollingMemReady>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e02e      	b.n	8007ece <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8007e70:	2305      	movs	r3, #5
 8007e72:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e74:	f107 0310 	add.w	r3, r7, #16
 8007e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4816      	ldr	r0, [pc, #88]	; (8007ed8 <QSPI_QuadMode+0x14c>)
 8007e80:	f7fa ff4e 	bl	8002d20 <HAL_QSPI_Command>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e01f      	b.n	8007ece <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e8e:	f107 030f 	add.w	r3, r7, #15
 8007e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e96:	4619      	mov	r1, r3
 8007e98:	480f      	ldr	r0, [pc, #60]	; (8007ed8 <QSPI_QuadMode+0x14c>)
 8007e9a:	f7fb f836 	bl	8002f0a <HAL_QSPI_Receive>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e012      	b.n	8007ece <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <QSPI_QuadMode+0x12c>
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d007      	beq.n	8007ec8 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3748      	adds	r7, #72	; 0x48
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	2001092c 	.word	0x2001092c

08007edc <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b092      	sub	sp, #72	; 0x48
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8007eee:	2305      	movs	r3, #5
 8007ef0:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8007efa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8007f04:	2301      	movs	r3, #1
 8007f06:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007f10:	2300      	movs	r3, #0
 8007f12:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f14:	f107 0310 	add.w	r3, r7, #16
 8007f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4853      	ldr	r0, [pc, #332]	; (800806c <QSPI_HighPerfMode+0x190>)
 8007f20:	f7fa fefe 	bl	8002d20 <HAL_QSPI_Command>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e09a      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f2e:	f107 030c 	add.w	r3, r7, #12
 8007f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f36:	4619      	mov	r1, r3
 8007f38:	484c      	ldr	r0, [pc, #304]	; (800806c <QSPI_HighPerfMode+0x190>)
 8007f3a:	f7fa ffe6 	bl	8002f0a <HAL_QSPI_Receive>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e08d      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8007f48:	2315      	movs	r3, #21
 8007f4a:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f50:	f107 0310 	add.w	r3, r7, #16
 8007f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4844      	ldr	r0, [pc, #272]	; (800806c <QSPI_HighPerfMode+0x190>)
 8007f5c:	f7fa fee0 	bl	8002d20 <HAL_QSPI_Command>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e07c      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f6a:	f107 030c 	add.w	r3, r7, #12
 8007f6e:	3301      	adds	r3, #1
 8007f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f74:	4619      	mov	r1, r3
 8007f76:	483d      	ldr	r0, [pc, #244]	; (800806c <QSPI_HighPerfMode+0x190>)
 8007f78:	f7fa ffc7 	bl	8002f0a <HAL_QSPI_Receive>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e06e      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8007f86:	4839      	ldr	r0, [pc, #228]	; (800806c <QSPI_HighPerfMode+0x190>)
 8007f88:	f7ff fe7a 	bl	8007c80 <QSPI_WriteEnable>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e066      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8007f96:	78fb      	ldrb	r3, [r7, #3]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d105      	bne.n	8007fa8 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	f043 0302 	orr.w	r3, r3, #2
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	73bb      	strb	r3, [r7, #14]
 8007fa6:	e004      	b.n	8007fb2 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	f023 0302 	bic.w	r3, r3, #2
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007fba:	f107 0310 	add.w	r3, r7, #16
 8007fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4829      	ldr	r0, [pc, #164]	; (800806c <QSPI_HighPerfMode+0x190>)
 8007fc6:	f7fa feab 	bl	8002d20 <HAL_QSPI_Command>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e047      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007fd4:	f107 030c 	add.w	r3, r7, #12
 8007fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4823      	ldr	r0, [pc, #140]	; (800806c <QSPI_HighPerfMode+0x190>)
 8007fe0:	f7fa fefc 	bl	8002ddc <HAL_QSPI_Transmit>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e03a      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007fee:	f241 3188 	movw	r1, #5000	; 0x1388
 8007ff2:	481e      	ldr	r0, [pc, #120]	; (800806c <QSPI_HighPerfMode+0x190>)
 8007ff4:	f7ff fe90 	bl	8007d18 <QSPI_AutoPollingMemReady>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e030      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8008002:	2315      	movs	r3, #21
 8008004:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8008006:	2302      	movs	r3, #2
 8008008:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800800a:	f107 0310 	add.w	r3, r7, #16
 800800e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008012:	4619      	mov	r1, r3
 8008014:	4815      	ldr	r0, [pc, #84]	; (800806c <QSPI_HighPerfMode+0x190>)
 8008016:	f7fa fe83 	bl	8002d20 <HAL_QSPI_Command>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e01f      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008024:	f107 030c 	add.w	r3, r7, #12
 8008028:	f241 3288 	movw	r2, #5000	; 0x1388
 800802c:	4619      	mov	r1, r3
 800802e:	480f      	ldr	r0, [pc, #60]	; (800806c <QSPI_HighPerfMode+0x190>)
 8008030:	f7fa ff6b 	bl	8002f0a <HAL_QSPI_Receive>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e012      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800803e:	7b7b      	ldrb	r3, [r7, #13]
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <QSPI_HighPerfMode+0x172>
 8008048:	78fb      	ldrb	r3, [r7, #3]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d007      	beq.n	800805e <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800804e:	7b7b      	ldrb	r3, [r7, #13]
 8008050:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e000      	b.n	8008064 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3748      	adds	r7, #72	; 0x48
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	2001092c 	.word	0x2001092c

08008070 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800807a:	4b09      	ldr	r3, [pc, #36]	; (80080a0 <BSP_TSENSOR_Init+0x30>)
 800807c:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <BSP_TSENSOR_Init+0x34>)
 800807e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8008080:	f7ff faee 	bl	8007660 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8008084:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <BSP_TSENSOR_Init+0x30>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2100      	movs	r1, #0
 800808c:	20be      	movs	r0, #190	; 0xbe
 800808e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8008094:	79fb      	ldrb	r3, [r7, #7]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	200002e0 	.word	0x200002e0
 80080a4:	20000014 	.word	0x20000014

080080a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080ae:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <HAL_MspInit+0x44>)
 80080b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b2:	4a0e      	ldr	r2, [pc, #56]	; (80080ec <HAL_MspInit+0x44>)
 80080b4:	f043 0301 	orr.w	r3, r3, #1
 80080b8:	6613      	str	r3, [r2, #96]	; 0x60
 80080ba:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <HAL_MspInit+0x44>)
 80080bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	607b      	str	r3, [r7, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <HAL_MspInit+0x44>)
 80080c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ca:	4a08      	ldr	r2, [pc, #32]	; (80080ec <HAL_MspInit+0x44>)
 80080cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080d0:	6593      	str	r3, [r2, #88]	; 0x58
 80080d2:	4b06      	ldr	r3, [pc, #24]	; (80080ec <HAL_MspInit+0x44>)
 80080d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080da:	603b      	str	r3, [r7, #0]
 80080dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40021000 	.word	0x40021000

080080f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08a      	sub	sp, #40	; 0x28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080f8:	f107 0314 	add.w	r3, r7, #20
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	605a      	str	r2, [r3, #4]
 8008102:	609a      	str	r2, [r3, #8]
 8008104:	60da      	str	r2, [r3, #12]
 8008106:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a2b      	ldr	r2, [pc, #172]	; (80081bc <HAL_DAC_MspInit+0xcc>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d14f      	bne.n	80081b2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8008112:	4b2b      	ldr	r3, [pc, #172]	; (80081c0 <HAL_DAC_MspInit+0xd0>)
 8008114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008116:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <HAL_DAC_MspInit+0xd0>)
 8008118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800811c:	6593      	str	r3, [r2, #88]	; 0x58
 800811e:	4b28      	ldr	r3, [pc, #160]	; (80081c0 <HAL_DAC_MspInit+0xd0>)
 8008120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008126:	613b      	str	r3, [r7, #16]
 8008128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800812a:	4b25      	ldr	r3, [pc, #148]	; (80081c0 <HAL_DAC_MspInit+0xd0>)
 800812c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812e:	4a24      	ldr	r2, [pc, #144]	; (80081c0 <HAL_DAC_MspInit+0xd0>)
 8008130:	f043 0301 	orr.w	r3, r3, #1
 8008134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008136:	4b22      	ldr	r3, [pc, #136]	; (80081c0 <HAL_DAC_MspInit+0xd0>)
 8008138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008142:	2310      	movs	r3, #16
 8008144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008146:	2303      	movs	r3, #3
 8008148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800814a:	2300      	movs	r3, #0
 800814c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800814e:	f107 0314 	add.w	r3, r7, #20
 8008152:	4619      	mov	r1, r3
 8008154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008158:	f7f9 fc76 	bl	8001a48 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800815c:	4b19      	ldr	r3, [pc, #100]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 800815e:	4a1a      	ldr	r2, [pc, #104]	; (80081c8 <HAL_DAC_MspInit+0xd8>)
 8008160:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8008162:	4b18      	ldr	r3, [pc, #96]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 8008164:	2206      	movs	r2, #6
 8008166:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008168:	4b16      	ldr	r3, [pc, #88]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 800816a:	2210      	movs	r2, #16
 800816c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800816e:	4b15      	ldr	r3, [pc, #84]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 8008170:	2200      	movs	r2, #0
 8008172:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008174:	4b13      	ldr	r3, [pc, #76]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 8008176:	2280      	movs	r2, #128	; 0x80
 8008178:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800817a:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 800817c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008180:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008182:	4b10      	ldr	r3, [pc, #64]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 8008184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008188:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800818a:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 800818c:	2200      	movs	r2, #0
 800818e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008190:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 8008192:	2200      	movs	r2, #0
 8008194:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8008196:	480b      	ldr	r0, [pc, #44]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 8008198:	f7f9 fa20 	bl	80015dc <HAL_DMA_Init>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80081a2:	f7ff f965 	bl	8007470 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a06      	ldr	r2, [pc, #24]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 80081aa:	609a      	str	r2, [r3, #8]
 80081ac:	4a05      	ldr	r2, [pc, #20]	; (80081c4 <HAL_DAC_MspInit+0xd4>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80081b2:	bf00      	nop
 80081b4:	3728      	adds	r7, #40	; 0x28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	40007400 	.word	0x40007400
 80081c0:	40021000 	.word	0x40021000
 80081c4:	20005a18 	.word	0x20005a18
 80081c8:	40020030 	.word	0x40020030

080081cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	; 0x28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081d4:	f107 0314 	add.w	r3, r7, #20
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	605a      	str	r2, [r3, #4]
 80081de:	609a      	str	r2, [r3, #8]
 80081e0:	60da      	str	r2, [r3, #12]
 80081e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a17      	ldr	r2, [pc, #92]	; (8008248 <HAL_I2C_MspInit+0x7c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d128      	bne.n	8008240 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081ee:	4b17      	ldr	r3, [pc, #92]	; (800824c <HAL_I2C_MspInit+0x80>)
 80081f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f2:	4a16      	ldr	r2, [pc, #88]	; (800824c <HAL_I2C_MspInit+0x80>)
 80081f4:	f043 0302 	orr.w	r3, r3, #2
 80081f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <HAL_I2C_MspInit+0x80>)
 80081fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	613b      	str	r3, [r7, #16]
 8008204:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008206:	f44f 7340 	mov.w	r3, #768	; 0x300
 800820a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800820c:	2312      	movs	r3, #18
 800820e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008210:	2301      	movs	r3, #1
 8008212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008214:	2303      	movs	r3, #3
 8008216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008218:	2304      	movs	r3, #4
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	4619      	mov	r1, r3
 8008222:	480b      	ldr	r0, [pc, #44]	; (8008250 <HAL_I2C_MspInit+0x84>)
 8008224:	f7f9 fc10 	bl	8001a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008228:	4b08      	ldr	r3, [pc, #32]	; (800824c <HAL_I2C_MspInit+0x80>)
 800822a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822c:	4a07      	ldr	r2, [pc, #28]	; (800824c <HAL_I2C_MspInit+0x80>)
 800822e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008232:	6593      	str	r3, [r2, #88]	; 0x58
 8008234:	4b05      	ldr	r3, [pc, #20]	; (800824c <HAL_I2C_MspInit+0x80>)
 8008236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008240:	bf00      	nop
 8008242:	3728      	adds	r7, #40	; 0x28
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	40005400 	.word	0x40005400
 800824c:	40021000 	.word	0x40021000
 8008250:	48000400 	.word	0x48000400

08008254 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a0b      	ldr	r2, [pc, #44]	; (8008290 <HAL_I2C_MspDeInit+0x3c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d10f      	bne.n	8008286 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <HAL_I2C_MspDeInit+0x40>)
 8008268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826a:	4a0a      	ldr	r2, [pc, #40]	; (8008294 <HAL_I2C_MspDeInit+0x40>)
 800826c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008270:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8008272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008276:	4808      	ldr	r0, [pc, #32]	; (8008298 <HAL_I2C_MspDeInit+0x44>)
 8008278:	f7f9 fd8e 	bl	8001d98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800827c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008280:	4805      	ldr	r0, [pc, #20]	; (8008298 <HAL_I2C_MspDeInit+0x44>)
 8008282:	f7f9 fd89 	bl	8001d98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40005400 	.word	0x40005400
 8008294:	40021000 	.word	0x40021000
 8008298:	48000400 	.word	0x48000400

0800829c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08a      	sub	sp, #40	; 0x28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a4:	f107 0314 	add.w	r3, r7, #20
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	605a      	str	r2, [r3, #4]
 80082ae:	609a      	str	r2, [r3, #8]
 80082b0:	60da      	str	r2, [r3, #12]
 80082b2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a17      	ldr	r2, [pc, #92]	; (8008318 <HAL_QSPI_MspInit+0x7c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d128      	bne.n	8008310 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80082be:	4b17      	ldr	r3, [pc, #92]	; (800831c <HAL_QSPI_MspInit+0x80>)
 80082c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c2:	4a16      	ldr	r2, [pc, #88]	; (800831c <HAL_QSPI_MspInit+0x80>)
 80082c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c8:	6513      	str	r3, [r2, #80]	; 0x50
 80082ca:	4b14      	ldr	r3, [pc, #80]	; (800831c <HAL_QSPI_MspInit+0x80>)
 80082cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <HAL_QSPI_MspInit+0x80>)
 80082d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082da:	4a10      	ldr	r2, [pc, #64]	; (800831c <HAL_QSPI_MspInit+0x80>)
 80082dc:	f043 0310 	orr.w	r3, r3, #16
 80082e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082e2:	4b0e      	ldr	r3, [pc, #56]	; (800831c <HAL_QSPI_MspInit+0x80>)
 80082e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e6:	f003 0310 	and.w	r3, r3, #16
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80082ee:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80082f2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082f4:	2302      	movs	r3, #2
 80082f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082fc:	2303      	movs	r3, #3
 80082fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8008300:	230a      	movs	r3, #10
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008304:	f107 0314 	add.w	r3, r7, #20
 8008308:	4619      	mov	r1, r3
 800830a:	4805      	ldr	r0, [pc, #20]	; (8008320 <HAL_QSPI_MspInit+0x84>)
 800830c:	f7f9 fb9c 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8008310:	bf00      	nop
 8008312:	3728      	adds	r7, #40	; 0x28
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	a0001000 	.word	0xa0001000
 800831c:	40021000 	.word	0x40021000
 8008320:	48001000 	.word	0x48001000

08008324 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a08      	ldr	r2, [pc, #32]	; (8008354 <HAL_QSPI_MspDeInit+0x30>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d10a      	bne.n	800834c <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8008336:	4b08      	ldr	r3, [pc, #32]	; (8008358 <HAL_QSPI_MspDeInit+0x34>)
 8008338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833a:	4a07      	ldr	r2, [pc, #28]	; (8008358 <HAL_QSPI_MspDeInit+0x34>)
 800833c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008340:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8008342:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8008346:	4805      	ldr	r0, [pc, #20]	; (800835c <HAL_QSPI_MspDeInit+0x38>)
 8008348:	f7f9 fd26 	bl	8001d98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	a0001000 	.word	0xa0001000
 8008358:	40021000 	.word	0x40021000
 800835c:	48001000 	.word	0x48001000

08008360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008370:	d114      	bne.n	800839c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008372:	4b15      	ldr	r3, [pc, #84]	; (80083c8 <HAL_TIM_Base_MspInit+0x68>)
 8008374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008376:	4a14      	ldr	r2, [pc, #80]	; (80083c8 <HAL_TIM_Base_MspInit+0x68>)
 8008378:	f043 0301 	orr.w	r3, r3, #1
 800837c:	6593      	str	r3, [r2, #88]	; 0x58
 800837e:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <HAL_TIM_Base_MspInit+0x68>)
 8008380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800838a:	2200      	movs	r2, #0
 800838c:	2102      	movs	r1, #2
 800838e:	201c      	movs	r0, #28
 8008390:	f7f8 fe55 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008394:	201c      	movs	r0, #28
 8008396:	f7f8 fe6e 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800839a:	e010      	b.n	80083be <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <HAL_TIM_Base_MspInit+0x6c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d10b      	bne.n	80083be <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80083a6:	4b08      	ldr	r3, [pc, #32]	; (80083c8 <HAL_TIM_Base_MspInit+0x68>)
 80083a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083aa:	4a07      	ldr	r2, [pc, #28]	; (80083c8 <HAL_TIM_Base_MspInit+0x68>)
 80083ac:	f043 0302 	orr.w	r3, r3, #2
 80083b0:	6593      	str	r3, [r2, #88]	; 0x58
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <HAL_TIM_Base_MspInit+0x68>)
 80083b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	60bb      	str	r3, [r7, #8]
 80083bc:	68bb      	ldr	r3, [r7, #8]
}
 80083be:	bf00      	nop
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	40021000 	.word	0x40021000
 80083cc:	40000400 	.word	0x40000400

080083d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	; 0x28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083d8:	f107 0314 	add.w	r3, r7, #20
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	609a      	str	r2, [r3, #8]
 80083e4:	60da      	str	r2, [r3, #12]
 80083e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a17      	ldr	r2, [pc, #92]	; (800844c <HAL_UART_MspInit+0x7c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d127      	bne.n	8008442 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80083f2:	4b17      	ldr	r3, [pc, #92]	; (8008450 <HAL_UART_MspInit+0x80>)
 80083f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f6:	4a16      	ldr	r2, [pc, #88]	; (8008450 <HAL_UART_MspInit+0x80>)
 80083f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083fc:	6613      	str	r3, [r2, #96]	; 0x60
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <HAL_UART_MspInit+0x80>)
 8008400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008406:	613b      	str	r3, [r7, #16]
 8008408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800840a:	4b11      	ldr	r3, [pc, #68]	; (8008450 <HAL_UART_MspInit+0x80>)
 800840c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800840e:	4a10      	ldr	r2, [pc, #64]	; (8008450 <HAL_UART_MspInit+0x80>)
 8008410:	f043 0302 	orr.w	r3, r3, #2
 8008414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008416:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <HAL_UART_MspInit+0x80>)
 8008418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008422:	23c0      	movs	r3, #192	; 0xc0
 8008424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008426:	2302      	movs	r3, #2
 8008428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800842a:	2300      	movs	r3, #0
 800842c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800842e:	2303      	movs	r3, #3
 8008430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008432:	2307      	movs	r3, #7
 8008434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008436:	f107 0314 	add.w	r3, r7, #20
 800843a:	4619      	mov	r1, r3
 800843c:	4805      	ldr	r0, [pc, #20]	; (8008454 <HAL_UART_MspInit+0x84>)
 800843e:	f7f9 fb03 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008442:	bf00      	nop
 8008444:	3728      	adds	r7, #40	; 0x28
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	40013800 	.word	0x40013800
 8008450:	40021000 	.word	0x40021000
 8008454:	48000400 	.word	0x48000400

08008458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008458:	b480      	push	{r7}
 800845a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800845c:	bf00      	nop
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008466:	b480      	push	{r7}
 8008468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800846a:	e7fe      	b.n	800846a <HardFault_Handler+0x4>

0800846c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008470:	e7fe      	b.n	8008470 <MemManage_Handler+0x4>

08008472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008472:	b480      	push	{r7}
 8008474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008476:	e7fe      	b.n	8008476 <BusFault_Handler+0x4>

08008478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008478:	b480      	push	{r7}
 800847a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800847c:	e7fe      	b.n	800847c <UsageFault_Handler+0x4>

0800847e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800847e:	b480      	push	{r7}
 8008480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008482:	bf00      	nop
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008490:	bf00      	nop
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800849a:	b480      	push	{r7}
 800849c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800849e:	bf00      	nop
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80084ac:	f7f8 fcaa 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80084b0:	bf00      	nop
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80084b8:	4802      	ldr	r0, [pc, #8]	; (80084c4 <DMA1_Channel3_IRQHandler+0x10>)
 80084ba:	f7f9 f9e5 	bl	8001888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80084be:	bf00      	nop
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20005a18 	.word	0x20005a18

080084c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80084cc:	4802      	ldr	r0, [pc, #8]	; (80084d8 <TIM2_IRQHandler+0x10>)
 80084ce:	f7fc fbcf 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80084d2:	bf00      	nop
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20005b4c 	.word	0x20005b4c

080084dc <_sbrk>:
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	4a14      	ldr	r2, [pc, #80]	; (8008538 <_sbrk+0x5c>)
 80084e6:	4b15      	ldr	r3, [pc, #84]	; (800853c <_sbrk+0x60>)
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	4b13      	ldr	r3, [pc, #76]	; (8008540 <_sbrk+0x64>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d102      	bne.n	80084fe <_sbrk+0x22>
 80084f8:	4b11      	ldr	r3, [pc, #68]	; (8008540 <_sbrk+0x64>)
 80084fa:	4a12      	ldr	r2, [pc, #72]	; (8008544 <_sbrk+0x68>)
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	4b10      	ldr	r3, [pc, #64]	; (8008540 <_sbrk+0x64>)
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4413      	add	r3, r2
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	429a      	cmp	r2, r3
 800850a:	d207      	bcs.n	800851c <_sbrk+0x40>
 800850c:	f000 f8c2 	bl	8008694 <__errno>
 8008510:	4602      	mov	r2, r0
 8008512:	230c      	movs	r3, #12
 8008514:	6013      	str	r3, [r2, #0]
 8008516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800851a:	e009      	b.n	8008530 <_sbrk+0x54>
 800851c:	4b08      	ldr	r3, [pc, #32]	; (8008540 <_sbrk+0x64>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	4b07      	ldr	r3, [pc, #28]	; (8008540 <_sbrk+0x64>)
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4413      	add	r3, r2
 800852a:	4a05      	ldr	r2, [pc, #20]	; (8008540 <_sbrk+0x64>)
 800852c:	6013      	str	r3, [r2, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20018000 	.word	0x20018000
 800853c:	00000400 	.word	0x00000400
 8008540:	200002e4 	.word	0x200002e4
 8008544:	20010978 	.word	0x20010978

08008548 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800854c:	4b17      	ldr	r3, [pc, #92]	; (80085ac <SystemInit+0x64>)
 800854e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008552:	4a16      	ldr	r2, [pc, #88]	; (80085ac <SystemInit+0x64>)
 8008554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800855c:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <SystemInit+0x68>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a13      	ldr	r2, [pc, #76]	; (80085b0 <SystemInit+0x68>)
 8008562:	f043 0301 	orr.w	r3, r3, #1
 8008566:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008568:	4b11      	ldr	r3, [pc, #68]	; (80085b0 <SystemInit+0x68>)
 800856a:	2200      	movs	r2, #0
 800856c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800856e:	4b10      	ldr	r3, [pc, #64]	; (80085b0 <SystemInit+0x68>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a0f      	ldr	r2, [pc, #60]	; (80085b0 <SystemInit+0x68>)
 8008574:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008578:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800857c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800857e:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <SystemInit+0x68>)
 8008580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008584:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008586:	4b0a      	ldr	r3, [pc, #40]	; (80085b0 <SystemInit+0x68>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <SystemInit+0x68>)
 800858c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008590:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008592:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <SystemInit+0x68>)
 8008594:	2200      	movs	r2, #0
 8008596:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008598:	4b04      	ldr	r3, [pc, #16]	; (80085ac <SystemInit+0x64>)
 800859a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800859e:	609a      	str	r2, [r3, #8]
#endif
}
 80085a0:	bf00      	nop
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	e000ed00 	.word	0xe000ed00
 80085b0:	40021000 	.word	0x40021000

080085b4 <Reset_Handler>:
 80085b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80085ec <LoopForever+0x2>
 80085b8:	f7ff ffc6 	bl	8008548 <SystemInit>
 80085bc:	2100      	movs	r1, #0
 80085be:	e003      	b.n	80085c8 <LoopCopyDataInit>

080085c0 <CopyDataInit>:
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <LoopForever+0x6>)
 80085c2:	585b      	ldr	r3, [r3, r1]
 80085c4:	5043      	str	r3, [r0, r1]
 80085c6:	3104      	adds	r1, #4

080085c8 <LoopCopyDataInit>:
 80085c8:	480a      	ldr	r0, [pc, #40]	; (80085f4 <LoopForever+0xa>)
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <LoopForever+0xe>)
 80085cc:	1842      	adds	r2, r0, r1
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d3f6      	bcc.n	80085c0 <CopyDataInit>
 80085d2:	4a0a      	ldr	r2, [pc, #40]	; (80085fc <LoopForever+0x12>)
 80085d4:	e002      	b.n	80085dc <LoopFillZerobss>

080085d6 <FillZerobss>:
 80085d6:	2300      	movs	r3, #0
 80085d8:	f842 3b04 	str.w	r3, [r2], #4

080085dc <LoopFillZerobss>:
 80085dc:	4b08      	ldr	r3, [pc, #32]	; (8008600 <LoopForever+0x16>)
 80085de:	429a      	cmp	r2, r3
 80085e0:	d3f9      	bcc.n	80085d6 <FillZerobss>
 80085e2:	f000 f85d 	bl	80086a0 <__libc_init_array>
 80085e6:	f7fd ffad 	bl	8006544 <main>

080085ea <LoopForever>:
 80085ea:	e7fe      	b.n	80085ea <LoopForever>
 80085ec:	20018000 	.word	0x20018000
 80085f0:	08009864 	.word	0x08009864
 80085f4:	20000000 	.word	0x20000000
 80085f8:	2000010c 	.word	0x2000010c
 80085fc:	2000010c 	.word	0x2000010c
 8008600:	20010974 	.word	0x20010974

08008604 <ADC1_2_IRQHandler>:
 8008604:	e7fe      	b.n	8008604 <ADC1_2_IRQHandler>
	...

08008608 <arm_sin_f32>:
 8008608:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008688 <arm_sin_f32+0x80>
 800860c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008610:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008618:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800861c:	d504      	bpl.n	8008628 <arm_sin_f32+0x20>
 800861e:	ee17 3a90 	vmov	r3, s15
 8008622:	3b01      	subs	r3, #1
 8008624:	ee07 3a90 	vmov	s15, r3
 8008628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800862c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800868c <arm_sin_f32+0x84>
 8008630:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008634:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008638:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800863c:	ee17 3a90 	vmov	r3, s15
 8008640:	b29b      	uxth	r3, r3
 8008642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008646:	d21a      	bcs.n	800867e <arm_sin_f32+0x76>
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008650:	1c59      	adds	r1, r3, #1
 8008652:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008656:	4a0e      	ldr	r2, [pc, #56]	; (8008690 <arm_sin_f32+0x88>)
 8008658:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800865c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008660:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008664:	ed93 7a00 	vldr	s14, [r3]
 8008668:	edd2 6a00 	vldr	s13, [r2]
 800866c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008670:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008678:	ee37 0a80 	vadd.f32	s0, s15, s0
 800867c:	4770      	bx	lr
 800867e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008682:	2101      	movs	r1, #1
 8008684:	2300      	movs	r3, #0
 8008686:	e7e6      	b.n	8008656 <arm_sin_f32+0x4e>
 8008688:	3e22f983 	.word	0x3e22f983
 800868c:	44000000 	.word	0x44000000
 8008690:	0800901c 	.word	0x0800901c

08008694 <__errno>:
 8008694:	4b01      	ldr	r3, [pc, #4]	; (800869c <__errno+0x8>)
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	200000a8 	.word	0x200000a8

080086a0 <__libc_init_array>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	4e0d      	ldr	r6, [pc, #52]	; (80086d8 <__libc_init_array+0x38>)
 80086a4:	4c0d      	ldr	r4, [pc, #52]	; (80086dc <__libc_init_array+0x3c>)
 80086a6:	1ba4      	subs	r4, r4, r6
 80086a8:	10a4      	asrs	r4, r4, #2
 80086aa:	2500      	movs	r5, #0
 80086ac:	42a5      	cmp	r5, r4
 80086ae:	d109      	bne.n	80086c4 <__libc_init_array+0x24>
 80086b0:	4e0b      	ldr	r6, [pc, #44]	; (80086e0 <__libc_init_array+0x40>)
 80086b2:	4c0c      	ldr	r4, [pc, #48]	; (80086e4 <__libc_init_array+0x44>)
 80086b4:	f000 fc26 	bl	8008f04 <_init>
 80086b8:	1ba4      	subs	r4, r4, r6
 80086ba:	10a4      	asrs	r4, r4, #2
 80086bc:	2500      	movs	r5, #0
 80086be:	42a5      	cmp	r5, r4
 80086c0:	d105      	bne.n	80086ce <__libc_init_array+0x2e>
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086c8:	4798      	blx	r3
 80086ca:	3501      	adds	r5, #1
 80086cc:	e7ee      	b.n	80086ac <__libc_init_array+0xc>
 80086ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086d2:	4798      	blx	r3
 80086d4:	3501      	adds	r5, #1
 80086d6:	e7f2      	b.n	80086be <__libc_init_array+0x1e>
 80086d8:	0800985c 	.word	0x0800985c
 80086dc:	0800985c 	.word	0x0800985c
 80086e0:	0800985c 	.word	0x0800985c
 80086e4:	08009860 	.word	0x08009860

080086e8 <memset>:
 80086e8:	4402      	add	r2, r0
 80086ea:	4603      	mov	r3, r0
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d100      	bne.n	80086f2 <memset+0xa>
 80086f0:	4770      	bx	lr
 80086f2:	f803 1b01 	strb.w	r1, [r3], #1
 80086f6:	e7f9      	b.n	80086ec <memset+0x4>

080086f8 <siprintf>:
 80086f8:	b40e      	push	{r1, r2, r3}
 80086fa:	b500      	push	{lr}
 80086fc:	b09c      	sub	sp, #112	; 0x70
 80086fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008700:	9002      	str	r0, [sp, #8]
 8008702:	9006      	str	r0, [sp, #24]
 8008704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008708:	4809      	ldr	r0, [pc, #36]	; (8008730 <siprintf+0x38>)
 800870a:	9107      	str	r1, [sp, #28]
 800870c:	9104      	str	r1, [sp, #16]
 800870e:	4909      	ldr	r1, [pc, #36]	; (8008734 <siprintf+0x3c>)
 8008710:	f853 2b04 	ldr.w	r2, [r3], #4
 8008714:	9105      	str	r1, [sp, #20]
 8008716:	6800      	ldr	r0, [r0, #0]
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	a902      	add	r1, sp, #8
 800871c:	f000 f866 	bl	80087ec <_svfiprintf_r>
 8008720:	9b02      	ldr	r3, [sp, #8]
 8008722:	2200      	movs	r2, #0
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	b01c      	add	sp, #112	; 0x70
 8008728:	f85d eb04 	ldr.w	lr, [sp], #4
 800872c:	b003      	add	sp, #12
 800872e:	4770      	bx	lr
 8008730:	200000a8 	.word	0x200000a8
 8008734:	ffff0208 	.word	0xffff0208

08008738 <__ssputs_r>:
 8008738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	688e      	ldr	r6, [r1, #8]
 800873e:	429e      	cmp	r6, r3
 8008740:	4682      	mov	sl, r0
 8008742:	460c      	mov	r4, r1
 8008744:	4690      	mov	r8, r2
 8008746:	4699      	mov	r9, r3
 8008748:	d837      	bhi.n	80087ba <__ssputs_r+0x82>
 800874a:	898a      	ldrh	r2, [r1, #12]
 800874c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008750:	d031      	beq.n	80087b6 <__ssputs_r+0x7e>
 8008752:	6825      	ldr	r5, [r4, #0]
 8008754:	6909      	ldr	r1, [r1, #16]
 8008756:	1a6f      	subs	r7, r5, r1
 8008758:	6965      	ldr	r5, [r4, #20]
 800875a:	2302      	movs	r3, #2
 800875c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008760:	fb95 f5f3 	sdiv	r5, r5, r3
 8008764:	f109 0301 	add.w	r3, r9, #1
 8008768:	443b      	add	r3, r7
 800876a:	429d      	cmp	r5, r3
 800876c:	bf38      	it	cc
 800876e:	461d      	movcc	r5, r3
 8008770:	0553      	lsls	r3, r2, #21
 8008772:	d530      	bpl.n	80087d6 <__ssputs_r+0x9e>
 8008774:	4629      	mov	r1, r5
 8008776:	f000 fb2b 	bl	8008dd0 <_malloc_r>
 800877a:	4606      	mov	r6, r0
 800877c:	b950      	cbnz	r0, 8008794 <__ssputs_r+0x5c>
 800877e:	230c      	movs	r3, #12
 8008780:	f8ca 3000 	str.w	r3, [sl]
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008794:	463a      	mov	r2, r7
 8008796:	6921      	ldr	r1, [r4, #16]
 8008798:	f000 faa8 	bl	8008cec <memcpy>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	6126      	str	r6, [r4, #16]
 80087aa:	6165      	str	r5, [r4, #20]
 80087ac:	443e      	add	r6, r7
 80087ae:	1bed      	subs	r5, r5, r7
 80087b0:	6026      	str	r6, [r4, #0]
 80087b2:	60a5      	str	r5, [r4, #8]
 80087b4:	464e      	mov	r6, r9
 80087b6:	454e      	cmp	r6, r9
 80087b8:	d900      	bls.n	80087bc <__ssputs_r+0x84>
 80087ba:	464e      	mov	r6, r9
 80087bc:	4632      	mov	r2, r6
 80087be:	4641      	mov	r1, r8
 80087c0:	6820      	ldr	r0, [r4, #0]
 80087c2:	f000 fa9e 	bl	8008d02 <memmove>
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	1b9b      	subs	r3, r3, r6
 80087ca:	60a3      	str	r3, [r4, #8]
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	441e      	add	r6, r3
 80087d0:	6026      	str	r6, [r4, #0]
 80087d2:	2000      	movs	r0, #0
 80087d4:	e7dc      	b.n	8008790 <__ssputs_r+0x58>
 80087d6:	462a      	mov	r2, r5
 80087d8:	f000 fb54 	bl	8008e84 <_realloc_r>
 80087dc:	4606      	mov	r6, r0
 80087de:	2800      	cmp	r0, #0
 80087e0:	d1e2      	bne.n	80087a8 <__ssputs_r+0x70>
 80087e2:	6921      	ldr	r1, [r4, #16]
 80087e4:	4650      	mov	r0, sl
 80087e6:	f000 faa5 	bl	8008d34 <_free_r>
 80087ea:	e7c8      	b.n	800877e <__ssputs_r+0x46>

080087ec <_svfiprintf_r>:
 80087ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f0:	461d      	mov	r5, r3
 80087f2:	898b      	ldrh	r3, [r1, #12]
 80087f4:	061f      	lsls	r7, r3, #24
 80087f6:	b09d      	sub	sp, #116	; 0x74
 80087f8:	4680      	mov	r8, r0
 80087fa:	460c      	mov	r4, r1
 80087fc:	4616      	mov	r6, r2
 80087fe:	d50f      	bpl.n	8008820 <_svfiprintf_r+0x34>
 8008800:	690b      	ldr	r3, [r1, #16]
 8008802:	b96b      	cbnz	r3, 8008820 <_svfiprintf_r+0x34>
 8008804:	2140      	movs	r1, #64	; 0x40
 8008806:	f000 fae3 	bl	8008dd0 <_malloc_r>
 800880a:	6020      	str	r0, [r4, #0]
 800880c:	6120      	str	r0, [r4, #16]
 800880e:	b928      	cbnz	r0, 800881c <_svfiprintf_r+0x30>
 8008810:	230c      	movs	r3, #12
 8008812:	f8c8 3000 	str.w	r3, [r8]
 8008816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800881a:	e0c8      	b.n	80089ae <_svfiprintf_r+0x1c2>
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	6163      	str	r3, [r4, #20]
 8008820:	2300      	movs	r3, #0
 8008822:	9309      	str	r3, [sp, #36]	; 0x24
 8008824:	2320      	movs	r3, #32
 8008826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800882a:	2330      	movs	r3, #48	; 0x30
 800882c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008830:	9503      	str	r5, [sp, #12]
 8008832:	f04f 0b01 	mov.w	fp, #1
 8008836:	4637      	mov	r7, r6
 8008838:	463d      	mov	r5, r7
 800883a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800883e:	b10b      	cbz	r3, 8008844 <_svfiprintf_r+0x58>
 8008840:	2b25      	cmp	r3, #37	; 0x25
 8008842:	d13e      	bne.n	80088c2 <_svfiprintf_r+0xd6>
 8008844:	ebb7 0a06 	subs.w	sl, r7, r6
 8008848:	d00b      	beq.n	8008862 <_svfiprintf_r+0x76>
 800884a:	4653      	mov	r3, sl
 800884c:	4632      	mov	r2, r6
 800884e:	4621      	mov	r1, r4
 8008850:	4640      	mov	r0, r8
 8008852:	f7ff ff71 	bl	8008738 <__ssputs_r>
 8008856:	3001      	adds	r0, #1
 8008858:	f000 80a4 	beq.w	80089a4 <_svfiprintf_r+0x1b8>
 800885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885e:	4453      	add	r3, sl
 8008860:	9309      	str	r3, [sp, #36]	; 0x24
 8008862:	783b      	ldrb	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 809d 	beq.w	80089a4 <_svfiprintf_r+0x1b8>
 800886a:	2300      	movs	r3, #0
 800886c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	9307      	str	r3, [sp, #28]
 8008878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800887c:	931a      	str	r3, [sp, #104]	; 0x68
 800887e:	462f      	mov	r7, r5
 8008880:	2205      	movs	r2, #5
 8008882:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008886:	4850      	ldr	r0, [pc, #320]	; (80089c8 <_svfiprintf_r+0x1dc>)
 8008888:	f7f7 fca2 	bl	80001d0 <memchr>
 800888c:	9b04      	ldr	r3, [sp, #16]
 800888e:	b9d0      	cbnz	r0, 80088c6 <_svfiprintf_r+0xda>
 8008890:	06d9      	lsls	r1, r3, #27
 8008892:	bf44      	itt	mi
 8008894:	2220      	movmi	r2, #32
 8008896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800889a:	071a      	lsls	r2, r3, #28
 800889c:	bf44      	itt	mi
 800889e:	222b      	movmi	r2, #43	; 0x2b
 80088a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088a4:	782a      	ldrb	r2, [r5, #0]
 80088a6:	2a2a      	cmp	r2, #42	; 0x2a
 80088a8:	d015      	beq.n	80088d6 <_svfiprintf_r+0xea>
 80088aa:	9a07      	ldr	r2, [sp, #28]
 80088ac:	462f      	mov	r7, r5
 80088ae:	2000      	movs	r0, #0
 80088b0:	250a      	movs	r5, #10
 80088b2:	4639      	mov	r1, r7
 80088b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088b8:	3b30      	subs	r3, #48	; 0x30
 80088ba:	2b09      	cmp	r3, #9
 80088bc:	d94d      	bls.n	800895a <_svfiprintf_r+0x16e>
 80088be:	b1b8      	cbz	r0, 80088f0 <_svfiprintf_r+0x104>
 80088c0:	e00f      	b.n	80088e2 <_svfiprintf_r+0xf6>
 80088c2:	462f      	mov	r7, r5
 80088c4:	e7b8      	b.n	8008838 <_svfiprintf_r+0x4c>
 80088c6:	4a40      	ldr	r2, [pc, #256]	; (80089c8 <_svfiprintf_r+0x1dc>)
 80088c8:	1a80      	subs	r0, r0, r2
 80088ca:	fa0b f000 	lsl.w	r0, fp, r0
 80088ce:	4318      	orrs	r0, r3
 80088d0:	9004      	str	r0, [sp, #16]
 80088d2:	463d      	mov	r5, r7
 80088d4:	e7d3      	b.n	800887e <_svfiprintf_r+0x92>
 80088d6:	9a03      	ldr	r2, [sp, #12]
 80088d8:	1d11      	adds	r1, r2, #4
 80088da:	6812      	ldr	r2, [r2, #0]
 80088dc:	9103      	str	r1, [sp, #12]
 80088de:	2a00      	cmp	r2, #0
 80088e0:	db01      	blt.n	80088e6 <_svfiprintf_r+0xfa>
 80088e2:	9207      	str	r2, [sp, #28]
 80088e4:	e004      	b.n	80088f0 <_svfiprintf_r+0x104>
 80088e6:	4252      	negs	r2, r2
 80088e8:	f043 0302 	orr.w	r3, r3, #2
 80088ec:	9207      	str	r2, [sp, #28]
 80088ee:	9304      	str	r3, [sp, #16]
 80088f0:	783b      	ldrb	r3, [r7, #0]
 80088f2:	2b2e      	cmp	r3, #46	; 0x2e
 80088f4:	d10c      	bne.n	8008910 <_svfiprintf_r+0x124>
 80088f6:	787b      	ldrb	r3, [r7, #1]
 80088f8:	2b2a      	cmp	r3, #42	; 0x2a
 80088fa:	d133      	bne.n	8008964 <_svfiprintf_r+0x178>
 80088fc:	9b03      	ldr	r3, [sp, #12]
 80088fe:	1d1a      	adds	r2, r3, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	9203      	str	r2, [sp, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	bfb8      	it	lt
 8008908:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800890c:	3702      	adds	r7, #2
 800890e:	9305      	str	r3, [sp, #20]
 8008910:	4d2e      	ldr	r5, [pc, #184]	; (80089cc <_svfiprintf_r+0x1e0>)
 8008912:	7839      	ldrb	r1, [r7, #0]
 8008914:	2203      	movs	r2, #3
 8008916:	4628      	mov	r0, r5
 8008918:	f7f7 fc5a 	bl	80001d0 <memchr>
 800891c:	b138      	cbz	r0, 800892e <_svfiprintf_r+0x142>
 800891e:	2340      	movs	r3, #64	; 0x40
 8008920:	1b40      	subs	r0, r0, r5
 8008922:	fa03 f000 	lsl.w	r0, r3, r0
 8008926:	9b04      	ldr	r3, [sp, #16]
 8008928:	4303      	orrs	r3, r0
 800892a:	3701      	adds	r7, #1
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	7839      	ldrb	r1, [r7, #0]
 8008930:	4827      	ldr	r0, [pc, #156]	; (80089d0 <_svfiprintf_r+0x1e4>)
 8008932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008936:	2206      	movs	r2, #6
 8008938:	1c7e      	adds	r6, r7, #1
 800893a:	f7f7 fc49 	bl	80001d0 <memchr>
 800893e:	2800      	cmp	r0, #0
 8008940:	d038      	beq.n	80089b4 <_svfiprintf_r+0x1c8>
 8008942:	4b24      	ldr	r3, [pc, #144]	; (80089d4 <_svfiprintf_r+0x1e8>)
 8008944:	bb13      	cbnz	r3, 800898c <_svfiprintf_r+0x1a0>
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	3307      	adds	r3, #7
 800894a:	f023 0307 	bic.w	r3, r3, #7
 800894e:	3308      	adds	r3, #8
 8008950:	9303      	str	r3, [sp, #12]
 8008952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008954:	444b      	add	r3, r9
 8008956:	9309      	str	r3, [sp, #36]	; 0x24
 8008958:	e76d      	b.n	8008836 <_svfiprintf_r+0x4a>
 800895a:	fb05 3202 	mla	r2, r5, r2, r3
 800895e:	2001      	movs	r0, #1
 8008960:	460f      	mov	r7, r1
 8008962:	e7a6      	b.n	80088b2 <_svfiprintf_r+0xc6>
 8008964:	2300      	movs	r3, #0
 8008966:	3701      	adds	r7, #1
 8008968:	9305      	str	r3, [sp, #20]
 800896a:	4619      	mov	r1, r3
 800896c:	250a      	movs	r5, #10
 800896e:	4638      	mov	r0, r7
 8008970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008974:	3a30      	subs	r2, #48	; 0x30
 8008976:	2a09      	cmp	r2, #9
 8008978:	d903      	bls.n	8008982 <_svfiprintf_r+0x196>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0c8      	beq.n	8008910 <_svfiprintf_r+0x124>
 800897e:	9105      	str	r1, [sp, #20]
 8008980:	e7c6      	b.n	8008910 <_svfiprintf_r+0x124>
 8008982:	fb05 2101 	mla	r1, r5, r1, r2
 8008986:	2301      	movs	r3, #1
 8008988:	4607      	mov	r7, r0
 800898a:	e7f0      	b.n	800896e <_svfiprintf_r+0x182>
 800898c:	ab03      	add	r3, sp, #12
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4622      	mov	r2, r4
 8008992:	4b11      	ldr	r3, [pc, #68]	; (80089d8 <_svfiprintf_r+0x1ec>)
 8008994:	a904      	add	r1, sp, #16
 8008996:	4640      	mov	r0, r8
 8008998:	f3af 8000 	nop.w
 800899c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80089a0:	4681      	mov	r9, r0
 80089a2:	d1d6      	bne.n	8008952 <_svfiprintf_r+0x166>
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	065b      	lsls	r3, r3, #25
 80089a8:	f53f af35 	bmi.w	8008816 <_svfiprintf_r+0x2a>
 80089ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ae:	b01d      	add	sp, #116	; 0x74
 80089b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b4:	ab03      	add	r3, sp, #12
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	4622      	mov	r2, r4
 80089ba:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <_svfiprintf_r+0x1ec>)
 80089bc:	a904      	add	r1, sp, #16
 80089be:	4640      	mov	r0, r8
 80089c0:	f000 f882 	bl	8008ac8 <_printf_i>
 80089c4:	e7ea      	b.n	800899c <_svfiprintf_r+0x1b0>
 80089c6:	bf00      	nop
 80089c8:	08009820 	.word	0x08009820
 80089cc:	08009826 	.word	0x08009826
 80089d0:	0800982a 	.word	0x0800982a
 80089d4:	00000000 	.word	0x00000000
 80089d8:	08008739 	.word	0x08008739

080089dc <_printf_common>:
 80089dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e0:	4691      	mov	r9, r2
 80089e2:	461f      	mov	r7, r3
 80089e4:	688a      	ldr	r2, [r1, #8]
 80089e6:	690b      	ldr	r3, [r1, #16]
 80089e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089ec:	4293      	cmp	r3, r2
 80089ee:	bfb8      	it	lt
 80089f0:	4613      	movlt	r3, r2
 80089f2:	f8c9 3000 	str.w	r3, [r9]
 80089f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089fa:	4606      	mov	r6, r0
 80089fc:	460c      	mov	r4, r1
 80089fe:	b112      	cbz	r2, 8008a06 <_printf_common+0x2a>
 8008a00:	3301      	adds	r3, #1
 8008a02:	f8c9 3000 	str.w	r3, [r9]
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	0699      	lsls	r1, r3, #26
 8008a0a:	bf42      	ittt	mi
 8008a0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a10:	3302      	addmi	r3, #2
 8008a12:	f8c9 3000 	strmi.w	r3, [r9]
 8008a16:	6825      	ldr	r5, [r4, #0]
 8008a18:	f015 0506 	ands.w	r5, r5, #6
 8008a1c:	d107      	bne.n	8008a2e <_printf_common+0x52>
 8008a1e:	f104 0a19 	add.w	sl, r4, #25
 8008a22:	68e3      	ldr	r3, [r4, #12]
 8008a24:	f8d9 2000 	ldr.w	r2, [r9]
 8008a28:	1a9b      	subs	r3, r3, r2
 8008a2a:	42ab      	cmp	r3, r5
 8008a2c:	dc28      	bgt.n	8008a80 <_printf_common+0xa4>
 8008a2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a32:	6822      	ldr	r2, [r4, #0]
 8008a34:	3300      	adds	r3, #0
 8008a36:	bf18      	it	ne
 8008a38:	2301      	movne	r3, #1
 8008a3a:	0692      	lsls	r2, r2, #26
 8008a3c:	d42d      	bmi.n	8008a9a <_printf_common+0xbe>
 8008a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a42:	4639      	mov	r1, r7
 8008a44:	4630      	mov	r0, r6
 8008a46:	47c0      	blx	r8
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d020      	beq.n	8008a8e <_printf_common+0xb2>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	68e5      	ldr	r5, [r4, #12]
 8008a50:	f8d9 2000 	ldr.w	r2, [r9]
 8008a54:	f003 0306 	and.w	r3, r3, #6
 8008a58:	2b04      	cmp	r3, #4
 8008a5a:	bf08      	it	eq
 8008a5c:	1aad      	subeq	r5, r5, r2
 8008a5e:	68a3      	ldr	r3, [r4, #8]
 8008a60:	6922      	ldr	r2, [r4, #16]
 8008a62:	bf0c      	ite	eq
 8008a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a68:	2500      	movne	r5, #0
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	bfc4      	itt	gt
 8008a6e:	1a9b      	subgt	r3, r3, r2
 8008a70:	18ed      	addgt	r5, r5, r3
 8008a72:	f04f 0900 	mov.w	r9, #0
 8008a76:	341a      	adds	r4, #26
 8008a78:	454d      	cmp	r5, r9
 8008a7a:	d11a      	bne.n	8008ab2 <_printf_common+0xd6>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	e008      	b.n	8008a92 <_printf_common+0xb6>
 8008a80:	2301      	movs	r3, #1
 8008a82:	4652      	mov	r2, sl
 8008a84:	4639      	mov	r1, r7
 8008a86:	4630      	mov	r0, r6
 8008a88:	47c0      	blx	r8
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	d103      	bne.n	8008a96 <_printf_common+0xba>
 8008a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a96:	3501      	adds	r5, #1
 8008a98:	e7c3      	b.n	8008a22 <_printf_common+0x46>
 8008a9a:	18e1      	adds	r1, r4, r3
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	2030      	movs	r0, #48	; 0x30
 8008aa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008aa4:	4422      	add	r2, r4
 8008aa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008aae:	3302      	adds	r3, #2
 8008ab0:	e7c5      	b.n	8008a3e <_printf_common+0x62>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	4630      	mov	r0, r6
 8008aba:	47c0      	blx	r8
 8008abc:	3001      	adds	r0, #1
 8008abe:	d0e6      	beq.n	8008a8e <_printf_common+0xb2>
 8008ac0:	f109 0901 	add.w	r9, r9, #1
 8008ac4:	e7d8      	b.n	8008a78 <_printf_common+0x9c>
	...

08008ac8 <_printf_i>:
 8008ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008acc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	7e09      	ldrb	r1, [r1, #24]
 8008ad4:	b085      	sub	sp, #20
 8008ad6:	296e      	cmp	r1, #110	; 0x6e
 8008ad8:	4617      	mov	r7, r2
 8008ada:	4606      	mov	r6, r0
 8008adc:	4698      	mov	r8, r3
 8008ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ae0:	f000 80b3 	beq.w	8008c4a <_printf_i+0x182>
 8008ae4:	d822      	bhi.n	8008b2c <_printf_i+0x64>
 8008ae6:	2963      	cmp	r1, #99	; 0x63
 8008ae8:	d036      	beq.n	8008b58 <_printf_i+0x90>
 8008aea:	d80a      	bhi.n	8008b02 <_printf_i+0x3a>
 8008aec:	2900      	cmp	r1, #0
 8008aee:	f000 80b9 	beq.w	8008c64 <_printf_i+0x19c>
 8008af2:	2958      	cmp	r1, #88	; 0x58
 8008af4:	f000 8083 	beq.w	8008bfe <_printf_i+0x136>
 8008af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008afc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b00:	e032      	b.n	8008b68 <_printf_i+0xa0>
 8008b02:	2964      	cmp	r1, #100	; 0x64
 8008b04:	d001      	beq.n	8008b0a <_printf_i+0x42>
 8008b06:	2969      	cmp	r1, #105	; 0x69
 8008b08:	d1f6      	bne.n	8008af8 <_printf_i+0x30>
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	6813      	ldr	r3, [r2, #0]
 8008b0e:	0605      	lsls	r5, r0, #24
 8008b10:	f103 0104 	add.w	r1, r3, #4
 8008b14:	d52a      	bpl.n	8008b6c <_printf_i+0xa4>
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6011      	str	r1, [r2, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da03      	bge.n	8008b26 <_printf_i+0x5e>
 8008b1e:	222d      	movs	r2, #45	; 0x2d
 8008b20:	425b      	negs	r3, r3
 8008b22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b26:	486f      	ldr	r0, [pc, #444]	; (8008ce4 <_printf_i+0x21c>)
 8008b28:	220a      	movs	r2, #10
 8008b2a:	e039      	b.n	8008ba0 <_printf_i+0xd8>
 8008b2c:	2973      	cmp	r1, #115	; 0x73
 8008b2e:	f000 809d 	beq.w	8008c6c <_printf_i+0x1a4>
 8008b32:	d808      	bhi.n	8008b46 <_printf_i+0x7e>
 8008b34:	296f      	cmp	r1, #111	; 0x6f
 8008b36:	d020      	beq.n	8008b7a <_printf_i+0xb2>
 8008b38:	2970      	cmp	r1, #112	; 0x70
 8008b3a:	d1dd      	bne.n	8008af8 <_printf_i+0x30>
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	f043 0320 	orr.w	r3, r3, #32
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	e003      	b.n	8008b4e <_printf_i+0x86>
 8008b46:	2975      	cmp	r1, #117	; 0x75
 8008b48:	d017      	beq.n	8008b7a <_printf_i+0xb2>
 8008b4a:	2978      	cmp	r1, #120	; 0x78
 8008b4c:	d1d4      	bne.n	8008af8 <_printf_i+0x30>
 8008b4e:	2378      	movs	r3, #120	; 0x78
 8008b50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b54:	4864      	ldr	r0, [pc, #400]	; (8008ce8 <_printf_i+0x220>)
 8008b56:	e055      	b.n	8008c04 <_printf_i+0x13c>
 8008b58:	6813      	ldr	r3, [r2, #0]
 8008b5a:	1d19      	adds	r1, r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6011      	str	r1, [r2, #0]
 8008b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e08c      	b.n	8008c86 <_printf_i+0x1be>
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6011      	str	r1, [r2, #0]
 8008b70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b74:	bf18      	it	ne
 8008b76:	b21b      	sxthne	r3, r3
 8008b78:	e7cf      	b.n	8008b1a <_printf_i+0x52>
 8008b7a:	6813      	ldr	r3, [r2, #0]
 8008b7c:	6825      	ldr	r5, [r4, #0]
 8008b7e:	1d18      	adds	r0, r3, #4
 8008b80:	6010      	str	r0, [r2, #0]
 8008b82:	0628      	lsls	r0, r5, #24
 8008b84:	d501      	bpl.n	8008b8a <_printf_i+0xc2>
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	e002      	b.n	8008b90 <_printf_i+0xc8>
 8008b8a:	0668      	lsls	r0, r5, #25
 8008b8c:	d5fb      	bpl.n	8008b86 <_printf_i+0xbe>
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	4854      	ldr	r0, [pc, #336]	; (8008ce4 <_printf_i+0x21c>)
 8008b92:	296f      	cmp	r1, #111	; 0x6f
 8008b94:	bf14      	ite	ne
 8008b96:	220a      	movne	r2, #10
 8008b98:	2208      	moveq	r2, #8
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ba0:	6865      	ldr	r5, [r4, #4]
 8008ba2:	60a5      	str	r5, [r4, #8]
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	f2c0 8095 	blt.w	8008cd4 <_printf_i+0x20c>
 8008baa:	6821      	ldr	r1, [r4, #0]
 8008bac:	f021 0104 	bic.w	r1, r1, #4
 8008bb0:	6021      	str	r1, [r4, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d13d      	bne.n	8008c32 <_printf_i+0x16a>
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	f040 808e 	bne.w	8008cd8 <_printf_i+0x210>
 8008bbc:	4665      	mov	r5, ip
 8008bbe:	2a08      	cmp	r2, #8
 8008bc0:	d10b      	bne.n	8008bda <_printf_i+0x112>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	07db      	lsls	r3, r3, #31
 8008bc6:	d508      	bpl.n	8008bda <_printf_i+0x112>
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	6862      	ldr	r2, [r4, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	bfde      	ittt	le
 8008bd0:	2330      	movle	r3, #48	; 0x30
 8008bd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bd6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008bda:	ebac 0305 	sub.w	r3, ip, r5
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	f8cd 8000 	str.w	r8, [sp]
 8008be4:	463b      	mov	r3, r7
 8008be6:	aa03      	add	r2, sp, #12
 8008be8:	4621      	mov	r1, r4
 8008bea:	4630      	mov	r0, r6
 8008bec:	f7ff fef6 	bl	80089dc <_printf_common>
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d14d      	bne.n	8008c90 <_printf_i+0x1c8>
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bf8:	b005      	add	sp, #20
 8008bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bfe:	4839      	ldr	r0, [pc, #228]	; (8008ce4 <_printf_i+0x21c>)
 8008c00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008c04:	6813      	ldr	r3, [r2, #0]
 8008c06:	6821      	ldr	r1, [r4, #0]
 8008c08:	1d1d      	adds	r5, r3, #4
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6015      	str	r5, [r2, #0]
 8008c0e:	060a      	lsls	r2, r1, #24
 8008c10:	d50b      	bpl.n	8008c2a <_printf_i+0x162>
 8008c12:	07ca      	lsls	r2, r1, #31
 8008c14:	bf44      	itt	mi
 8008c16:	f041 0120 	orrmi.w	r1, r1, #32
 8008c1a:	6021      	strmi	r1, [r4, #0]
 8008c1c:	b91b      	cbnz	r3, 8008c26 <_printf_i+0x15e>
 8008c1e:	6822      	ldr	r2, [r4, #0]
 8008c20:	f022 0220 	bic.w	r2, r2, #32
 8008c24:	6022      	str	r2, [r4, #0]
 8008c26:	2210      	movs	r2, #16
 8008c28:	e7b7      	b.n	8008b9a <_printf_i+0xd2>
 8008c2a:	064d      	lsls	r5, r1, #25
 8008c2c:	bf48      	it	mi
 8008c2e:	b29b      	uxthmi	r3, r3
 8008c30:	e7ef      	b.n	8008c12 <_printf_i+0x14a>
 8008c32:	4665      	mov	r5, ip
 8008c34:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c38:	fb02 3311 	mls	r3, r2, r1, r3
 8008c3c:	5cc3      	ldrb	r3, [r0, r3]
 8008c3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c42:	460b      	mov	r3, r1
 8008c44:	2900      	cmp	r1, #0
 8008c46:	d1f5      	bne.n	8008c34 <_printf_i+0x16c>
 8008c48:	e7b9      	b.n	8008bbe <_printf_i+0xf6>
 8008c4a:	6813      	ldr	r3, [r2, #0]
 8008c4c:	6825      	ldr	r5, [r4, #0]
 8008c4e:	6961      	ldr	r1, [r4, #20]
 8008c50:	1d18      	adds	r0, r3, #4
 8008c52:	6010      	str	r0, [r2, #0]
 8008c54:	0628      	lsls	r0, r5, #24
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	d501      	bpl.n	8008c5e <_printf_i+0x196>
 8008c5a:	6019      	str	r1, [r3, #0]
 8008c5c:	e002      	b.n	8008c64 <_printf_i+0x19c>
 8008c5e:	066a      	lsls	r2, r5, #25
 8008c60:	d5fb      	bpl.n	8008c5a <_printf_i+0x192>
 8008c62:	8019      	strh	r1, [r3, #0]
 8008c64:	2300      	movs	r3, #0
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	4665      	mov	r5, ip
 8008c6a:	e7b9      	b.n	8008be0 <_printf_i+0x118>
 8008c6c:	6813      	ldr	r3, [r2, #0]
 8008c6e:	1d19      	adds	r1, r3, #4
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	681d      	ldr	r5, [r3, #0]
 8008c74:	6862      	ldr	r2, [r4, #4]
 8008c76:	2100      	movs	r1, #0
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f7f7 faa9 	bl	80001d0 <memchr>
 8008c7e:	b108      	cbz	r0, 8008c84 <_printf_i+0x1bc>
 8008c80:	1b40      	subs	r0, r0, r5
 8008c82:	6060      	str	r0, [r4, #4]
 8008c84:	6863      	ldr	r3, [r4, #4]
 8008c86:	6123      	str	r3, [r4, #16]
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c8e:	e7a7      	b.n	8008be0 <_printf_i+0x118>
 8008c90:	6923      	ldr	r3, [r4, #16]
 8008c92:	462a      	mov	r2, r5
 8008c94:	4639      	mov	r1, r7
 8008c96:	4630      	mov	r0, r6
 8008c98:	47c0      	blx	r8
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	d0aa      	beq.n	8008bf4 <_printf_i+0x12c>
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	079b      	lsls	r3, r3, #30
 8008ca2:	d413      	bmi.n	8008ccc <_printf_i+0x204>
 8008ca4:	68e0      	ldr	r0, [r4, #12]
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	4298      	cmp	r0, r3
 8008caa:	bfb8      	it	lt
 8008cac:	4618      	movlt	r0, r3
 8008cae:	e7a3      	b.n	8008bf8 <_printf_i+0x130>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	464a      	mov	r2, r9
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	47c0      	blx	r8
 8008cba:	3001      	adds	r0, #1
 8008cbc:	d09a      	beq.n	8008bf4 <_printf_i+0x12c>
 8008cbe:	3501      	adds	r5, #1
 8008cc0:	68e3      	ldr	r3, [r4, #12]
 8008cc2:	9a03      	ldr	r2, [sp, #12]
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	42ab      	cmp	r3, r5
 8008cc8:	dcf2      	bgt.n	8008cb0 <_printf_i+0x1e8>
 8008cca:	e7eb      	b.n	8008ca4 <_printf_i+0x1dc>
 8008ccc:	2500      	movs	r5, #0
 8008cce:	f104 0919 	add.w	r9, r4, #25
 8008cd2:	e7f5      	b.n	8008cc0 <_printf_i+0x1f8>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1ac      	bne.n	8008c32 <_printf_i+0x16a>
 8008cd8:	7803      	ldrb	r3, [r0, #0]
 8008cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce2:	e76c      	b.n	8008bbe <_printf_i+0xf6>
 8008ce4:	08009831 	.word	0x08009831
 8008ce8:	08009842 	.word	0x08009842

08008cec <memcpy>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	1e43      	subs	r3, r0, #1
 8008cf0:	440a      	add	r2, r1
 8008cf2:	4291      	cmp	r1, r2
 8008cf4:	d100      	bne.n	8008cf8 <memcpy+0xc>
 8008cf6:	bd10      	pop	{r4, pc}
 8008cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d00:	e7f7      	b.n	8008cf2 <memcpy+0x6>

08008d02 <memmove>:
 8008d02:	4288      	cmp	r0, r1
 8008d04:	b510      	push	{r4, lr}
 8008d06:	eb01 0302 	add.w	r3, r1, r2
 8008d0a:	d807      	bhi.n	8008d1c <memmove+0x1a>
 8008d0c:	1e42      	subs	r2, r0, #1
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	d00a      	beq.n	8008d28 <memmove+0x26>
 8008d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d1a:	e7f8      	b.n	8008d0e <memmove+0xc>
 8008d1c:	4283      	cmp	r3, r0
 8008d1e:	d9f5      	bls.n	8008d0c <memmove+0xa>
 8008d20:	1881      	adds	r1, r0, r2
 8008d22:	1ad2      	subs	r2, r2, r3
 8008d24:	42d3      	cmn	r3, r2
 8008d26:	d100      	bne.n	8008d2a <memmove+0x28>
 8008d28:	bd10      	pop	{r4, pc}
 8008d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d32:	e7f7      	b.n	8008d24 <memmove+0x22>

08008d34 <_free_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4605      	mov	r5, r0
 8008d38:	2900      	cmp	r1, #0
 8008d3a:	d045      	beq.n	8008dc8 <_free_r+0x94>
 8008d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d40:	1f0c      	subs	r4, r1, #4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	bfb8      	it	lt
 8008d46:	18e4      	addlt	r4, r4, r3
 8008d48:	f000 f8d2 	bl	8008ef0 <__malloc_lock>
 8008d4c:	4a1f      	ldr	r2, [pc, #124]	; (8008dcc <_free_r+0x98>)
 8008d4e:	6813      	ldr	r3, [r2, #0]
 8008d50:	4610      	mov	r0, r2
 8008d52:	b933      	cbnz	r3, 8008d62 <_free_r+0x2e>
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	6014      	str	r4, [r2, #0]
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d5e:	f000 b8c8 	b.w	8008ef2 <__malloc_unlock>
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	d90c      	bls.n	8008d80 <_free_r+0x4c>
 8008d66:	6821      	ldr	r1, [r4, #0]
 8008d68:	1862      	adds	r2, r4, r1
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	bf04      	itt	eq
 8008d6e:	681a      	ldreq	r2, [r3, #0]
 8008d70:	685b      	ldreq	r3, [r3, #4]
 8008d72:	6063      	str	r3, [r4, #4]
 8008d74:	bf04      	itt	eq
 8008d76:	1852      	addeq	r2, r2, r1
 8008d78:	6022      	streq	r2, [r4, #0]
 8008d7a:	6004      	str	r4, [r0, #0]
 8008d7c:	e7ec      	b.n	8008d58 <_free_r+0x24>
 8008d7e:	4613      	mov	r3, r2
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	b10a      	cbz	r2, 8008d88 <_free_r+0x54>
 8008d84:	42a2      	cmp	r2, r4
 8008d86:	d9fa      	bls.n	8008d7e <_free_r+0x4a>
 8008d88:	6819      	ldr	r1, [r3, #0]
 8008d8a:	1858      	adds	r0, r3, r1
 8008d8c:	42a0      	cmp	r0, r4
 8008d8e:	d10b      	bne.n	8008da8 <_free_r+0x74>
 8008d90:	6820      	ldr	r0, [r4, #0]
 8008d92:	4401      	add	r1, r0
 8008d94:	1858      	adds	r0, r3, r1
 8008d96:	4282      	cmp	r2, r0
 8008d98:	6019      	str	r1, [r3, #0]
 8008d9a:	d1dd      	bne.n	8008d58 <_free_r+0x24>
 8008d9c:	6810      	ldr	r0, [r2, #0]
 8008d9e:	6852      	ldr	r2, [r2, #4]
 8008da0:	605a      	str	r2, [r3, #4]
 8008da2:	4401      	add	r1, r0
 8008da4:	6019      	str	r1, [r3, #0]
 8008da6:	e7d7      	b.n	8008d58 <_free_r+0x24>
 8008da8:	d902      	bls.n	8008db0 <_free_r+0x7c>
 8008daa:	230c      	movs	r3, #12
 8008dac:	602b      	str	r3, [r5, #0]
 8008dae:	e7d3      	b.n	8008d58 <_free_r+0x24>
 8008db0:	6820      	ldr	r0, [r4, #0]
 8008db2:	1821      	adds	r1, r4, r0
 8008db4:	428a      	cmp	r2, r1
 8008db6:	bf04      	itt	eq
 8008db8:	6811      	ldreq	r1, [r2, #0]
 8008dba:	6852      	ldreq	r2, [r2, #4]
 8008dbc:	6062      	str	r2, [r4, #4]
 8008dbe:	bf04      	itt	eq
 8008dc0:	1809      	addeq	r1, r1, r0
 8008dc2:	6021      	streq	r1, [r4, #0]
 8008dc4:	605c      	str	r4, [r3, #4]
 8008dc6:	e7c7      	b.n	8008d58 <_free_r+0x24>
 8008dc8:	bd38      	pop	{r3, r4, r5, pc}
 8008dca:	bf00      	nop
 8008dcc:	200002e8 	.word	0x200002e8

08008dd0 <_malloc_r>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	1ccd      	adds	r5, r1, #3
 8008dd4:	f025 0503 	bic.w	r5, r5, #3
 8008dd8:	3508      	adds	r5, #8
 8008dda:	2d0c      	cmp	r5, #12
 8008ddc:	bf38      	it	cc
 8008dde:	250c      	movcc	r5, #12
 8008de0:	2d00      	cmp	r5, #0
 8008de2:	4606      	mov	r6, r0
 8008de4:	db01      	blt.n	8008dea <_malloc_r+0x1a>
 8008de6:	42a9      	cmp	r1, r5
 8008de8:	d903      	bls.n	8008df2 <_malloc_r+0x22>
 8008dea:	230c      	movs	r3, #12
 8008dec:	6033      	str	r3, [r6, #0]
 8008dee:	2000      	movs	r0, #0
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	f000 f87d 	bl	8008ef0 <__malloc_lock>
 8008df6:	4a21      	ldr	r2, [pc, #132]	; (8008e7c <_malloc_r+0xac>)
 8008df8:	6814      	ldr	r4, [r2, #0]
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	b991      	cbnz	r1, 8008e24 <_malloc_r+0x54>
 8008dfe:	4c20      	ldr	r4, [pc, #128]	; (8008e80 <_malloc_r+0xb0>)
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	b91b      	cbnz	r3, 8008e0c <_malloc_r+0x3c>
 8008e04:	4630      	mov	r0, r6
 8008e06:	f000 f863 	bl	8008ed0 <_sbrk_r>
 8008e0a:	6020      	str	r0, [r4, #0]
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f000 f85e 	bl	8008ed0 <_sbrk_r>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d124      	bne.n	8008e62 <_malloc_r+0x92>
 8008e18:	230c      	movs	r3, #12
 8008e1a:	6033      	str	r3, [r6, #0]
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f000 f868 	bl	8008ef2 <__malloc_unlock>
 8008e22:	e7e4      	b.n	8008dee <_malloc_r+0x1e>
 8008e24:	680b      	ldr	r3, [r1, #0]
 8008e26:	1b5b      	subs	r3, r3, r5
 8008e28:	d418      	bmi.n	8008e5c <_malloc_r+0x8c>
 8008e2a:	2b0b      	cmp	r3, #11
 8008e2c:	d90f      	bls.n	8008e4e <_malloc_r+0x7e>
 8008e2e:	600b      	str	r3, [r1, #0]
 8008e30:	50cd      	str	r5, [r1, r3]
 8008e32:	18cc      	adds	r4, r1, r3
 8008e34:	4630      	mov	r0, r6
 8008e36:	f000 f85c 	bl	8008ef2 <__malloc_unlock>
 8008e3a:	f104 000b 	add.w	r0, r4, #11
 8008e3e:	1d23      	adds	r3, r4, #4
 8008e40:	f020 0007 	bic.w	r0, r0, #7
 8008e44:	1ac3      	subs	r3, r0, r3
 8008e46:	d0d3      	beq.n	8008df0 <_malloc_r+0x20>
 8008e48:	425a      	negs	r2, r3
 8008e4a:	50e2      	str	r2, [r4, r3]
 8008e4c:	e7d0      	b.n	8008df0 <_malloc_r+0x20>
 8008e4e:	428c      	cmp	r4, r1
 8008e50:	684b      	ldr	r3, [r1, #4]
 8008e52:	bf16      	itet	ne
 8008e54:	6063      	strne	r3, [r4, #4]
 8008e56:	6013      	streq	r3, [r2, #0]
 8008e58:	460c      	movne	r4, r1
 8008e5a:	e7eb      	b.n	8008e34 <_malloc_r+0x64>
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	6849      	ldr	r1, [r1, #4]
 8008e60:	e7cc      	b.n	8008dfc <_malloc_r+0x2c>
 8008e62:	1cc4      	adds	r4, r0, #3
 8008e64:	f024 0403 	bic.w	r4, r4, #3
 8008e68:	42a0      	cmp	r0, r4
 8008e6a:	d005      	beq.n	8008e78 <_malloc_r+0xa8>
 8008e6c:	1a21      	subs	r1, r4, r0
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f000 f82e 	bl	8008ed0 <_sbrk_r>
 8008e74:	3001      	adds	r0, #1
 8008e76:	d0cf      	beq.n	8008e18 <_malloc_r+0x48>
 8008e78:	6025      	str	r5, [r4, #0]
 8008e7a:	e7db      	b.n	8008e34 <_malloc_r+0x64>
 8008e7c:	200002e8 	.word	0x200002e8
 8008e80:	200002ec 	.word	0x200002ec

08008e84 <_realloc_r>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	4607      	mov	r7, r0
 8008e88:	4614      	mov	r4, r2
 8008e8a:	460e      	mov	r6, r1
 8008e8c:	b921      	cbnz	r1, 8008e98 <_realloc_r+0x14>
 8008e8e:	4611      	mov	r1, r2
 8008e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e94:	f7ff bf9c 	b.w	8008dd0 <_malloc_r>
 8008e98:	b922      	cbnz	r2, 8008ea4 <_realloc_r+0x20>
 8008e9a:	f7ff ff4b 	bl	8008d34 <_free_r>
 8008e9e:	4625      	mov	r5, r4
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea4:	f000 f826 	bl	8008ef4 <_malloc_usable_size_r>
 8008ea8:	42a0      	cmp	r0, r4
 8008eaa:	d20f      	bcs.n	8008ecc <_realloc_r+0x48>
 8008eac:	4621      	mov	r1, r4
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f7ff ff8e 	bl	8008dd0 <_malloc_r>
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d0f2      	beq.n	8008ea0 <_realloc_r+0x1c>
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	f7ff ff15 	bl	8008cec <memcpy>
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	f7ff ff35 	bl	8008d34 <_free_r>
 8008eca:	e7e9      	b.n	8008ea0 <_realloc_r+0x1c>
 8008ecc:	4635      	mov	r5, r6
 8008ece:	e7e7      	b.n	8008ea0 <_realloc_r+0x1c>

08008ed0 <_sbrk_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4c06      	ldr	r4, [pc, #24]	; (8008eec <_sbrk_r+0x1c>)
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	f7ff fafe 	bl	80084dc <_sbrk>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_sbrk_r+0x1a>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_sbrk_r+0x1a>
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	20010970 	.word	0x20010970

08008ef0 <__malloc_lock>:
 8008ef0:	4770      	bx	lr

08008ef2 <__malloc_unlock>:
 8008ef2:	4770      	bx	lr

08008ef4 <_malloc_usable_size_r>:
 8008ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef8:	1f18      	subs	r0, r3, #4
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	bfbc      	itt	lt
 8008efe:	580b      	ldrlt	r3, [r1, r0]
 8008f00:	18c0      	addlt	r0, r0, r3
 8008f02:	4770      	bx	lr

08008f04 <_init>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	bf00      	nop
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr

08008f10 <_fini>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr
