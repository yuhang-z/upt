
utp_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  08008740  08008740  00018740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009018  08009018  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009020  08009020  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009024  08009024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010874  200000fc  08009124  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010970  08009124  00020970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5c9  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039bd  00000000  00000000  0003e6f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001840  00000000  00000000  000420b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001668  00000000  00000000  000438f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c2a  00000000  00000000  00044f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014f1d  00000000  00000000  0006eb8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdb0e  00000000  00000000  00083aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  001815b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c0  00000000  00000000  001816a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  00187e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008728 	.word	0x08008728

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	08008728 	.word	0x08008728

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f95e 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000580:	2000      	movs	r0, #0
 8000582:	f000 f80d 	bl	80005a0 <HAL_InitTick>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e001      	b.n	8000596 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000592:	f007 f99b 	bl	80078cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000596:	79fb      	ldrb	r3, [r7, #7]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_InitTick+0x6c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d023      	beq.n	80005fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_InitTick+0x70>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <HAL_InitTick+0x6c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f96b 	bl	80008a6 <HAL_SYSTICK_Config>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10f      	bne.n	80005f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d809      	bhi.n	80005f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e4:	f000 f935 	bl	8000852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <HAL_InitTick+0x74>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
 80005ee:	e007      	b.n	8000600 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	e004      	b.n	8000600 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	e001      	b.n	8000600 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000600:	7bfb      	ldrb	r3, [r7, #15]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000004 	.word	0x20000004
 8000610:	20000094 	.word	0x20000094
 8000614:	20000000 	.word	0x20000000

08000618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x20>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_IncTick+0x24>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4413      	add	r3, r2
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_IncTick+0x24>)
 800062a:	6013      	str	r3, [r2, #0]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000004 	.word	0x20000004
 800063c:	200002ec 	.word	0x200002ec

08000640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_GetTick+0x14>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200002ec 	.word	0x200002ec

08000658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000660:	f7ff ffee 	bl	8000640 <HAL_GetTick>
 8000664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000670:	d005      	beq.n	800067e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_Delay+0x40>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800067e:	bf00      	nop
 8000680:	f7ff ffde 	bl	8000640 <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8f7      	bhi.n	8000680 <HAL_Delay+0x28>
  {
  }
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000004 	.word	0x20000004

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4907      	ldr	r1, [pc, #28]	; (8000738 <__NVIC_EnableIRQ+0x38>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000e100 	.word	0xe000e100

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	210f      	movs	r1, #15
 8000818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800081c:	f7ff ff8e 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff29 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff3e 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ff8e 	bl	8000790 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff5d 	bl	800073c <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff31 	bl	8000700 <__NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ffa2 	bl	80007f8 <SysTick_Config>
 80008b4:	4603      	mov	r3, r0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d101      	bne.n	80008d0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e014      	b.n	80008fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d105      	bne.n	80008e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f007 f817 	bl	8007914 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2202      	movs	r2, #2
 80008ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d101      	bne.n	8000922 <HAL_DAC_Start_DMA+0x1e>
 800091e:	2302      	movs	r3, #2
 8000920:	e09e      	b.n	8000a60 <HAL_DAC_Start_DMA+0x15c>
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2201      	movs	r2, #1
 8000926:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2202      	movs	r2, #2
 800092c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d12a      	bne.n	800098a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	4a4b      	ldr	r2, [pc, #300]	; (8000a68 <HAL_DAC_Start_DMA+0x164>)
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	4a4a      	ldr	r2, [pc, #296]	; (8000a6c <HAL_DAC_Start_DMA+0x168>)
 8000942:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	4a49      	ldr	r2, [pc, #292]	; (8000a70 <HAL_DAC_Start_DMA+0x16c>)
 800094a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800095a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	2b04      	cmp	r3, #4
 8000960:	d009      	beq.n	8000976 <HAL_DAC_Start_DMA+0x72>
 8000962:	2b08      	cmp	r3, #8
 8000964:	d00c      	beq.n	8000980 <HAL_DAC_Start_DMA+0x7c>
 8000966:	2b00      	cmp	r3, #0
 8000968:	d000      	beq.n	800096c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800096a:	e039      	b.n	80009e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3308      	adds	r3, #8
 8000972:	613b      	str	r3, [r7, #16]
        break;
 8000974:	e034      	b.n	80009e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	330c      	adds	r3, #12
 800097c:	613b      	str	r3, [r7, #16]
        break;
 800097e:	e02f      	b.n	80009e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3310      	adds	r3, #16
 8000986:	613b      	str	r3, [r7, #16]
        break;
 8000988:	e02a      	b.n	80009e0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	4a39      	ldr	r2, [pc, #228]	; (8000a74 <HAL_DAC_Start_DMA+0x170>)
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	4a38      	ldr	r2, [pc, #224]	; (8000a78 <HAL_DAC_Start_DMA+0x174>)
 8000998:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	4a37      	ldr	r2, [pc, #220]	; (8000a7c <HAL_DAC_Start_DMA+0x178>)
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009b0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d009      	beq.n	80009cc <HAL_DAC_Start_DMA+0xc8>
 80009b8:	2b08      	cmp	r3, #8
 80009ba:	d00c      	beq.n	80009d6 <HAL_DAC_Start_DMA+0xd2>
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d000      	beq.n	80009c2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80009c0:	e00e      	b.n	80009e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3314      	adds	r3, #20
 80009c8:	613b      	str	r3, [r7, #16]
        break;
 80009ca:	e009      	b.n	80009e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3318      	adds	r3, #24
 80009d2:	613b      	str	r3, [r7, #16]
        break;
 80009d4:	e004      	b.n	80009e0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	331c      	adds	r3, #28
 80009dc:	613b      	str	r3, [r7, #16]
        break;
 80009de:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d111      	bne.n	8000a0a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6898      	ldr	r0, [r3, #8]
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	f000 faae 	bl	8000f60 <HAL_DMA_Start_IT>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]
 8000a08:	e010      	b.n	8000a2c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a18:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	68d8      	ldr	r0, [r3, #12]
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	f000 fa9c 	bl	8000f60 <HAL_DMA_Start_IT>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10c      	bne.n	8000a52 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6819      	ldr	r1, [r3, #0]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	2201      	movs	r2, #1
 8000a46:	409a      	lsls	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e005      	b.n	8000a5e <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	f043 0204 	orr.w	r2, r3, #4
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	08000cdd 	.word	0x08000cdd
 8000a6c:	08000cff 	.word	0x08000cff
 8000a70:	08000d1b 	.word	0x08000d1b
 8000a74:	08000d85 	.word	0x08000d85
 8000a78:	08000da7 	.word	0x08000da7
 8000a7c:	08000dc3 	.word	0x08000dc3

08000a80 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d101      	bne.n	8000ac4 <HAL_DAC_ConfigChannel+0x1c>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	e107      	b.n	8000cd4 <HAL_DAC_ConfigChannel+0x22c>
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2202      	movs	r2, #2
 8000ace:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d174      	bne.n	8000bc2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000ad8:	f7ff fdb2 	bl	8000640 <HAL_GetTick>
 8000adc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d134      	bne.n	8000b4e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ae4:	e011      	b.n	8000b0a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000ae6:	f7ff fdab 	bl	8000640 <HAL_GetTick>
 8000aea:	4602      	mov	r2, r0
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d90a      	bls.n	8000b0a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	f043 0208 	orr.w	r2, r3, #8
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2203      	movs	r2, #3
 8000b04:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b06:	2303      	movs	r3, #3
 8000b08:	e0e4      	b.n	8000cd4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1e6      	bne.n	8000ae6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fd9d 	bl	8000658 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	6992      	ldr	r2, [r2, #24]
 8000b26:	641a      	str	r2, [r3, #64]	; 0x40
 8000b28:	e01e      	b.n	8000b68 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b2a:	f7ff fd89 	bl	8000640 <HAL_GetTick>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d90a      	bls.n	8000b4e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	691b      	ldr	r3, [r3, #16]
 8000b3c:	f043 0208 	orr.w	r2, r3, #8
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2203      	movs	r2, #3
 8000b48:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e0c2      	b.n	8000cd4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	dbe8      	blt.n	8000b2a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fd7d 	bl	8000658 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	6992      	ldr	r2, [r2, #24]
 8000b66:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	ea02 0103 	and.w	r1, r2, r3
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	69da      	ldr	r2, [r3, #28]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	409a      	lsls	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	21ff      	movs	r1, #255	; 0xff
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	ea02 0103 	and.w	r1, r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	6a1a      	ldr	r2, [r3, #32]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f003 0310 	and.w	r3, r3, #16
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d11d      	bne.n	8000c06 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	221f      	movs	r2, #31
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4013      	ands	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	2207      	movs	r2, #7
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	400a      	ands	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4013      	ands	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6819      	ldr	r1, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	22c0      	movs	r2, #192	; 0xc0
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43da      	mvns	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f005 ff7a 	bl	8006be4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	711a      	strb	r2, [r3, #4]
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f7ff feb7 	bl	8000a80 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d26:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	f043 0204 	orr.w	r2, r3, #4
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff fead 	bl	8000a94 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	711a      	strb	r2, [r3, #4]
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f7ff ffd8 	bl	8000d48 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	711a      	strb	r2, [r3, #4]
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f7ff ffd1 	bl	8000d5c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	f043 0204 	orr.w	r2, r3, #4
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f7ff ffc7 	bl	8000d70 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2201      	movs	r2, #1
 8000de6:	711a      	strb	r2, [r3, #4]
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e098      	b.n	8000f34 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <HAL_DMA_Init+0x150>)
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d80f      	bhi.n	8000e2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b4b      	ldr	r3, [pc, #300]	; (8000f44 <HAL_DMA_Init+0x154>)
 8000e16:	4413      	add	r3, r2
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_DMA_Init+0x158>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	009a      	lsls	r2, r3, #2
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a48      	ldr	r2, [pc, #288]	; (8000f4c <HAL_DMA_Init+0x15c>)
 8000e2a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e2c:	e00e      	b.n	8000e4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <HAL_DMA_Init+0x160>)
 8000e36:	4413      	add	r3, r2
 8000e38:	4a43      	ldr	r2, [pc, #268]	; (8000f48 <HAL_DMA_Init+0x158>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	009a      	lsls	r2, r3, #2
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a42      	ldr	r2, [pc, #264]	; (8000f54 <HAL_DMA_Init+0x164>)
 8000e4a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2202      	movs	r2, #2
 8000e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ea6:	d039      	beq.n	8000f1c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <HAL_DMA_Init+0x15c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d11a      	bne.n	8000ee8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eb2:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <HAL_DMA_Init+0x168>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f003 031c 	and.w	r3, r3, #28
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4924      	ldr	r1, [pc, #144]	; (8000f58 <HAL_DMA_Init+0x168>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_DMA_Init+0x168>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6859      	ldr	r1, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed8:	f003 031c 	and.w	r3, r3, #28
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	491d      	ldr	r1, [pc, #116]	; (8000f58 <HAL_DMA_Init+0x168>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
 8000ee6:	e019      	b.n	8000f1c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_DMA_Init+0x16c>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	f003 031c 	and.w	r3, r3, #28
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	4917      	ldr	r1, [pc, #92]	; (8000f5c <HAL_DMA_Init+0x16c>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_DMA_Init+0x16c>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6859      	ldr	r1, [r3, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f003 031c 	and.w	r3, r3, #28
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	4911      	ldr	r1, [pc, #68]	; (8000f5c <HAL_DMA_Init+0x16c>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40020407 	.word	0x40020407
 8000f44:	bffdfff8 	.word	0xbffdfff8
 8000f48:	cccccccd 	.word	0xcccccccd
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	bffdfbf8 	.word	0xbffdfbf8
 8000f54:	40020400 	.word	0x40020400
 8000f58:	400200a8 	.word	0x400200a8
 8000f5c:	400204a8 	.word	0x400204a8

08000f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_DMA_Start_IT+0x20>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e04b      	b.n	8001018 <HAL_DMA_Start_IT+0xb8>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d13a      	bne.n	800100a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 f91e 	bl	80011fa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d008      	beq.n	8000fd8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 020e 	orr.w	r2, r2, #14
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e00f      	b.n	8000ff8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0204 	bic.w	r2, r2, #4
 8000fe6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 020a 	orr.w	r2, r2, #10
 8000ff6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0201 	orr.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e005      	b.n	8001016 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001012:	2302      	movs	r3, #2
 8001014:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001016:	7dfb      	ldrb	r3, [r7, #23]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d008      	beq.n	800104a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2204      	movs	r2, #4
 800103c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e022      	b.n	8001090 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 020e 	bic.w	r2, r2, #14
 8001058:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0201 	bic.w	r2, r2, #1
 8001068:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f003 021c 	and.w	r2, r3, #28
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	2101      	movs	r1, #1
 8001078:	fa01 f202 	lsl.w	r2, r1, r2
 800107c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	f003 031c 	and.w	r3, r3, #28
 80010bc:	2204      	movs	r2, #4
 80010be:	409a      	lsls	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d026      	beq.n	8001116 <HAL_DMA_IRQHandler+0x7a>
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d021      	beq.n	8001116 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0320 	and.w	r3, r3, #32
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d107      	bne.n	80010f0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0204 	bic.w	r2, r2, #4
 80010ee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	f003 021c 	and.w	r2, r3, #28
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	2104      	movs	r1, #4
 80010fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001102:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	2b00      	cmp	r3, #0
 800110a:	d071      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001114:	e06c      	b.n	80011f0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 031c 	and.w	r3, r3, #28
 800111e:	2202      	movs	r2, #2
 8001120:	409a      	lsls	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d02e      	beq.n	8001188 <HAL_DMA_IRQHandler+0xec>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d029      	beq.n	8001188 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10b      	bne.n	800115a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 020a 	bic.w	r2, r2, #10
 8001150:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f003 021c 	and.w	r2, r3, #28
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	2102      	movs	r1, #2
 8001168:	fa01 f202 	lsl.w	r2, r1, r2
 800116c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	2b00      	cmp	r3, #0
 800117c:	d038      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001186:	e033      	b.n	80011f0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f003 031c 	and.w	r3, r3, #28
 8001190:	2208      	movs	r2, #8
 8001192:	409a      	lsls	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d02a      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x156>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d025      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 020e 	bic.w	r2, r2, #14
 80011b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f003 021c 	and.w	r2, r3, #28
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	2101      	movs	r1, #1
 80011c4:	fa01 f202 	lsl.w	r2, r1, r2
 80011c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d004      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
}
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b085      	sub	sp, #20
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f003 021c 	and.w	r2, r3, #28
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2101      	movs	r1, #1
 8001216:	fa01 f202 	lsl.w	r2, r1, r2
 800121a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b10      	cmp	r3, #16
 800122a:	d108      	bne.n	800123e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800123c:	e007      	b.n	800124e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	60da      	str	r2, [r3, #12]
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126a:	e17f      	b.n	800156c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2101      	movs	r1, #1
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8171 	beq.w	8001566 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d00b      	beq.n	80012a4 <HAL_GPIO_Init+0x48>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d007      	beq.n	80012a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001298:	2b11      	cmp	r3, #17
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b12      	cmp	r3, #18
 80012a2:	d130      	bne.n	8001306 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012da:	2201      	movs	r2, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	f003 0201 	and.w	r2, r3, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b03      	cmp	r3, #3
 8001310:	d118      	bne.n	8001344 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x128>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b12      	cmp	r3, #18
 8001382:	d123      	bne.n	80013cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	6939      	ldr	r1, [r7, #16]
 80013c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80ac 	beq.w	8001566 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <HAL_GPIO_Init+0x32c>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001412:	4a5d      	ldr	r2, [pc, #372]	; (8001588 <HAL_GPIO_Init+0x32c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6613      	str	r3, [r2, #96]	; 0x60
 800141a:	4b5b      	ldr	r3, [pc, #364]	; (8001588 <HAL_GPIO_Init+0x32c>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001426:	4a59      	ldr	r2, [pc, #356]	; (800158c <HAL_GPIO_Init+0x330>)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001450:	d025      	beq.n	800149e <HAL_GPIO_Init+0x242>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4e      	ldr	r2, [pc, #312]	; (8001590 <HAL_GPIO_Init+0x334>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01f      	beq.n	800149a <HAL_GPIO_Init+0x23e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <HAL_GPIO_Init+0x338>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_GPIO_Init+0x23a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <HAL_GPIO_Init+0x33c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x236>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4b      	ldr	r2, [pc, #300]	; (800159c <HAL_GPIO_Init+0x340>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x232>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4a      	ldr	r2, [pc, #296]	; (80015a0 <HAL_GPIO_Init+0x344>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x22e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <HAL_GPIO_Init+0x348>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x22a>
 8001482:	2306      	movs	r3, #6
 8001484:	e00c      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 8001486:	2307      	movs	r3, #7
 8001488:	e00a      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 800148a:	2305      	movs	r3, #5
 800148c:	e008      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 800148e:	2304      	movs	r3, #4
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 8001492:	2303      	movs	r3, #3
 8001494:	e004      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 8001496:	2302      	movs	r3, #2
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 800149e:	2300      	movs	r3, #0
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	f002 0203 	and.w	r2, r2, #3
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014b0:	4936      	ldr	r1, [pc, #216]	; (800158c <HAL_GPIO_Init+0x330>)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014e2:	4a31      	ldr	r2, [pc, #196]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800150c:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001512:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001560:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa22 f303 	lsr.w	r3, r2, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	f47f ae78 	bne.w	800126c <HAL_GPIO_Init+0x10>
  }
}
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48001000 	.word	0x48001000
 80015a0:	48001400 	.word	0x48001400
 80015a4:	48001800 	.word	0x48001800
 80015a8:	40010400 	.word	0x40010400

080015ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80015ba:	e0cd      	b.n	8001758 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80015bc:	2201      	movs	r2, #1
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80c0 	beq.w	8001752 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80015d2:	4a68      	ldr	r2, [pc, #416]	; (8001774 <HAL_GPIO_DeInit+0x1c8>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015fa:	d025      	beq.n	8001648 <HAL_GPIO_DeInit+0x9c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a5e      	ldr	r2, [pc, #376]	; (8001778 <HAL_GPIO_DeInit+0x1cc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d01f      	beq.n	8001644 <HAL_GPIO_DeInit+0x98>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a5d      	ldr	r2, [pc, #372]	; (800177c <HAL_GPIO_DeInit+0x1d0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d019      	beq.n	8001640 <HAL_GPIO_DeInit+0x94>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a5c      	ldr	r2, [pc, #368]	; (8001780 <HAL_GPIO_DeInit+0x1d4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_DeInit+0x90>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a5b      	ldr	r2, [pc, #364]	; (8001784 <HAL_GPIO_DeInit+0x1d8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_DeInit+0x8c>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a5a      	ldr	r2, [pc, #360]	; (8001788 <HAL_GPIO_DeInit+0x1dc>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_DeInit+0x88>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a59      	ldr	r2, [pc, #356]	; (800178c <HAL_GPIO_DeInit+0x1e0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_DeInit+0x84>
 800162c:	2306      	movs	r3, #6
 800162e:	e00c      	b.n	800164a <HAL_GPIO_DeInit+0x9e>
 8001630:	2307      	movs	r3, #7
 8001632:	e00a      	b.n	800164a <HAL_GPIO_DeInit+0x9e>
 8001634:	2305      	movs	r3, #5
 8001636:	e008      	b.n	800164a <HAL_GPIO_DeInit+0x9e>
 8001638:	2304      	movs	r3, #4
 800163a:	e006      	b.n	800164a <HAL_GPIO_DeInit+0x9e>
 800163c:	2303      	movs	r3, #3
 800163e:	e004      	b.n	800164a <HAL_GPIO_DeInit+0x9e>
 8001640:	2302      	movs	r3, #2
 8001642:	e002      	b.n	800164a <HAL_GPIO_DeInit+0x9e>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_GPIO_DeInit+0x9e>
 8001648:	2300      	movs	r3, #0
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	429a      	cmp	r2, r3
 8001658:	d132      	bne.n	80016c0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800165a:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <HAL_GPIO_DeInit+0x1e4>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	494b      	ldr	r1, [pc, #300]	; (8001790 <HAL_GPIO_DeInit+0x1e4>)
 8001664:	4013      	ands	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001668:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_GPIO_DeInit+0x1e4>)
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	4947      	ldr	r1, [pc, #284]	; (8001790 <HAL_GPIO_DeInit+0x1e4>)
 8001672:	4013      	ands	r3, r2
 8001674:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_GPIO_DeInit+0x1e4>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	4944      	ldr	r1, [pc, #272]	; (8001790 <HAL_GPIO_DeInit+0x1e4>)
 8001680:	4013      	ands	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001684:	4b42      	ldr	r3, [pc, #264]	; (8001790 <HAL_GPIO_DeInit+0x1e4>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	4940      	ldr	r1, [pc, #256]	; (8001790 <HAL_GPIO_DeInit+0x1e4>)
 800168e:	4013      	ands	r3, r2
 8001690:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80016a2:	4a34      	ldr	r2, [pc, #208]	; (8001774 <HAL_GPIO_DeInit+0x1c8>)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43da      	mvns	r2, r3
 80016b2:	4830      	ldr	r0, [pc, #192]	; (8001774 <HAL_GPIO_DeInit+0x1c8>)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	400a      	ands	r2, r1
 80016ba:	3302      	adds	r3, #2
 80016bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2103      	movs	r1, #3
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	220f      	movs	r2, #15
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	08d2      	lsrs	r2, r2, #3
 80016f4:	4019      	ands	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2103      	movs	r1, #3
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	401a      	ands	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	2101      	movs	r1, #1
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	401a      	ands	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2103      	movs	r1, #3
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	401a      	ands	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001742:	2101      	movs	r1, #1
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	401a      	ands	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	f47f af2b 	bne.w	80015bc <HAL_GPIO_DeInit+0x10>
  }
}
 8001766:	bf00      	nop
 8001768:	371c      	adds	r7, #28
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40010000 	.word	0x40010000
 8001778:	48000400 	.word	0x48000400
 800177c:	48000800 	.word	0x48000800
 8001780:	48000c00 	.word	0x48000c00
 8001784:	48001000 	.word	0x48001000
 8001788:	48001400 	.word	0x48001400
 800178c:	48001800 	.word	0x48001800
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	041a      	lsls	r2, r3, #16
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43d9      	mvns	r1, r3
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	400b      	ands	r3, r1
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e081      	b.n	80018de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f006 f8fe 	bl	80079f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2224      	movs	r2, #36	; 0x24
 80017f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001818:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001828:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	e006      	b.n	8001850 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800184e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d104      	bne.n	8001862 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001874:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001884:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	ea42 0103 	orr.w	r1, r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	021a      	lsls	r2, r3, #8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69d9      	ldr	r1, [r3, #28]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1a      	ldr	r2, [r3, #32]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2220      	movs	r2, #32
 80018ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e021      	b.n	800193c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2224      	movs	r2, #36	; 0x24
 80018fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f006 f8b1 	bl	8007a78 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4603      	mov	r3, r0
 8001954:	817b      	strh	r3, [r7, #10]
 8001956:	460b      	mov	r3, r1
 8001958:	813b      	strh	r3, [r7, #8]
 800195a:	4613      	mov	r3, r2
 800195c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b20      	cmp	r3, #32
 8001968:	f040 80f9 	bne.w	8001b5e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_I2C_Mem_Write+0x34>
 8001972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0ed      	b.n	8001b60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_I2C_Mem_Write+0x4e>
 800198e:	2302      	movs	r3, #2
 8001990:	e0e6      	b.n	8001b60 <HAL_I2C_Mem_Write+0x21c>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800199a:	f7fe fe51 	bl	8000640 <HAL_GetTick>
 800199e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2319      	movs	r3, #25
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 fac3 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0d1      	b.n	8001b60 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2221      	movs	r2, #33	; 0x21
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a3a      	ldr	r2, [r7, #32]
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019e4:	88f8      	ldrh	r0, [r7, #6]
 80019e6:	893a      	ldrh	r2, [r7, #8]
 80019e8:	8979      	ldrh	r1, [r7, #10]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	4603      	mov	r3, r0
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f9d3 	bl	8001da0 <I2C_RequestMemoryWrite>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0a9      	b.n	8001b60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	2bff      	cmp	r3, #255	; 0xff
 8001a14:	d90e      	bls.n	8001a34 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	22ff      	movs	r2, #255	; 0xff
 8001a1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	8979      	ldrh	r1, [r7, #10]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 fba5 	bl	800217c <I2C_TransferConfig>
 8001a32:	e00f      	b.n	8001a54 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	8979      	ldrh	r1, [r7, #10]
 8001a46:	2300      	movs	r3, #0
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fb94 	bl	800217c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 faad 	bl	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e07b      	b.n	8001b60 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d034      	beq.n	8001b0c <HAL_I2C_Mem_Write+0x1c8>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d130      	bne.n	8001b0c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 fa3f 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e04d      	b.n	8001b60 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	2bff      	cmp	r3, #255	; 0xff
 8001acc:	d90e      	bls.n	8001aec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	22ff      	movs	r2, #255	; 0xff
 8001ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	8979      	ldrh	r1, [r7, #10]
 8001adc:	2300      	movs	r3, #0
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 fb49 	bl	800217c <I2C_TransferConfig>
 8001aea:	e00f      	b.n	8001b0c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	8979      	ldrh	r1, [r7, #10]
 8001afe:	2300      	movs	r3, #0
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 fb38 	bl	800217c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d19e      	bne.n	8001a54 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fa8c 	bl	8002038 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e01a      	b.n	8001b60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_I2C_Mem_Write+0x224>)
 8001b3e:	400b      	ands	r3, r1
 8001b40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
  }
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	fe00e800 	.word	0xfe00e800

08001b6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	817b      	strh	r3, [r7, #10]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	813b      	strh	r3, [r7, #8]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b20      	cmp	r3, #32
 8001b90:	f040 80fd 	bne.w	8001d8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_I2C_Mem_Read+0x34>
 8001b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d105      	bne.n	8001bac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0f1      	b.n	8001d90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_I2C_Mem_Read+0x4e>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e0ea      	b.n	8001d90 <HAL_I2C_Mem_Read+0x224>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bc2:	f7fe fd3d 	bl	8000640 <HAL_GetTick>
 8001bc6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2319      	movs	r3, #25
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f9af 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0d5      	b.n	8001d90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2222      	movs	r2, #34	; 0x22
 8001be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2240      	movs	r2, #64	; 0x40
 8001bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a3a      	ldr	r2, [r7, #32]
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c0c:	88f8      	ldrh	r0, [r7, #6]
 8001c0e:	893a      	ldrh	r2, [r7, #8]
 8001c10:	8979      	ldrh	r1, [r7, #10]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 f913 	bl	8001e48 <I2C_RequestMemoryRead>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0ad      	b.n	8001d90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2bff      	cmp	r3, #255	; 0xff
 8001c3c:	d90e      	bls.n	8001c5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	22ff      	movs	r2, #255	; 0xff
 8001c42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	8979      	ldrh	r1, [r7, #10]
 8001c4c:	4b52      	ldr	r3, [pc, #328]	; (8001d98 <HAL_I2C_Mem_Read+0x22c>)
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 fa91 	bl	800217c <I2C_TransferConfig>
 8001c5a:	e00f      	b.n	8001c7c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	8979      	ldrh	r1, [r7, #10]
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <HAL_I2C_Mem_Read+0x22c>)
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fa80 	bl	800217c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	2200      	movs	r2, #0
 8001c84:	2104      	movs	r1, #4
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f956 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e07c      	b.n	8001d90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d034      	beq.n	8001d3c <HAL_I2C_Mem_Read+0x1d0>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d130      	bne.n	8001d3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 f927 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e04d      	b.n	8001d90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d90e      	bls.n	8001d1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	22ff      	movs	r2, #255	; 0xff
 8001d02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	8979      	ldrh	r1, [r7, #10]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 fa31 	bl	800217c <I2C_TransferConfig>
 8001d1a:	e00f      	b.n	8001d3c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	8979      	ldrh	r1, [r7, #10]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fa20 	bl	800217c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d19a      	bne.n	8001c7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f974 	bl	8002038 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e01a      	b.n	8001d90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_I2C_Mem_Read+0x230>)
 8001d6e:	400b      	ands	r3, r1
 8001d70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e000      	b.n	8001d90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d8e:	2302      	movs	r3, #2
  }
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	80002400 	.word	0x80002400
 8001d9c:	fe00e800 	.word	0xfe00e800

08001da0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	460b      	mov	r3, r1
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	8979      	ldrh	r1, [r7, #10]
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <I2C_RequestMemoryWrite+0xa4>)
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f9d7 	bl	800217c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	69b9      	ldr	r1, [r7, #24]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f8f0 	bl	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e02c      	b.n	8001e3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001de8:	893b      	ldrh	r3, [r7, #8]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
 8001df2:	e015      	b.n	8001e20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001df4:	893b      	ldrh	r3, [r7, #8]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	69b9      	ldr	r1, [r7, #24]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f8d6 	bl	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e012      	b.n	8001e3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e16:	893b      	ldrh	r3, [r7, #8]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2200      	movs	r2, #0
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f884 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	80002000 	.word	0x80002000

08001e48 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	817b      	strh	r3, [r7, #10]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	813b      	strh	r3, [r7, #8]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	8979      	ldrh	r1, [r7, #10]
 8001e68:	4b20      	ldr	r3, [pc, #128]	; (8001eec <I2C_RequestMemoryRead+0xa4>)
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f984 	bl	800217c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f89d 	bl	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e02c      	b.n	8001ee2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e8e:	893b      	ldrh	r3, [r7, #8]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
 8001e98:	e015      	b.n	8001ec6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e9a:	893b      	ldrh	r3, [r7, #8]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	69b9      	ldr	r1, [r7, #24]
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f883 	bl	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e012      	b.n	8001ee2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ebc:	893b      	ldrh	r3, [r7, #8]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2140      	movs	r1, #64	; 0x40
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f831 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	80002000 	.word	0x80002000

08001ef0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d103      	bne.n	8001f0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d007      	beq.n	8001f2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	619a      	str	r2, [r3, #24]
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f48:	e022      	b.n	8001f90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f50:	d01e      	beq.n	8001f90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7fe fb75 	bl	8000640 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d113      	bne.n	8001f90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e00f      	b.n	8001fb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d0cd      	beq.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fc4:	e02c      	b.n	8002020 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f870 	bl	80020b0 <I2C_IsAcknowledgeFailed>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e02a      	b.n	8002030 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fe0:	d01e      	beq.n	8002020 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7fe fb2d 	bl	8000640 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d113      	bne.n	8002020 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e007      	b.n	8002030 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b02      	cmp	r3, #2
 800202c:	d1cb      	bne.n	8001fc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002044:	e028      	b.n	8002098 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f830 	bl	80020b0 <I2C_IsAcknowledgeFailed>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e026      	b.n	80020a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7fe faf1 	bl	8000640 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	429a      	cmp	r2, r3
 8002068:	d302      	bcc.n	8002070 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d113      	bne.n	8002098 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e007      	b.n	80020a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d1cf      	bne.n	8002046 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d151      	bne.n	800216e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ca:	e022      	b.n	8002112 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020d2:	d01e      	beq.n	8002112 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d4:	f7fe fab4 	bl	8000640 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d302      	bcc.n	80020ea <I2C_IsAcknowledgeFailed+0x3a>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d113      	bne.n	8002112 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e02e      	b.n	8002170 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b20      	cmp	r3, #32
 800211e:	d1d5      	bne.n	80020cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2210      	movs	r2, #16
 8002126:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2220      	movs	r2, #32
 800212e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff fedd 	bl	8001ef0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <I2C_IsAcknowledgeFailed+0xc8>)
 8002142:	400b      	ands	r3, r1
 8002144:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f043 0204 	orr.w	r2, r3, #4
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	fe00e800 	.word	0xfe00e800

0800217c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	817b      	strh	r3, [r7, #10]
 800218a:	4613      	mov	r3, r2
 800218c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	0d5b      	lsrs	r3, r3, #21
 8002198:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <I2C_TransferConfig+0x58>)
 800219e:	430b      	orrs	r3, r1
 80021a0:	43db      	mvns	r3, r3
 80021a2:	ea02 0103 	and.w	r1, r2, r3
 80021a6:	897b      	ldrh	r3, [r7, #10]
 80021a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021ac:	7a7b      	ldrb	r3, [r7, #9]
 80021ae:	041b      	lsls	r3, r3, #16
 80021b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	431a      	orrs	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	03ff63ff 	.word	0x03ff63ff

080021d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d138      	bne.n	8002260 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e032      	b.n	8002262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800222a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
  }
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b20      	cmp	r3, #32
 8002282:	d139      	bne.n	80022f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800228e:	2302      	movs	r3, #2
 8002290:	e033      	b.n	80022fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2224      	movs	r2, #36	; 0x24
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <HAL_PWREx_GetVoltageRange+0x18>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40007000 	.word	0x40007000

08002324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002332:	d130      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800233c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002340:	d038      	beq.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800234a:	4a1e      	ldr	r2, [pc, #120]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2232      	movs	r2, #50	; 0x32
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0c9b      	lsrs	r3, r3, #18
 8002364:	3301      	adds	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002368:	e002      	b.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3b01      	subs	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237c:	d102      	bne.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f2      	bne.n	800236a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002390:	d110      	bne.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e00f      	b.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800239e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a2:	d007      	beq.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023ac:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40007000 	.word	0x40007000
 80023c8:	20000094 	.word	0x20000094
 80023cc:	431bde83 	.word	0x431bde83

080023d0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7fe f932 	bl	8000640 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e063      	b.n	80024b0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f005 fb5f 	bl	8007ac0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002402:	f241 3188 	movw	r1, #5000	; 0x1388
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 faf7 	bl	80029fa <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	3b01      	subs	r3, #1
 800241c:	021a      	lsls	r2, r3, #8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	2120      	movs	r1, #32
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 faef 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800243c:	7afb      	ldrb	r3, [r7, #11]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d131      	bne.n	80024a6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800244c:	f023 0310 	bic.w	r3, r3, #16
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6852      	ldr	r2, [r2, #4]
 8002454:	0611      	lsls	r1, r2, #24
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68d2      	ldr	r2, [r2, #12]
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_QSPI_Init+0xe8>)
 800246c:	4013      	ands	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6912      	ldr	r2, [r2, #16]
 8002472:	0411      	lsls	r1, r2, #16
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6952      	ldr	r2, [r2, #20]
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6992      	ldr	r2, [r2, #24]
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80024ae:	7afb      	ldrb	r3, [r7, #11]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	ffe0f8fe 	.word	0xffe0f8fe

080024bc <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e016      	b.n	80024fc <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f005 fb32 	bl	8007b48 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7fe f896 	bl	8000640 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_QSPI_Command+0x22>
 8002522:	2302      	movs	r3, #2
 8002524:	e048      	b.n	80025b8 <HAL_QSPI_Command+0xb4>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d137      	bne.n	80025aa <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2200      	movs	r2, #0
 8002550:	2120      	movs	r1, #32
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fa5f 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d125      	bne.n	80025ae <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002562:	2200      	movs	r2, #0
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fa8c 	bl	8002a84 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	2b00      	cmp	r3, #0
 8002572:	d115      	bne.n	80025a0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2201      	movs	r2, #1
 800257c:	2102      	movs	r1, #2
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fa49 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10f      	bne.n	80025ae <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2202      	movs	r2, #2
 8002594:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800259e:	e006      	b.n	80025ae <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80025a8:	e001      	b.n	80025ae <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7fe f836 	bl	8000640 <HAL_GetTick>
 80025d4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3320      	adds	r3, #32
 80025dc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_QSPI_Transmit+0x2e>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e07b      	b.n	80026e6 <HAL_QSPI_Transmit+0x126>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d16a      	bne.n	80026d8 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d05b      	beq.n	80026c6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2212      	movs	r2, #18
 8002612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002642:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002644:	e01b      	b.n	800267e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2201      	movs	r2, #1
 800264e:	2104      	movs	r1, #4
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f9e0 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800265a:	7ffb      	ldrb	r3, [r7, #31]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d113      	bne.n	8002688 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1df      	bne.n	8002646 <HAL_QSPI_Transmit+0x86>
 8002686:	e000      	b.n	800268a <HAL_QSPI_Transmit+0xca>
          break;
 8002688:	bf00      	nop
      }

      if (status == HAL_OK)
 800268a:	7ffb      	ldrb	r3, [r7, #31]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d115      	bne.n	80026bc <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2201      	movs	r2, #1
 8002698:	2102      	movs	r1, #2
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f9bb 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80026a4:	7ffb      	ldrb	r3, [r7, #31]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2202      	movs	r2, #2
 80026b0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f934 	bl	8002920 <HAL_QSPI_Abort>
 80026b8:	4603      	mov	r3, r0
 80026ba:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80026c4:	e00a      	b.n	80026dc <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	f043 0208 	orr.w	r2, r3, #8
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	77fb      	strb	r3, [r7, #31]
 80026d6:	e001      	b.n	80026dc <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
 80026da:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80026e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b08a      	sub	sp, #40	; 0x28
 80026f2:	af02      	add	r7, sp, #8
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80026fe:	f7fd ff9f 	bl	8000640 <HAL_GetTick>
 8002702:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3320      	adds	r3, #32
 8002712:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_QSPI_Receive+0x36>
 8002720:	2302      	movs	r3, #2
 8002722:	e082      	b.n	800282a <HAL_QSPI_Receive+0x13c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d171      	bne.n	800281c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d062      	beq.n	800280a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2222      	movs	r2, #34	; 0x22
 8002748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800277c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002786:	e01c      	b.n	80027c2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2201      	movs	r2, #1
 8002790:	2106      	movs	r1, #6
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f93f 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800279c:	7ffb      	ldrb	r3, [r7, #31]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d114      	bne.n	80027cc <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	1e5a      	subs	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1de      	bne.n	8002788 <HAL_QSPI_Receive+0x9a>
 80027ca:	e000      	b.n	80027ce <HAL_QSPI_Receive+0xe0>
          break;
 80027cc:	bf00      	nop
      }

      if (status == HAL_OK)
 80027ce:	7ffb      	ldrb	r3, [r7, #31]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d115      	bne.n	8002800 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2201      	movs	r2, #1
 80027dc:	2102      	movs	r1, #2
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f919 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80027e8:	7ffb      	ldrb	r3, [r7, #31]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d108      	bne.n	8002800 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2202      	movs	r2, #2
 80027f4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f892 	bl	8002920 <HAL_QSPI_Abort>
 80027fc:	4603      	mov	r3, r0
 80027fe:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002808:	e00a      	b.n	8002820 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	f043 0208 	orr.w	r2, r3, #8
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	77fb      	strb	r3, [r7, #31]
 800281a:	e001      	b.n	8002820 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800281c:	2302      	movs	r3, #2
 800281e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002828:	7ffb      	ldrb	r3, [r7, #31]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b088      	sub	sp, #32
 8002836:	af02      	add	r7, sp, #8
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7fd fefe 	bl	8000640 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_QSPI_AutoPolling+0x24>
 8002852:	2302      	movs	r3, #2
 8002854:	e060      	b.n	8002918 <HAL_QSPI_AutoPolling+0xe6>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d14f      	bne.n	800290a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2242      	movs	r2, #66	; 0x42
 8002874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2200      	movs	r2, #0
 8002880:	2120      	movs	r1, #32
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f8c7 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d13d      	bne.n	800290e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6852      	ldr	r2, [r2, #4]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6892      	ldr	r2, [r2, #8]
 80028ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	431a      	orrs	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80028c8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80028d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f8d3 	bl	8002a84 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2201      	movs	r2, #1
 80028e6:	2108      	movs	r1, #8
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f894 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2208      	movs	r2, #8
 80028fe:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002908:	e001      	b.n	800290e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800290a:	2302      	movs	r3, #2
 800290c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002916:	7dfb      	ldrb	r3, [r7, #23]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af02      	add	r7, sp, #8
 8002926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800292c:	f7fd fe88 	bl	8000640 <HAL_GetTick>
 8002930:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d056      	beq.n	80029f0 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d017      	beq.n	8002988 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0204 	bic.w	r2, r2, #4
 8002966:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fb57 	bl	8001020 <HAL_DMA_Abort>
 8002972:	4603      	mov	r3, r0
 8002974:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	f043 0204 	orr.w	r2, r3, #4
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0202 	orr.w	r2, r2, #2
 8002996:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2201      	movs	r2, #1
 80029a2:	2102      	movs	r1, #2
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f836 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10e      	bne.n	80029d2 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2202      	movs	r2, #2
 80029ba:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2120      	movs	r1, #32
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f824 	bl	8002a16 <QSPI_WaitFlagStateUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80029e6:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	4613      	mov	r3, r2
 8002a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002a26:	e01a      	b.n	8002a5e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2e:	d016      	beq.n	8002a5e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a30:	f7fd fe06 	bl	8000640 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d302      	bcc.n	8002a46 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e00e      	b.n	8002a7c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf14      	ite	ne
 8002a6c:	2301      	movne	r3, #1
 8002a6e:	2300      	moveq	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d1d6      	bne.n	8002a28 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d009      	beq.n	8002aac <QSPI_Config+0x28>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002a9e:	d005      	beq.n	8002aac <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3a01      	subs	r2, #1
 8002aaa:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80b9 	beq.w	8002c28 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d05f      	beq.n	8002b7e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	6892      	ldr	r2, [r2, #8]
 8002ac6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d031      	beq.n	8002b34 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	049b      	lsls	r3, r3, #18
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	ea42 0103 	orr.w	r1, r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002b24:	f000 812e 	beq.w	8002d84 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	6852      	ldr	r2, [r2, #4]
 8002b30:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002b32:	e127      	b.n	8002d84 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	431a      	orrs	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	049b      	lsls	r3, r3, #18
 8002b50:	431a      	orrs	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	ea42 0103 	orr.w	r1, r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	615a      	str	r2, [r3, #20]
}
 8002b7c:	e102      	b.n	8002d84 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d02e      	beq.n	8002be4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	049b      	lsls	r3, r3, #18
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	ea42 0103 	orr.w	r1, r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002bd4:	f000 80d6 	beq.w	8002d84 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	6852      	ldr	r2, [r2, #4]
 8002be0:	619a      	str	r2, [r3, #24]
}
 8002be2:	e0cf      	b.n	8002d84 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	431a      	orrs	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	049b      	lsls	r3, r3, #18
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	ea42 0103 	orr.w	r1, r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	615a      	str	r2, [r3, #20]
}
 8002c26:	e0ad      	b.n	8002d84 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d058      	beq.n	8002ce2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	6892      	ldr	r2, [r2, #8]
 8002c38:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02d      	beq.n	8002c9e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	049b      	lsls	r3, r3, #18
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	ea42 0103 	orr.w	r1, r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002c90:	d078      	beq.n	8002d84 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	6852      	ldr	r2, [r2, #4]
 8002c9a:	619a      	str	r2, [r3, #24]
}
 8002c9c:	e072      	b.n	8002d84 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	431a      	orrs	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	049b      	lsls	r3, r3, #18
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	ea42 0103 	orr.w	r1, r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	615a      	str	r2, [r3, #20]
}
 8002ce0:	e050      	b.n	8002d84 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02a      	beq.n	8002d40 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	049b      	lsls	r3, r3, #18
 8002d06:	431a      	orrs	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	ea42 0103 	orr.w	r1, r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002d32:	d027      	beq.n	8002d84 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	6852      	ldr	r2, [r2, #4]
 8002d3c:	619a      	str	r2, [r3, #24]
}
 8002d3e:	e021      	b.n	8002d84 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01d      	beq.n	8002d84 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	431a      	orrs	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	049b      	lsls	r3, r3, #18
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	ea42 0103 	orr.w	r1, r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	615a      	str	r2, [r3, #20]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e3d4      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da2:	4ba1      	ldr	r3, [pc, #644]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dac:	4b9e      	ldr	r3, [pc, #632]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80e4 	beq.w	8002f8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_RCC_OscConfig+0x4a>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	f040 808b 	bne.w	8002ee8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	f040 8087 	bne.w	8002ee8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dda:	4b93      	ldr	r3, [pc, #588]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e3ac      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	4b8c      	ldr	r3, [pc, #560]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_RCC_OscConfig+0x7c>
 8002e02:	4b89      	ldr	r3, [pc, #548]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0a:	e005      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
 8002e0c:	4b86      	ldr	r3, [pc, #536]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d223      	bcs.n	8002e64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fd3f 	bl	80038a4 <RCC_SetFlashLatencyFromMSIRange>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e38d      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e30:	4b7d      	ldr	r3, [pc, #500]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a7c      	ldr	r2, [pc, #496]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b7a      	ldr	r3, [pc, #488]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4977      	ldr	r1, [pc, #476]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4e:	4b76      	ldr	r3, [pc, #472]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	4972      	ldr	r1, [pc, #456]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 8002e62:	e025      	b.n	8002eb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e64:	4b70      	ldr	r3, [pc, #448]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a6f      	ldr	r2, [pc, #444]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	496a      	ldr	r1, [pc, #424]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e82:	4b69      	ldr	r3, [pc, #420]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	4965      	ldr	r1, [pc, #404]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fcff 	bl	80038a4 <RCC_SetFlashLatencyFromMSIRange>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e34d      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb0:	f000 fc36 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8002eb4:	4601      	mov	r1, r0
 8002eb6:	4b5c      	ldr	r3, [pc, #368]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	4a5a      	ldr	r2, [pc, #360]	; (800302c <HAL_RCC_OscConfig+0x29c>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa21 f303 	lsr.w	r3, r1, r3
 8002ecc:	4a58      	ldr	r2, [pc, #352]	; (8003030 <HAL_RCC_OscConfig+0x2a0>)
 8002ece:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ed0:	4b58      	ldr	r3, [pc, #352]	; (8003034 <HAL_RCC_OscConfig+0x2a4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb63 	bl	80005a0 <HAL_InitTick>
 8002eda:	4603      	mov	r3, r0
 8002edc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d052      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	e331      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d032      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ef0:	4b4d      	ldr	r3, [pc, #308]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a4c      	ldr	r2, [pc, #304]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002efc:	f7fd fba0 	bl	8000640 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f04:	f7fd fb9c 	bl	8000640 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e31a      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f16:	4b44      	ldr	r3, [pc, #272]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a40      	ldr	r2, [pc, #256]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b3e      	ldr	r3, [pc, #248]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	493b      	ldr	r1, [pc, #236]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f40:	4b39      	ldr	r3, [pc, #228]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	4936      	ldr	r1, [pc, #216]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
 8002f54:	e01a      	b.n	8002f8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f56:	4b34      	ldr	r3, [pc, #208]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a33      	ldr	r2, [pc, #204]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f62:	f7fd fb6d 	bl	8000640 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f6a:	f7fd fb69 	bl	8000640 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e2e7      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x1da>
 8002f88:	e000      	b.n	8002f8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d074      	beq.n	8003082 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x21a>
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d10e      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002faa:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d064      	beq.n	8003080 <HAL_RCC_OscConfig+0x2f0>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d160      	bne.n	8003080 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e2c4      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x24a>
 8002fcc:	4b16      	ldr	r3, [pc, #88]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a15      	ldr	r2, [pc, #84]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e01d      	b.n	8003016 <HAL_RCC_OscConfig+0x286>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCC_OscConfig+0x26e>
 8002fe4:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8002ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	e00b      	b.n	8003016 <HAL_RCC_OscConfig+0x286>
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8003004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a06      	ldr	r2, [pc, #24]	; (8003028 <HAL_RCC_OscConfig+0x298>)
 8003010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01c      	beq.n	8003058 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fd fb0f 	bl	8000640 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003024:	e011      	b.n	800304a <HAL_RCC_OscConfig+0x2ba>
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
 800302c:	08008798 	.word	0x08008798
 8003030:	20000094 	.word	0x20000094
 8003034:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fd fb02 	bl	8000640 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e280      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304a:	4baf      	ldr	r3, [pc, #700]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x2a8>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fd faf2 	bl	8000640 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7fd faee 	bl	8000640 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e26c      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003072:	4ba5      	ldr	r3, [pc, #660]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x2d0>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d060      	beq.n	8003150 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x310>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d119      	bne.n	80030ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d116      	bne.n	80030ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a0:	4b99      	ldr	r3, [pc, #612]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_OscConfig+0x328>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e249      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	4b93      	ldr	r3, [pc, #588]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	4990      	ldr	r1, [pc, #576]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030cc:	e040      	b.n	8003150 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d023      	beq.n	800311e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d6:	4b8c      	ldr	r3, [pc, #560]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a8b      	ldr	r2, [pc, #556]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fd faad 	bl	8000640 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ea:	f7fd faa9 	bl	8000640 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e227      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fc:	4b82      	ldr	r3, [pc, #520]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003108:	4b7f      	ldr	r3, [pc, #508]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	497c      	ldr	r1, [pc, #496]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	e018      	b.n	8003150 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311e:	4b7a      	ldr	r3, [pc, #488]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a79      	ldr	r2, [pc, #484]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fd fa89 	bl	8000640 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003132:	f7fd fa85 	bl	8000640 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e203      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003144:	4b70      	ldr	r3, [pc, #448]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d03c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01c      	beq.n	800319e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003164:	4b68      	ldr	r3, [pc, #416]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316a:	4a67      	ldr	r2, [pc, #412]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fd fa64 	bl	8000640 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317c:	f7fd fa60 	bl	8000640 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1de      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318e:	4b5e      	ldr	r3, [pc, #376]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ef      	beq.n	800317c <HAL_RCC_OscConfig+0x3ec>
 800319c:	e01b      	b.n	80031d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319e:	4b5a      	ldr	r3, [pc, #360]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	4a58      	ldr	r2, [pc, #352]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fd fa47 	bl	8000640 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fd fa43 	bl	8000640 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1c1      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c8:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80031ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ef      	bne.n	80031b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80a6 	beq.w	8003330 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031e8:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10d      	bne.n	8003210 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b44      	ldr	r3, [pc, #272]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	4a43      	ldr	r2, [pc, #268]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003200:	4b41      	ldr	r3, [pc, #260]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003210:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_RCC_OscConfig+0x57c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d118      	bne.n	800324e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800321c:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_RCC_OscConfig+0x57c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a3a      	ldr	r2, [pc, #232]	; (800330c <HAL_RCC_OscConfig+0x57c>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003228:	f7fd fa0a 	bl	8000640 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fd fa06 	bl	8000640 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e184      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003242:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_RCC_OscConfig+0x57c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_RCC_OscConfig+0x4d8>
 8003256:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003266:	e024      	b.n	80032b2 <HAL_RCC_OscConfig+0x522>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b05      	cmp	r3, #5
 800326e:	d110      	bne.n	8003292 <HAL_RCC_OscConfig+0x502>
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a24      	ldr	r2, [pc, #144]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003280:	4b21      	ldr	r3, [pc, #132]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a20      	ldr	r2, [pc, #128]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003290:	e00f      	b.n	80032b2 <HAL_RCC_OscConfig+0x522>
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a2:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	4a17      	ldr	r2, [pc, #92]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80032aa:	f023 0304 	bic.w	r3, r3, #4
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fd f9c1 	bl	8000640 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fd f9bd 	bl	8000640 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e139      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_OscConfig+0x578>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ed      	beq.n	80032c2 <HAL_RCC_OscConfig+0x532>
 80032e6:	e01a      	b.n	800331e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fd f9aa 	bl	8000640 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ee:	e00f      	b.n	8003310 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fd f9a6 	bl	8000640 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d906      	bls.n	8003310 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e122      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003310:	4b90      	ldr	r3, [pc, #576]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e8      	bne.n	80032f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003324:	4b8b      	ldr	r3, [pc, #556]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	4a8a      	ldr	r2, [pc, #552]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 800332a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8108 	beq.w	800354a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	2b02      	cmp	r3, #2
 8003340:	f040 80d0 	bne.w	80034e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003344:	4b83      	ldr	r3, [pc, #524]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	429a      	cmp	r2, r3
 8003356:	d130      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	3b01      	subs	r3, #1
 8003364:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d127      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d11f      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003384:	2a07      	cmp	r2, #7
 8003386:	bf14      	ite	ne
 8003388:	2201      	movne	r2, #1
 800338a:	2200      	moveq	r2, #0
 800338c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338e:	4293      	cmp	r3, r2
 8003390:	d113      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	3b01      	subs	r3, #1
 80033a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d109      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	3b01      	subs	r3, #1
 80033b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d06e      	beq.n	8003498 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d069      	beq.n	8003494 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033c0:	4b64      	ldr	r3, [pc, #400]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033cc:	4b61      	ldr	r3, [pc, #388]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b7      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033dc:	4b5d      	ldr	r3, [pc, #372]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a5c      	ldr	r2, [pc, #368]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80033e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e8:	f7fd f92a 	bl	8000640 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fd f926 	bl	8000640 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e0a4      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003402:	4b54      	ldr	r3, [pc, #336]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340e:	4b51      	ldr	r3, [pc, #324]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	4b51      	ldr	r3, [pc, #324]	; (8003558 <HAL_RCC_OscConfig+0x7c8>)
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800341e:	3a01      	subs	r2, #1
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	4311      	orrs	r1, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003428:	0212      	lsls	r2, r2, #8
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003430:	0852      	lsrs	r2, r2, #1
 8003432:	3a01      	subs	r2, #1
 8003434:	0552      	lsls	r2, r2, #21
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800343c:	0852      	lsrs	r2, r2, #1
 800343e:	3a01      	subs	r2, #1
 8003440:	0652      	lsls	r2, r2, #25
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003448:	0912      	lsrs	r2, r2, #4
 800344a:	0452      	lsls	r2, r2, #17
 800344c:	430a      	orrs	r2, r1
 800344e:	4941      	ldr	r1, [pc, #260]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003454:	4b3f      	ldr	r3, [pc, #252]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a3e      	ldr	r2, [pc, #248]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 800345a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003460:	4b3c      	ldr	r3, [pc, #240]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a3b      	ldr	r2, [pc, #236]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800346c:	f7fd f8e8 	bl	8000640 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fd f8e4 	bl	8000640 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e062      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003486:	4b33      	ldr	r3, [pc, #204]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003492:	e05a      	b.n	800354a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e059      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003498:	4b2e      	ldr	r3, [pc, #184]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d152      	bne.n	800354a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034a4:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2a      	ldr	r2, [pc, #168]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b0:	4b28      	ldr	r3, [pc, #160]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a27      	ldr	r2, [pc, #156]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034bc:	f7fd f8c0 	bl	8000640 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fd f8bc 	bl	8000640 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e03a      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x734>
 80034e2:	e032      	b.n	800354a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d02d      	beq.n	8003546 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a19      	ldr	r2, [pc, #100]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80034f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003508:	f023 0303 	bic.w	r3, r3, #3
 800350c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 8003514:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd f88f 	bl	8000640 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003526:	f7fd f88b 	bl	8000640 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e009      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_OscConfig+0x7c4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0x796>
 8003544:	e001      	b.n	800354a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000
 8003558:	f99d808c 	.word	0xf99d808c

0800355c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0c8      	b.n	8003702 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b66      	ldr	r3, [pc, #408]	; (800370c <HAL_RCC_ClockConfig+0x1b0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d910      	bls.n	80035a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b63      	ldr	r3, [pc, #396]	; (800370c <HAL_RCC_ClockConfig+0x1b0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 0207 	bic.w	r2, r3, #7
 8003586:	4961      	ldr	r1, [pc, #388]	; (800370c <HAL_RCC_ClockConfig+0x1b0>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b5f      	ldr	r3, [pc, #380]	; (800370c <HAL_RCC_ClockConfig+0x1b0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0b0      	b.n	8003702 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d04c      	beq.n	8003646 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b4:	4b56      	ldr	r3, [pc, #344]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d121      	bne.n	8003604 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e09e      	b.n	8003702 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035cc:	4b50      	ldr	r3, [pc, #320]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d115      	bne.n	8003604 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e092      	b.n	8003702 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d107      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035e4:	4b4a      	ldr	r3, [pc, #296]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e086      	b.n	8003702 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f4:	4b46      	ldr	r3, [pc, #280]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e07e      	b.n	8003702 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003604:	4b42      	ldr	r3, [pc, #264]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 0203 	bic.w	r2, r3, #3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	493f      	ldr	r1, [pc, #252]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003616:	f7fd f813 	bl	8000640 <HAL_GetTick>
 800361a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361c:	e00a      	b.n	8003634 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361e:	f7fd f80f 	bl	8000640 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e066      	b.n	8003702 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003634:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 020c 	and.w	r2, r3, #12
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	429a      	cmp	r2, r3
 8003644:	d1eb      	bne.n	800361e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003652:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	492c      	ldr	r1, [pc, #176]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_RCC_ClockConfig+0x1b0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d210      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <HAL_RCC_ClockConfig+0x1b0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 0207 	bic.w	r2, r3, #7
 800367a:	4924      	ldr	r1, [pc, #144]	; (800370c <HAL_RCC_ClockConfig+0x1b0>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_RCC_ClockConfig+0x1b0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e036      	b.n	8003702 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4918      	ldr	r1, [pc, #96]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036be:	4b14      	ldr	r3, [pc, #80]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4910      	ldr	r1, [pc, #64]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036d2:	f000 f825 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80036d6:	4601      	mov	r1, r0
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCC_ClockConfig+0x1b4>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	5cd3      	ldrb	r3, [r2, r3]
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	fa21 f303 	lsr.w	r3, r1, r3
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc ff52 	bl	80005a0 <HAL_InitTick>
 80036fc:	4603      	mov	r3, r0
 80036fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003700:	7afb      	ldrb	r3, [r7, #11]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40022000 	.word	0x40022000
 8003710:	40021000 	.word	0x40021000
 8003714:	08008798 	.word	0x08008798
 8003718:	20000094 	.word	0x20000094
 800371c:	20000000 	.word	0x20000000

08003720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	b480      	push	{r7}
 8003722:	b089      	sub	sp, #36	; 0x24
 8003724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372e:	4b3d      	ldr	r3, [pc, #244]	; (8003824 <HAL_RCC_GetSysClockFreq+0x104>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003738:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_RCC_GetSysClockFreq+0x104>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x34>
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d121      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d11e      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003754:	4b33      	ldr	r3, [pc, #204]	; (8003824 <HAL_RCC_GetSysClockFreq+0x104>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003760:	4b30      	ldr	r3, [pc, #192]	; (8003824 <HAL_RCC_GetSysClockFreq+0x104>)
 8003762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e005      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003770:	4b2c      	ldr	r3, [pc, #176]	; (8003824 <HAL_RCC_GetSysClockFreq+0x104>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10d      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d102      	bne.n	800379e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003798:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_RCC_GetSysClockFreq+0x10c>)
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e004      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037a4:	4b22      	ldr	r3, [pc, #136]	; (8003830 <HAL_RCC_GetSysClockFreq+0x110>)
 80037a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d133      	bne.n	8003816 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <HAL_RCC_GetSysClockFreq+0x104>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d002      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0xa4>
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d003      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0xaa>
 80037c2:	e005      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCC_GetSysClockFreq+0x10c>)
 80037c6:	617b      	str	r3, [r7, #20]
      break;
 80037c8:	e005      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037ca:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_RCC_GetSysClockFreq+0x110>)
 80037cc:	617b      	str	r3, [r7, #20]
      break;
 80037ce:	e002      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	617b      	str	r3, [r7, #20]
      break;
 80037d4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <HAL_RCC_GetSysClockFreq+0x104>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	3301      	adds	r3, #1
 80037e2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <HAL_RCC_GetSysClockFreq+0x104>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	fb02 f203 	mul.w	r2, r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_RCC_GetSysClockFreq+0x104>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	0e5b      	lsrs	r3, r3, #25
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	3301      	adds	r3, #1
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003816:	69bb      	ldr	r3, [r7, #24]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3724      	adds	r7, #36	; 0x24
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40021000 	.word	0x40021000
 8003828:	080087b0 	.word	0x080087b0
 800382c:	00f42400 	.word	0x00f42400
 8003830:	007a1200 	.word	0x007a1200

08003834 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <HAL_RCC_GetHCLKFreq+0x14>)
 800383a:	681b      	ldr	r3, [r3, #0]
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000094 	.word	0x20000094

0800384c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003850:	f7ff fff0 	bl	8003834 <HAL_RCC_GetHCLKFreq>
 8003854:	4601      	mov	r1, r0
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003862:	5cd3      	ldrb	r3, [r2, r3]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	080087a8 	.word	0x080087a8

08003878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800387c:	f7ff ffda 	bl	8003834 <HAL_RCC_GetHCLKFreq>
 8003880:	4601      	mov	r1, r0
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	0adb      	lsrs	r3, r3, #11
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800388e:	5cd3      	ldrb	r3, [r2, r3]
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	080087a8 	.word	0x080087a8

080038a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038b0:	4b2a      	ldr	r3, [pc, #168]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038bc:	f7fe fd24 	bl	8002308 <HAL_PWREx_GetVoltageRange>
 80038c0:	6178      	str	r0, [r7, #20]
 80038c2:	e014      	b.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c4:	4b25      	ldr	r3, [pc, #148]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	4a24      	ldr	r2, [pc, #144]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ce:	6593      	str	r3, [r2, #88]	; 0x58
 80038d0:	4b22      	ldr	r3, [pc, #136]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038dc:	f7fe fd14 	bl	8002308 <HAL_PWREx_GetVoltageRange>
 80038e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038e2:	4b1e      	ldr	r3, [pc, #120]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	4a1d      	ldr	r2, [pc, #116]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f4:	d10b      	bne.n	800390e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b80      	cmp	r3, #128	; 0x80
 80038fa:	d919      	bls.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2ba0      	cmp	r3, #160	; 0xa0
 8003900:	d902      	bls.n	8003908 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003902:	2302      	movs	r3, #2
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	e013      	b.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003908:	2301      	movs	r3, #1
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	e010      	b.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b80      	cmp	r3, #128	; 0x80
 8003912:	d902      	bls.n	800391a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003914:	2303      	movs	r3, #3
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	e00a      	b.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d102      	bne.n	8003926 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003920:	2302      	movs	r3, #2
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	e004      	b.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b70      	cmp	r3, #112	; 0x70
 800392a:	d101      	bne.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800392c:	2301      	movs	r3, #1
 800392e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 0207 	bic.w	r2, r3, #7
 8003938:	4909      	ldr	r1, [pc, #36]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	429a      	cmp	r2, r3
 800394c:	d001      	beq.n	8003952 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	40022000 	.word	0x40022000

08003964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800396c:	2300      	movs	r3, #0
 800396e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003970:	2300      	movs	r3, #0
 8003972:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397c:	2b00      	cmp	r3, #0
 800397e:	d03f      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003988:	d01c      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800398a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398e:	d802      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00e      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003994:	e01f      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003996:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800399a:	d003      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800399c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039a0:	d01c      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80039a2:	e018      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039a4:	4b85      	ldr	r3, [pc, #532]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a84      	ldr	r2, [pc, #528]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039b0:	e015      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fab9 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c2:	e00c      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3320      	adds	r3, #32
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fba0 	bl	8004110 <RCCEx_PLLSAI2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	74fb      	strb	r3, [r7, #19]
      break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80039dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e4:	4b75      	ldr	r3, [pc, #468]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f2:	4972      	ldr	r1, [pc, #456]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039fa:	e001      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d03f      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a14:	d01c      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a1a:	d802      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003a20:	e01f      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a26:	d003      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003a28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a2c:	d01c      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003a2e:	e018      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a30:	4b62      	ldr	r3, [pc, #392]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a61      	ldr	r2, [pc, #388]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a3c:	e015      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fa73 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a4e:	e00c      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3320      	adds	r3, #32
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fb5a 	bl	8004110 <RCCEx_PLLSAI2_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a60:	e003      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	74fb      	strb	r3, [r7, #19]
      break;
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6a:	7cfb      	ldrb	r3, [r7, #19]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a70:	4b52      	ldr	r3, [pc, #328]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a7e:	494f      	ldr	r1, [pc, #316]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a86:	e001      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a0 	beq.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab4:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	4a40      	ldr	r2, [pc, #256]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac0:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003acc:	2301      	movs	r3, #1
 8003ace:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad0:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3a      	ldr	r2, [pc, #232]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003adc:	f7fc fdb0 	bl	8000640 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ae2:	e009      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae4:	f7fc fdac 	bl	8000640 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d902      	bls.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	74fb      	strb	r3, [r7, #19]
        break;
 8003af6:	e005      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af8:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ef      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d15c      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b0a:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01f      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d019      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b34:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b44:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b54:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7fc fd6b 	bl	8000640 <HAL_GetTick>
 8003b6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b6c:	e00b      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fc fd67 	bl	8000640 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d902      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	74fb      	strb	r3, [r7, #19]
            break;
 8003b84:	e006      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ec      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003baa:	4904      	ldr	r1, [pc, #16]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bb2:	e009      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	74bb      	strb	r3, [r7, #18]
 8003bb8:	e006      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc8:	7c7b      	ldrb	r3, [r7, #17]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bce:	4b9e      	ldr	r3, [pc, #632]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	4a9d      	ldr	r2, [pc, #628]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be6:	4b98      	ldr	r3, [pc, #608]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	f023 0203 	bic.w	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	4994      	ldr	r1, [pc, #592]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c08:	4b8f      	ldr	r3, [pc, #572]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f023 020c 	bic.w	r2, r3, #12
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	498c      	ldr	r1, [pc, #560]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c2a:	4b87      	ldr	r3, [pc, #540]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	4983      	ldr	r1, [pc, #524]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c4c:	4b7e      	ldr	r3, [pc, #504]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	497b      	ldr	r1, [pc, #492]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c6e:	4b76      	ldr	r3, [pc, #472]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7c:	4972      	ldr	r1, [pc, #456]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c90:	4b6d      	ldr	r3, [pc, #436]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	496a      	ldr	r1, [pc, #424]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cb2:	4b65      	ldr	r3, [pc, #404]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	4961      	ldr	r1, [pc, #388]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cd4:	4b5c      	ldr	r3, [pc, #368]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce2:	4959      	ldr	r1, [pc, #356]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf6:	4b54      	ldr	r3, [pc, #336]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	4950      	ldr	r1, [pc, #320]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d18:	4b4b      	ldr	r3, [pc, #300]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	4948      	ldr	r1, [pc, #288]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d3a:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	493f      	ldr	r1, [pc, #252]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d028      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d5c:	4b3a      	ldr	r3, [pc, #232]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6a:	4937      	ldr	r1, [pc, #220]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7a:	d106      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7c:	4b32      	ldr	r3, [pc, #200]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a31      	ldr	r2, [pc, #196]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d86:	60d3      	str	r3, [r2, #12]
 8003d88:	e011      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d92:	d10c      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3304      	adds	r3, #4
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f8c8 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d028      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dba:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	491f      	ldr	r1, [pc, #124]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd8:	d106      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dda:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de4:	60d3      	str	r3, [r2, #12]
 8003de6:	e011      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3304      	adds	r3, #4
 8003df6:	2101      	movs	r1, #1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f899 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d02b      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e26:	4908      	ldr	r1, [pc, #32]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e36:	d109      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a02      	ldr	r2, [pc, #8]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e42:	60d3      	str	r3, [r2, #12]
 8003e44:	e014      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f867 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e66:	7cfb      	ldrb	r3, [r7, #19]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02f      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8a:	4928      	ldr	r1, [pc, #160]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f844 	bl	8003f30 <RCCEx_PLLSAI1_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d014      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003eb2:	7cfb      	ldrb	r3, [r7, #19]
 8003eb4:	74bb      	strb	r3, [r7, #18]
 8003eb6:	e011      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3320      	adds	r3, #32
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 f921 	bl	8004110 <RCCEx_PLLSAI2_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003ed8:	7cfb      	ldrb	r3, [r7, #19]
 8003eda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ee8:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef6:	490d      	ldr	r1, [pc, #52]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1a:	4904      	ldr	r1, [pc, #16]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f22:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021000 	.word	0x40021000

08003f30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f3e:	4b73      	ldr	r3, [pc, #460]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d018      	beq.n	8003f7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f4a:	4b70      	ldr	r3, [pc, #448]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0203 	and.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d10d      	bne.n	8003f76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f62:	4b6a      	ldr	r3, [pc, #424]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
       ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d044      	beq.n	8004000 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	e041      	b.n	8004000 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d00c      	beq.n	8003f9e <RCCEx_PLLSAI1_Config+0x6e>
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d013      	beq.n	8003fb0 <RCCEx_PLLSAI1_Config+0x80>
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d120      	bne.n	8003fce <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f8c:	4b5f      	ldr	r3, [pc, #380]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d11d      	bne.n	8003fd4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9c:	e01a      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f9e:	4b5b      	ldr	r3, [pc, #364]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d116      	bne.n	8003fd8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fae:	e013      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fb0:	4b56      	ldr	r3, [pc, #344]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10f      	bne.n	8003fdc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fcc:	e006      	b.n	8003fdc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd2:	e004      	b.n	8003fde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003fd4:	bf00      	nop
 8003fd6:	e002      	b.n	8003fde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003fd8:	bf00      	nop
 8003fda:	e000      	b.n	8003fde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003fdc:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10d      	bne.n	8004000 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fe4:	4b49      	ldr	r3, [pc, #292]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	4944      	ldr	r1, [pc, #272]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d17d      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a40      	ldr	r2, [pc, #256]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 800400c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004012:	f7fc fb15 	bl	8000640 <HAL_GetTick>
 8004016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004018:	e009      	b.n	800402e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800401a:	f7fc fb11 	bl	8000640 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d902      	bls.n	800402e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	73fb      	strb	r3, [r7, #15]
        break;
 800402c:	e005      	b.n	800403a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800402e:	4b37      	ldr	r3, [pc, #220]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1ef      	bne.n	800401a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d160      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d111      	bne.n	800406a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004046:	4b31      	ldr	r3, [pc, #196]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800404e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6892      	ldr	r2, [r2, #8]
 8004056:	0211      	lsls	r1, r2, #8
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68d2      	ldr	r2, [r2, #12]
 800405c:	0912      	lsrs	r2, r2, #4
 800405e:	0452      	lsls	r2, r2, #17
 8004060:	430a      	orrs	r2, r1
 8004062:	492a      	ldr	r1, [pc, #168]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	610b      	str	r3, [r1, #16]
 8004068:	e027      	b.n	80040ba <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d112      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004070:	4b26      	ldr	r3, [pc, #152]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004078:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6892      	ldr	r2, [r2, #8]
 8004080:	0211      	lsls	r1, r2, #8
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6912      	ldr	r2, [r2, #16]
 8004086:	0852      	lsrs	r2, r2, #1
 8004088:	3a01      	subs	r2, #1
 800408a:	0552      	lsls	r2, r2, #21
 800408c:	430a      	orrs	r2, r1
 800408e:	491f      	ldr	r1, [pc, #124]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	610b      	str	r3, [r1, #16]
 8004094:	e011      	b.n	80040ba <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800409e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6892      	ldr	r2, [r2, #8]
 80040a6:	0211      	lsls	r1, r2, #8
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6952      	ldr	r2, [r2, #20]
 80040ac:	0852      	lsrs	r2, r2, #1
 80040ae:	3a01      	subs	r2, #1
 80040b0:	0652      	lsls	r2, r2, #25
 80040b2:	430a      	orrs	r2, r1
 80040b4:	4915      	ldr	r1, [pc, #84]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fc fabb 	bl	8000640 <HAL_GetTick>
 80040ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040cc:	e009      	b.n	80040e2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040ce:	f7fc fab7 	bl	8000640 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d902      	bls.n	80040e2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	73fb      	strb	r3, [r7, #15]
          break;
 80040e0:	e005      	b.n	80040ee <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0ef      	beq.n	80040ce <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d106      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4903      	ldr	r1, [pc, #12]	; (800410c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000

08004110 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800411e:	4b68      	ldr	r3, [pc, #416]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d018      	beq.n	800415c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800412a:	4b65      	ldr	r3, [pc, #404]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0203 	and.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d10d      	bne.n	8004156 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
       ||
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004142:	4b5f      	ldr	r3, [pc, #380]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
       ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d044      	beq.n	80041e0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	e041      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d00c      	beq.n	800417e <RCCEx_PLLSAI2_Config+0x6e>
 8004164:	2b03      	cmp	r3, #3
 8004166:	d013      	beq.n	8004190 <RCCEx_PLLSAI2_Config+0x80>
 8004168:	2b01      	cmp	r3, #1
 800416a:	d120      	bne.n	80041ae <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800416c:	4b54      	ldr	r3, [pc, #336]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11d      	bne.n	80041b4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417c:	e01a      	b.n	80041b4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800417e:	4b50      	ldr	r3, [pc, #320]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418e:	e013      	b.n	80041b8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004190:	4b4b      	ldr	r3, [pc, #300]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10f      	bne.n	80041bc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800419c:	4b48      	ldr	r3, [pc, #288]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ac:	e006      	b.n	80041bc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      break;
 80041b2:	e004      	b.n	80041be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80041b4:	bf00      	nop
 80041b6:	e002      	b.n	80041be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80041bc:	bf00      	nop
    }

    if(status == HAL_OK)
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10d      	bne.n	80041e0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041c4:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	430b      	orrs	r3, r1
 80041da:	4939      	ldr	r1, [pc, #228]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d167      	bne.n	80042b6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041e6:	4b36      	ldr	r3, [pc, #216]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a35      	ldr	r2, [pc, #212]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f2:	f7fc fa25 	bl	8000640 <HAL_GetTick>
 80041f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041f8:	e009      	b.n	800420e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041fa:	f7fc fa21 	bl	8000640 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d902      	bls.n	800420e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	73fb      	strb	r3, [r7, #15]
        break;
 800420c:	e005      	b.n	800421a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800420e:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ef      	bne.n	80041fa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d14a      	bne.n	80042b6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d111      	bne.n	800424a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004226:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800422e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6892      	ldr	r2, [r2, #8]
 8004236:	0211      	lsls	r1, r2, #8
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68d2      	ldr	r2, [r2, #12]
 800423c:	0912      	lsrs	r2, r2, #4
 800423e:	0452      	lsls	r2, r2, #17
 8004240:	430a      	orrs	r2, r1
 8004242:	491f      	ldr	r1, [pc, #124]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004244:	4313      	orrs	r3, r2
 8004246:	614b      	str	r3, [r1, #20]
 8004248:	e011      	b.n	800426e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004252:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6892      	ldr	r2, [r2, #8]
 800425a:	0211      	lsls	r1, r2, #8
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6912      	ldr	r2, [r2, #16]
 8004260:	0852      	lsrs	r2, r2, #1
 8004262:	3a01      	subs	r2, #1
 8004264:	0652      	lsls	r2, r2, #25
 8004266:	430a      	orrs	r2, r1
 8004268:	4915      	ldr	r1, [pc, #84]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800426e:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427a:	f7fc f9e1 	bl	8000640 <HAL_GetTick>
 800427e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004280:	e009      	b.n	8004296 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004282:	f7fc f9dd 	bl	8000640 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d902      	bls.n	8004296 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	73fb      	strb	r3, [r7, #15]
          break;
 8004294:	e005      	b.n	80042a2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ef      	beq.n	8004282 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	4903      	ldr	r1, [pc, #12]	; (80042c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021000 	.word	0x40021000

080042c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e049      	b.n	800436a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f003 fc4a 	bl	8007b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f000 faa6 	bl	8004854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d001      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e04f      	b.n	800442c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a23      	ldr	r2, [pc, #140]	; (8004438 <HAL_TIM_Base_Start_IT+0xc4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01d      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x76>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b6:	d018      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x76>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <HAL_TIM_Base_Start_IT+0xc8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d013      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x76>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <HAL_TIM_Base_Start_IT+0xcc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00e      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x76>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <HAL_TIM_Base_Start_IT+0xd0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d009      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x76>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <HAL_TIM_Base_Start_IT+0xd4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x76>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a19      	ldr	r2, [pc, #100]	; (800444c <HAL_TIM_Base_Start_IT+0xd8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d115      	bne.n	8004416 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	4b17      	ldr	r3, [pc, #92]	; (8004450 <HAL_TIM_Base_Start_IT+0xdc>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b06      	cmp	r3, #6
 80043fa:	d015      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0xb4>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004402:	d011      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	e008      	b.n	8004428 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e000      	b.n	800442a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004428:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40000c00 	.word	0x40000c00
 8004448:	40013400 	.word	0x40013400
 800444c:	40014000 	.word	0x40014000
 8004450:	00010007 	.word	0x00010007

08004454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0202 	mvn.w	r2, #2
 8004480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9be 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9b0 	bl	8004804 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f9c1 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0204 	mvn.w	r2, #4
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2202      	movs	r2, #2
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f994 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f986 	bl	8004804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f997 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b08      	cmp	r3, #8
 8004510:	d122      	bne.n	8004558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b08      	cmp	r3, #8
 800451e:	d11b      	bne.n	8004558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0208 	mvn.w	r2, #8
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2204      	movs	r2, #4
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f96a 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f95c 	bl	8004804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f96d 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b10      	cmp	r3, #16
 8004564:	d122      	bne.n	80045ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b10      	cmp	r3, #16
 8004572:	d11b      	bne.n	80045ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0210 	mvn.w	r2, #16
 800457c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2208      	movs	r2, #8
 8004582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f940 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 8004598:	e005      	b.n	80045a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f932 	bl	8004804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f943 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d10e      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d107      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0201 	mvn.w	r2, #1
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f002 f8dc 	bl	8006790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d10e      	bne.n	8004604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	2b80      	cmp	r3, #128	; 0x80
 80045f2:	d107      	bne.n	8004604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 faee 	bl	8004be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004612:	d10e      	bne.n	8004632 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b80      	cmp	r3, #128	; 0x80
 8004620:	d107      	bne.n	8004632 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800462a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fae1 	bl	8004bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d10e      	bne.n	800465e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d107      	bne.n	800465e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8f1 	bl	8004840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b20      	cmp	r3, #32
 800466a:	d10e      	bne.n	800468a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b20      	cmp	r3, #32
 8004678:	d107      	bne.n	800468a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f06f 0220 	mvn.w	r2, #32
 8004682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 faa1 	bl	8004bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_ConfigClockSource+0x18>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e0a8      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x16a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046d4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d067      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x124>
 80046e6:	2b40      	cmp	r3, #64	; 0x40
 80046e8:	d80b      	bhi.n	8004702 <HAL_TIM_ConfigClockSource+0x70>
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d073      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x144>
 80046ee:	2b10      	cmp	r3, #16
 80046f0:	d802      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x66>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d06f      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046f6:	e078      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d06c      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x144>
 80046fc:	2b30      	cmp	r3, #48	; 0x30
 80046fe:	d06a      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004700:	e073      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004702:	2b70      	cmp	r3, #112	; 0x70
 8004704:	d00d      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x90>
 8004706:	2b70      	cmp	r3, #112	; 0x70
 8004708:	d804      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x82>
 800470a:	2b50      	cmp	r3, #80	; 0x50
 800470c:	d033      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0xe4>
 800470e:	2b60      	cmp	r3, #96	; 0x60
 8004710:	d041      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004712:	e06a      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d066      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0x156>
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471e:	d017      	beq.n	8004750 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004720:	e063      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6899      	ldr	r1, [r3, #8]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f000 f9a3 	bl	8004a7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004744:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	609a      	str	r2, [r3, #8]
      break;
 800474e:	e04c      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6899      	ldr	r1, [r3, #8]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f000 f98c 	bl	8004a7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004772:	609a      	str	r2, [r3, #8]
      break;
 8004774:	e039      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6859      	ldr	r1, [r3, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	461a      	mov	r2, r3
 8004784:	f000 f900 	bl	8004988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2150      	movs	r1, #80	; 0x50
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f959 	bl	8004a46 <TIM_ITRx_SetConfig>
      break;
 8004794:	e029      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6859      	ldr	r1, [r3, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f000 f91f 	bl	80049e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2160      	movs	r1, #96	; 0x60
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f949 	bl	8004a46 <TIM_ITRx_SetConfig>
      break;
 80047b4:	e019      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f000 f8e0 	bl	8004988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2140      	movs	r1, #64	; 0x40
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f939 	bl	8004a46 <TIM_ITRx_SetConfig>
      break;
 80047d4:	e009      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f000 f930 	bl	8004a46 <TIM_ITRx_SetConfig>
        break;
 80047e6:	e000      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x158>
      break;
 80047e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a40      	ldr	r2, [pc, #256]	; (8004968 <TIM_Base_SetConfig+0x114>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004872:	d00f      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3d      	ldr	r2, [pc, #244]	; (800496c <TIM_Base_SetConfig+0x118>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00b      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a3c      	ldr	r2, [pc, #240]	; (8004970 <TIM_Base_SetConfig+0x11c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3b      	ldr	r2, [pc, #236]	; (8004974 <TIM_Base_SetConfig+0x120>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a3a      	ldr	r2, [pc, #232]	; (8004978 <TIM_Base_SetConfig+0x124>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d108      	bne.n	80048a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2f      	ldr	r2, [pc, #188]	; (8004968 <TIM_Base_SetConfig+0x114>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01f      	beq.n	80048ee <TIM_Base_SetConfig+0x9a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d01b      	beq.n	80048ee <TIM_Base_SetConfig+0x9a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2c      	ldr	r2, [pc, #176]	; (800496c <TIM_Base_SetConfig+0x118>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d017      	beq.n	80048ee <TIM_Base_SetConfig+0x9a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2b      	ldr	r2, [pc, #172]	; (8004970 <TIM_Base_SetConfig+0x11c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <TIM_Base_SetConfig+0x9a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <TIM_Base_SetConfig+0x120>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00f      	beq.n	80048ee <TIM_Base_SetConfig+0x9a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a29      	ldr	r2, [pc, #164]	; (8004978 <TIM_Base_SetConfig+0x124>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00b      	beq.n	80048ee <TIM_Base_SetConfig+0x9a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a28      	ldr	r2, [pc, #160]	; (800497c <TIM_Base_SetConfig+0x128>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <TIM_Base_SetConfig+0x9a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a27      	ldr	r2, [pc, #156]	; (8004980 <TIM_Base_SetConfig+0x12c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d003      	beq.n	80048ee <TIM_Base_SetConfig+0x9a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a26      	ldr	r2, [pc, #152]	; (8004984 <TIM_Base_SetConfig+0x130>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d108      	bne.n	8004900 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a10      	ldr	r2, [pc, #64]	; (8004968 <TIM_Base_SetConfig+0x114>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00f      	beq.n	800494c <TIM_Base_SetConfig+0xf8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <TIM_Base_SetConfig+0x124>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00b      	beq.n	800494c <TIM_Base_SetConfig+0xf8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a11      	ldr	r2, [pc, #68]	; (800497c <TIM_Base_SetConfig+0x128>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <TIM_Base_SetConfig+0xf8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a10      	ldr	r2, [pc, #64]	; (8004980 <TIM_Base_SetConfig+0x12c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_Base_SetConfig+0xf8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a0f      	ldr	r2, [pc, #60]	; (8004984 <TIM_Base_SetConfig+0x130>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d103      	bne.n	8004954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	615a      	str	r2, [r3, #20]
}
 800495a:	bf00      	nop
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
 8004978:	40013400 	.word	0x40013400
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800

08004988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0201 	bic.w	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 030a 	bic.w	r3, r3, #10
 80049c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b087      	sub	sp, #28
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0210 	bic.w	r2, r3, #16
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	031b      	lsls	r3, r3, #12
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f043 0307 	orr.w	r3, r3, #7
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	609a      	str	r2, [r3, #8]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	021a      	lsls	r2, r3, #8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	609a      	str	r2, [r3, #8]
}
 8004ab0:	bf00      	nop
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e068      	b.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2e      	ldr	r2, [pc, #184]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2d      	ldr	r2, [pc, #180]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d108      	bne.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01d      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b46:	d018      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1b      	ldr	r2, [pc, #108]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1a      	ldr	r2, [pc, #104]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00e      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d009      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d004      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d10c      	bne.n	8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40013400 	.word	0x40013400
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40014000 	.word	0x40014000

08004bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e040      	b.n	8004c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f002 ffe2 	bl	8007bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2224      	movs	r2, #36	; 0x24
 8004c34:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f8c0 	bl	8004dcc <UART_SetConfig>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e022      	b.n	8004c9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fb3e 	bl	80052e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fbc5 	bl	8005424 <UART_CheckIdleState>
 8004c9a:	4603      	mov	r3, r0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08a      	sub	sp, #40	; 0x28
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	f040 8081 	bne.w	8004dc0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_UART_Transmit+0x26>
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e079      	b.n	8004dc2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_UART_Transmit+0x38>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e072      	b.n	8004dc2 <HAL_UART_Transmit+0x11e>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2221      	movs	r2, #33	; 0x21
 8004cee:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004cf0:	f7fb fca6 	bl	8000640 <HAL_GetTick>
 8004cf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	88fa      	ldrh	r2, [r7, #6]
 8004cfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	88fa      	ldrh	r2, [r7, #6]
 8004d02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	d108      	bne.n	8004d22 <HAL_UART_Transmit+0x7e>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d104      	bne.n	8004d22 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	e003      	b.n	8004d2a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004d32:	e02d      	b.n	8004d90 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fbb5 	bl	80054ae <UART_WaitOnFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e039      	b.n	8004dc2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	881a      	ldrh	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d60:	b292      	uxth	r2, r2
 8004d62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	3302      	adds	r3, #2
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	e008      	b.n	8004d7e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	781a      	ldrb	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	b292      	uxth	r2, r2
 8004d76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1cb      	bne.n	8004d34 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	2140      	movs	r1, #64	; 0x40
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fb81 	bl	80054ae <UART_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e005      	b.n	8004dc2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e000      	b.n	8004dc2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dcc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004dd0:	b088      	sub	sp, #32
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4bac      	ldr	r3, [pc, #688]	; (80050ac <UART_SetConfig+0x2e0>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	69f9      	ldr	r1, [r7, #28]
 8004e02:	430b      	orrs	r3, r1
 8004e04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4aa2      	ldr	r2, [pc, #648]	; (80050b0 <UART_SetConfig+0x2e4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a99      	ldr	r2, [pc, #612]	; (80050b4 <UART_SetConfig+0x2e8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d121      	bne.n	8004e98 <UART_SetConfig+0xcc>
 8004e54:	4b98      	ldr	r3, [pc, #608]	; (80050b8 <UART_SetConfig+0x2ec>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d816      	bhi.n	8004e90 <UART_SetConfig+0xc4>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <UART_SetConfig+0x9c>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004e79 	.word	0x08004e79
 8004e6c:	08004e85 	.word	0x08004e85
 8004e70:	08004e7f 	.word	0x08004e7f
 8004e74:	08004e8b 	.word	0x08004e8b
 8004e78:	2301      	movs	r3, #1
 8004e7a:	76fb      	strb	r3, [r7, #27]
 8004e7c:	e0e8      	b.n	8005050 <UART_SetConfig+0x284>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	76fb      	strb	r3, [r7, #27]
 8004e82:	e0e5      	b.n	8005050 <UART_SetConfig+0x284>
 8004e84:	2304      	movs	r3, #4
 8004e86:	76fb      	strb	r3, [r7, #27]
 8004e88:	e0e2      	b.n	8005050 <UART_SetConfig+0x284>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	76fb      	strb	r3, [r7, #27]
 8004e8e:	e0df      	b.n	8005050 <UART_SetConfig+0x284>
 8004e90:	2310      	movs	r3, #16
 8004e92:	76fb      	strb	r3, [r7, #27]
 8004e94:	bf00      	nop
 8004e96:	e0db      	b.n	8005050 <UART_SetConfig+0x284>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a87      	ldr	r2, [pc, #540]	; (80050bc <UART_SetConfig+0x2f0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d134      	bne.n	8004f0c <UART_SetConfig+0x140>
 8004ea2:	4b85      	ldr	r3, [pc, #532]	; (80050b8 <UART_SetConfig+0x2ec>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	f003 030c 	and.w	r3, r3, #12
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d829      	bhi.n	8004f04 <UART_SetConfig+0x138>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0xec>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004eed 	.word	0x08004eed
 8004ebc:	08004f05 	.word	0x08004f05
 8004ec0:	08004f05 	.word	0x08004f05
 8004ec4:	08004f05 	.word	0x08004f05
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08004f05 	.word	0x08004f05
 8004ed8:	08004ef3 	.word	0x08004ef3
 8004edc:	08004f05 	.word	0x08004f05
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f05 	.word	0x08004f05
 8004ee8:	08004eff 	.word	0x08004eff
 8004eec:	2300      	movs	r3, #0
 8004eee:	76fb      	strb	r3, [r7, #27]
 8004ef0:	e0ae      	b.n	8005050 <UART_SetConfig+0x284>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	76fb      	strb	r3, [r7, #27]
 8004ef6:	e0ab      	b.n	8005050 <UART_SetConfig+0x284>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	76fb      	strb	r3, [r7, #27]
 8004efc:	e0a8      	b.n	8005050 <UART_SetConfig+0x284>
 8004efe:	2308      	movs	r3, #8
 8004f00:	76fb      	strb	r3, [r7, #27]
 8004f02:	e0a5      	b.n	8005050 <UART_SetConfig+0x284>
 8004f04:	2310      	movs	r3, #16
 8004f06:	76fb      	strb	r3, [r7, #27]
 8004f08:	bf00      	nop
 8004f0a:	e0a1      	b.n	8005050 <UART_SetConfig+0x284>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a6b      	ldr	r2, [pc, #428]	; (80050c0 <UART_SetConfig+0x2f4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d120      	bne.n	8004f58 <UART_SetConfig+0x18c>
 8004f16:	4b68      	ldr	r3, [pc, #416]	; (80050b8 <UART_SetConfig+0x2ec>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d00f      	beq.n	8004f44 <UART_SetConfig+0x178>
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d802      	bhi.n	8004f2e <UART_SetConfig+0x162>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <UART_SetConfig+0x16c>
 8004f2c:	e010      	b.n	8004f50 <UART_SetConfig+0x184>
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d005      	beq.n	8004f3e <UART_SetConfig+0x172>
 8004f32:	2b30      	cmp	r3, #48	; 0x30
 8004f34:	d009      	beq.n	8004f4a <UART_SetConfig+0x17e>
 8004f36:	e00b      	b.n	8004f50 <UART_SetConfig+0x184>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	76fb      	strb	r3, [r7, #27]
 8004f3c:	e088      	b.n	8005050 <UART_SetConfig+0x284>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	76fb      	strb	r3, [r7, #27]
 8004f42:	e085      	b.n	8005050 <UART_SetConfig+0x284>
 8004f44:	2304      	movs	r3, #4
 8004f46:	76fb      	strb	r3, [r7, #27]
 8004f48:	e082      	b.n	8005050 <UART_SetConfig+0x284>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	76fb      	strb	r3, [r7, #27]
 8004f4e:	e07f      	b.n	8005050 <UART_SetConfig+0x284>
 8004f50:	2310      	movs	r3, #16
 8004f52:	76fb      	strb	r3, [r7, #27]
 8004f54:	bf00      	nop
 8004f56:	e07b      	b.n	8005050 <UART_SetConfig+0x284>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a59      	ldr	r2, [pc, #356]	; (80050c4 <UART_SetConfig+0x2f8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d120      	bne.n	8004fa4 <UART_SetConfig+0x1d8>
 8004f62:	4b55      	ldr	r3, [pc, #340]	; (80050b8 <UART_SetConfig+0x2ec>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f6c:	2b40      	cmp	r3, #64	; 0x40
 8004f6e:	d00f      	beq.n	8004f90 <UART_SetConfig+0x1c4>
 8004f70:	2b40      	cmp	r3, #64	; 0x40
 8004f72:	d802      	bhi.n	8004f7a <UART_SetConfig+0x1ae>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <UART_SetConfig+0x1b8>
 8004f78:	e010      	b.n	8004f9c <UART_SetConfig+0x1d0>
 8004f7a:	2b80      	cmp	r3, #128	; 0x80
 8004f7c:	d005      	beq.n	8004f8a <UART_SetConfig+0x1be>
 8004f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f80:	d009      	beq.n	8004f96 <UART_SetConfig+0x1ca>
 8004f82:	e00b      	b.n	8004f9c <UART_SetConfig+0x1d0>
 8004f84:	2300      	movs	r3, #0
 8004f86:	76fb      	strb	r3, [r7, #27]
 8004f88:	e062      	b.n	8005050 <UART_SetConfig+0x284>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	76fb      	strb	r3, [r7, #27]
 8004f8e:	e05f      	b.n	8005050 <UART_SetConfig+0x284>
 8004f90:	2304      	movs	r3, #4
 8004f92:	76fb      	strb	r3, [r7, #27]
 8004f94:	e05c      	b.n	8005050 <UART_SetConfig+0x284>
 8004f96:	2308      	movs	r3, #8
 8004f98:	76fb      	strb	r3, [r7, #27]
 8004f9a:	e059      	b.n	8005050 <UART_SetConfig+0x284>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	76fb      	strb	r3, [r7, #27]
 8004fa0:	bf00      	nop
 8004fa2:	e055      	b.n	8005050 <UART_SetConfig+0x284>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a47      	ldr	r2, [pc, #284]	; (80050c8 <UART_SetConfig+0x2fc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d124      	bne.n	8004ff8 <UART_SetConfig+0x22c>
 8004fae:	4b42      	ldr	r3, [pc, #264]	; (80050b8 <UART_SetConfig+0x2ec>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fbc:	d012      	beq.n	8004fe4 <UART_SetConfig+0x218>
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc2:	d802      	bhi.n	8004fca <UART_SetConfig+0x1fe>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d007      	beq.n	8004fd8 <UART_SetConfig+0x20c>
 8004fc8:	e012      	b.n	8004ff0 <UART_SetConfig+0x224>
 8004fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fce:	d006      	beq.n	8004fde <UART_SetConfig+0x212>
 8004fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd4:	d009      	beq.n	8004fea <UART_SetConfig+0x21e>
 8004fd6:	e00b      	b.n	8004ff0 <UART_SetConfig+0x224>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	76fb      	strb	r3, [r7, #27]
 8004fdc:	e038      	b.n	8005050 <UART_SetConfig+0x284>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	76fb      	strb	r3, [r7, #27]
 8004fe2:	e035      	b.n	8005050 <UART_SetConfig+0x284>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	76fb      	strb	r3, [r7, #27]
 8004fe8:	e032      	b.n	8005050 <UART_SetConfig+0x284>
 8004fea:	2308      	movs	r3, #8
 8004fec:	76fb      	strb	r3, [r7, #27]
 8004fee:	e02f      	b.n	8005050 <UART_SetConfig+0x284>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	76fb      	strb	r3, [r7, #27]
 8004ff4:	bf00      	nop
 8004ff6:	e02b      	b.n	8005050 <UART_SetConfig+0x284>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2c      	ldr	r2, [pc, #176]	; (80050b0 <UART_SetConfig+0x2e4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d124      	bne.n	800504c <UART_SetConfig+0x280>
 8005002:	4b2d      	ldr	r3, [pc, #180]	; (80050b8 <UART_SetConfig+0x2ec>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800500c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005010:	d012      	beq.n	8005038 <UART_SetConfig+0x26c>
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005016:	d802      	bhi.n	800501e <UART_SetConfig+0x252>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <UART_SetConfig+0x260>
 800501c:	e012      	b.n	8005044 <UART_SetConfig+0x278>
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d006      	beq.n	8005032 <UART_SetConfig+0x266>
 8005024:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005028:	d009      	beq.n	800503e <UART_SetConfig+0x272>
 800502a:	e00b      	b.n	8005044 <UART_SetConfig+0x278>
 800502c:	2300      	movs	r3, #0
 800502e:	76fb      	strb	r3, [r7, #27]
 8005030:	e00e      	b.n	8005050 <UART_SetConfig+0x284>
 8005032:	2302      	movs	r3, #2
 8005034:	76fb      	strb	r3, [r7, #27]
 8005036:	e00b      	b.n	8005050 <UART_SetConfig+0x284>
 8005038:	2304      	movs	r3, #4
 800503a:	76fb      	strb	r3, [r7, #27]
 800503c:	e008      	b.n	8005050 <UART_SetConfig+0x284>
 800503e:	2308      	movs	r3, #8
 8005040:	76fb      	strb	r3, [r7, #27]
 8005042:	e005      	b.n	8005050 <UART_SetConfig+0x284>
 8005044:	2310      	movs	r3, #16
 8005046:	76fb      	strb	r3, [r7, #27]
 8005048:	bf00      	nop
 800504a:	e001      	b.n	8005050 <UART_SetConfig+0x284>
 800504c:	2310      	movs	r3, #16
 800504e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a16      	ldr	r2, [pc, #88]	; (80050b0 <UART_SetConfig+0x2e4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	f040 8087 	bne.w	800516a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800505c:	7efb      	ldrb	r3, [r7, #27]
 800505e:	2b08      	cmp	r3, #8
 8005060:	d836      	bhi.n	80050d0 <UART_SetConfig+0x304>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <UART_SetConfig+0x29c>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	0800508d 	.word	0x0800508d
 800506c:	080050d1 	.word	0x080050d1
 8005070:	08005095 	.word	0x08005095
 8005074:	080050d1 	.word	0x080050d1
 8005078:	0800509b 	.word	0x0800509b
 800507c:	080050d1 	.word	0x080050d1
 8005080:	080050d1 	.word	0x080050d1
 8005084:	080050d1 	.word	0x080050d1
 8005088:	080050a3 	.word	0x080050a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fe fbde 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 8005090:	6178      	str	r0, [r7, #20]
        break;
 8005092:	e022      	b.n	80050da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <UART_SetConfig+0x300>)
 8005096:	617b      	str	r3, [r7, #20]
        break;
 8005098:	e01f      	b.n	80050da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800509a:	f7fe fb41 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 800509e:	6178      	str	r0, [r7, #20]
        break;
 80050a0:	e01b      	b.n	80050da <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a6:	617b      	str	r3, [r7, #20]
        break;
 80050a8:	e017      	b.n	80050da <UART_SetConfig+0x30e>
 80050aa:	bf00      	nop
 80050ac:	efff69f3 	.word	0xefff69f3
 80050b0:	40008000 	.word	0x40008000
 80050b4:	40013800 	.word	0x40013800
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40004400 	.word	0x40004400
 80050c0:	40004800 	.word	0x40004800
 80050c4:	40004c00 	.word	0x40004c00
 80050c8:	40005000 	.word	0x40005000
 80050cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	76bb      	strb	r3, [r7, #26]
        break;
 80050d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80f1 	beq.w	80052c4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	4413      	add	r3, r2
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d305      	bcc.n	80050fe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d902      	bls.n	8005104 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	76bb      	strb	r3, [r7, #26]
 8005102:	e0df      	b.n	80052c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	4619      	mov	r1, r3
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	f04f 0400 	mov.w	r4, #0
 8005114:	0214      	lsls	r4, r2, #8
 8005116:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800511a:	020b      	lsls	r3, r1, #8
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6852      	ldr	r2, [r2, #4]
 8005120:	0852      	lsrs	r2, r2, #1
 8005122:	4611      	mov	r1, r2
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	eb13 0b01 	adds.w	fp, r3, r1
 800512c:	eb44 0c02 	adc.w	ip, r4, r2
 8005130:	4658      	mov	r0, fp
 8005132:	4661      	mov	r1, ip
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f04f 0400 	mov.w	r4, #0
 800513c:	461a      	mov	r2, r3
 800513e:	4623      	mov	r3, r4
 8005140:	f7fb f896 	bl	8000270 <__aeabi_uldivmod>
 8005144:	4603      	mov	r3, r0
 8005146:	460c      	mov	r4, r1
 8005148:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005150:	d308      	bcc.n	8005164 <UART_SetConfig+0x398>
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005158:	d204      	bcs.n	8005164 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	60da      	str	r2, [r3, #12]
 8005162:	e0af      	b.n	80052c4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	76bb      	strb	r3, [r7, #26]
 8005168:	e0ac      	b.n	80052c4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005172:	d15b      	bne.n	800522c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005174:	7efb      	ldrb	r3, [r7, #27]
 8005176:	2b08      	cmp	r3, #8
 8005178:	d827      	bhi.n	80051ca <UART_SetConfig+0x3fe>
 800517a:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <UART_SetConfig+0x3b4>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051b5 	.word	0x080051b5
 800518c:	080051cb 	.word	0x080051cb
 8005190:	080051bb 	.word	0x080051bb
 8005194:	080051cb 	.word	0x080051cb
 8005198:	080051cb 	.word	0x080051cb
 800519c:	080051cb 	.word	0x080051cb
 80051a0:	080051c3 	.word	0x080051c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a4:	f7fe fb52 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 80051a8:	6178      	str	r0, [r7, #20]
        break;
 80051aa:	e013      	b.n	80051d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ac:	f7fe fb64 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 80051b0:	6178      	str	r0, [r7, #20]
        break;
 80051b2:	e00f      	b.n	80051d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b4:	4b49      	ldr	r3, [pc, #292]	; (80052dc <UART_SetConfig+0x510>)
 80051b6:	617b      	str	r3, [r7, #20]
        break;
 80051b8:	e00c      	b.n	80051d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ba:	f7fe fab1 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80051be:	6178      	str	r0, [r7, #20]
        break;
 80051c0:	e008      	b.n	80051d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c6:	617b      	str	r3, [r7, #20]
        break;
 80051c8:	e004      	b.n	80051d4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	76bb      	strb	r3, [r7, #26]
        break;
 80051d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d074      	beq.n	80052c4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	005a      	lsls	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b0f      	cmp	r3, #15
 80051f6:	d916      	bls.n	8005226 <UART_SetConfig+0x45a>
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d212      	bcs.n	8005226 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f023 030f 	bic.w	r3, r3, #15
 8005208:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	085b      	lsrs	r3, r3, #1
 800520e:	b29b      	uxth	r3, r3
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	b29a      	uxth	r2, r3
 8005216:	89fb      	ldrh	r3, [r7, #14]
 8005218:	4313      	orrs	r3, r2
 800521a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	89fa      	ldrh	r2, [r7, #14]
 8005222:	60da      	str	r2, [r3, #12]
 8005224:	e04e      	b.n	80052c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	76bb      	strb	r3, [r7, #26]
 800522a:	e04b      	b.n	80052c4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800522c:	7efb      	ldrb	r3, [r7, #27]
 800522e:	2b08      	cmp	r3, #8
 8005230:	d827      	bhi.n	8005282 <UART_SetConfig+0x4b6>
 8005232:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <UART_SetConfig+0x46c>)
 8005234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005238:	0800525d 	.word	0x0800525d
 800523c:	08005265 	.word	0x08005265
 8005240:	0800526d 	.word	0x0800526d
 8005244:	08005283 	.word	0x08005283
 8005248:	08005273 	.word	0x08005273
 800524c:	08005283 	.word	0x08005283
 8005250:	08005283 	.word	0x08005283
 8005254:	08005283 	.word	0x08005283
 8005258:	0800527b 	.word	0x0800527b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800525c:	f7fe faf6 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 8005260:	6178      	str	r0, [r7, #20]
        break;
 8005262:	e013      	b.n	800528c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005264:	f7fe fb08 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 8005268:	6178      	str	r0, [r7, #20]
        break;
 800526a:	e00f      	b.n	800528c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <UART_SetConfig+0x510>)
 800526e:	617b      	str	r3, [r7, #20]
        break;
 8005270:	e00c      	b.n	800528c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005272:	f7fe fa55 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8005276:	6178      	str	r0, [r7, #20]
        break;
 8005278:	e008      	b.n	800528c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800527e:	617b      	str	r3, [r7, #20]
        break;
 8005280:	e004      	b.n	800528c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	76bb      	strb	r3, [r7, #26]
        break;
 800528a:	bf00      	nop
    }

    if (pclk != 0U)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d018      	beq.n	80052c4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	085a      	lsrs	r2, r3, #1
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	441a      	add	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b0f      	cmp	r3, #15
 80052ac:	d908      	bls.n	80052c0 <UART_SetConfig+0x4f4>
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b4:	d204      	bcs.n	80052c0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	e001      	b.n	80052c4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80052d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80052dc:	00f42400 	.word	0x00f42400

080052e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01a      	beq.n	80053f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053de:	d10a      	bne.n	80053f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  }
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af02      	add	r7, sp, #8
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005432:	f7fb f905 	bl	8000640 <HAL_GetTick>
 8005436:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b08      	cmp	r3, #8
 8005444:	d10e      	bne.n	8005464 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005446:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f82a 	bl	80054ae <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e020      	b.n	80054a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b04      	cmp	r3, #4
 8005470:	d10e      	bne.n	8005490 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005472:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f814 	bl	80054ae <UART_WaitOnFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e00a      	b.n	80054a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	4613      	mov	r3, r2
 80054bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054be:	e05d      	b.n	800557c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c6:	d059      	beq.n	800557c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fb f8ba 	bl	8000640 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <UART_WaitOnFlagUntilTimeout+0x30>
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d11b      	bne.n	8005516 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054ec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e042      	b.n	800559c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d02b      	beq.n	800557c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800552e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005532:	d123      	bne.n	800557c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800553c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800554c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e00f      	b.n	800559c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69da      	ldr	r2, [r3, #28]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4013      	ands	r3, r2
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	429a      	cmp	r2, r3
 8005598:	d092      	beq.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2120      	movs	r1, #32
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 fc89 	bl	8006ecc <SENSOR_IO_Read>
 80055ba:	4603      	mov	r3, r0
 80055bc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	f023 0303 	bic.w	r3, r3, #3
 80055d4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055e4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	7bfa      	ldrb	r2, [r7, #15]
 80055ec:	2120      	movs	r1, #32
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 fc52 	bl	8006e98 <SENSOR_IO_Write>
}
 80055f4:	bf00      	nop
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800560a:	f001 fc3b 	bl	8006e84 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	210f      	movs	r1, #15
 8005614:	4618      	mov	r0, r3
 8005616:	f001 fc59 	bl	8006ecc <SENSOR_IO_Read>
 800561a:	4603      	mov	r3, r0
 800561c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800561e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	b2d8      	uxtb	r0, r3
 8005636:	f107 020c 	add.w	r2, r7, #12
 800563a:	2302      	movs	r3, #2
 800563c:	21b0      	movs	r1, #176	; 0xb0
 800563e:	f001 fc63 	bl	8006f08 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8005642:	7b3b      	ldrb	r3, [r7, #12]
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	b2db      	uxtb	r3, r3
 8005648:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800564a:	7b7b      	ldrb	r3, [r7, #13]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	b2db      	uxtb	r3, r3
 8005650:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	b2d8      	uxtb	r0, r3
 8005656:	f107 020c 	add.w	r2, r7, #12
 800565a:	2302      	movs	r3, #2
 800565c:	21b6      	movs	r1, #182	; 0xb6
 800565e:	f001 fc53 	bl	8006f08 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005662:	7b7b      	ldrb	r3, [r7, #13]
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	b21a      	sxth	r2, r3
 8005668:	7b3b      	ldrb	r3, [r7, #12]
 800566a:	b21b      	sxth	r3, r3
 800566c:	4313      	orrs	r3, r2
 800566e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8005670:	88fb      	ldrh	r3, [r7, #6]
 8005672:	b2d8      	uxtb	r0, r3
 8005674:	f107 020c 	add.w	r2, r7, #12
 8005678:	2302      	movs	r3, #2
 800567a:	21ba      	movs	r1, #186	; 0xba
 800567c:	f001 fc44 	bl	8006f08 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005680:	7b7b      	ldrb	r3, [r7, #13]
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	b21a      	sxth	r2, r3
 8005686:	7b3b      	ldrb	r3, [r7, #12]
 8005688:	b21b      	sxth	r3, r3
 800568a:	4313      	orrs	r3, r2
 800568c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	b2d8      	uxtb	r0, r3
 8005692:	f107 020c 	add.w	r2, r7, #12
 8005696:	2302      	movs	r3, #2
 8005698:	21a8      	movs	r1, #168	; 0xa8
 800569a:	f001 fc35 	bl	8006f08 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800569e:	7b7b      	ldrb	r3, [r7, #13]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	b21a      	sxth	r2, r3
 80056a4:	7b3b      	ldrb	r3, [r7, #12]
 80056a6:	b21b      	sxth	r3, r3
 80056a8:	4313      	orrs	r3, r2
 80056aa:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80056ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80056b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056be:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80056c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80056d4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80056d8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056fa:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80056fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8005702:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800570a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800570e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005712:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005758 <HTS221_H_ReadHumidity+0x130>
 8005716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800571a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800571e:	dd01      	ble.n	8005724 <HTS221_H_ReadHumidity+0xfc>
 8005720:	4b0e      	ldr	r3, [pc, #56]	; (800575c <HTS221_H_ReadHumidity+0x134>)
 8005722:	e00a      	b.n	800573a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8005724:	edd7 7a04 	vldr	s15, [r7, #16]
 8005728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800572c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005730:	d502      	bpl.n	8005738 <HTS221_H_ReadHumidity+0x110>
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	e000      	b.n	800573a <HTS221_H_ReadHumidity+0x112>
 8005738:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800573a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800573c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005740:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005744:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005748:	eef0 7a66 	vmov.f32	s15, s13
}
 800574c:	eeb0 0a67 	vmov.f32	s0, s15
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	447a0000 	.word	0x447a0000
 800575c:	447a0000 	.word	0x447a0000

08005760 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	6039      	str	r1, [r7, #0]
 800576a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2120      	movs	r1, #32
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fbaa 	bl	8006ecc <SENSOR_IO_Read>
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	f023 0304 	bic.w	r3, r3, #4
 8005782:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	f043 0304 	orr.w	r3, r3, #4
 800578a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	f023 0303 	bic.w	r3, r3, #3
 8005792:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057a2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	7bfa      	ldrb	r2, [r7, #15]
 80057aa:	2120      	movs	r1, #32
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 fb73 	bl	8006e98 <SENSOR_IO_Write>
}
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b088      	sub	sp, #32
 80057be:	af00      	add	r7, sp, #0
 80057c0:	4603      	mov	r3, r0
 80057c2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	b2d8      	uxtb	r0, r3
 80057c8:	f107 0208 	add.w	r2, r7, #8
 80057cc:	2302      	movs	r3, #2
 80057ce:	21b2      	movs	r1, #178	; 0xb2
 80057d0:	f001 fb9a 	bl	8006f08 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2135      	movs	r1, #53	; 0x35
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 fb76 	bl	8006ecc <SENSOR_IO_Read>
 80057e0:	4603      	mov	r3, r0
 80057e2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80057e4:	7ffb      	ldrb	r3, [r7, #31]
 80057e6:	021b      	lsls	r3, r3, #8
 80057e8:	b21b      	sxth	r3, r3
 80057ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ee:	b21a      	sxth	r2, r3
 80057f0:	7a3b      	ldrb	r3, [r7, #8]
 80057f2:	b21b      	sxth	r3, r3
 80057f4:	4313      	orrs	r3, r2
 80057f6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80057f8:	7ffb      	ldrb	r3, [r7, #31]
 80057fa:	019b      	lsls	r3, r3, #6
 80057fc:	b21b      	sxth	r3, r3
 80057fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005802:	b21a      	sxth	r2, r3
 8005804:	7a7b      	ldrb	r3, [r7, #9]
 8005806:	b21b      	sxth	r3, r3
 8005808:	4313      	orrs	r3, r2
 800580a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800580c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005810:	10db      	asrs	r3, r3, #3
 8005812:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8005814:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005818:	10db      	asrs	r3, r3, #3
 800581a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	b2d8      	uxtb	r0, r3
 8005820:	f107 0208 	add.w	r2, r7, #8
 8005824:	2304      	movs	r3, #4
 8005826:	21bc      	movs	r1, #188	; 0xbc
 8005828:	f001 fb6e 	bl	8006f08 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800582c:	7a7b      	ldrb	r3, [r7, #9]
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	b21a      	sxth	r2, r3
 8005832:	7a3b      	ldrb	r3, [r7, #8]
 8005834:	b21b      	sxth	r3, r3
 8005836:	4313      	orrs	r3, r2
 8005838:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800583a:	7afb      	ldrb	r3, [r7, #11]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	b21a      	sxth	r2, r3
 8005840:	7abb      	ldrb	r3, [r7, #10]
 8005842:	b21b      	sxth	r3, r3
 8005844:	4313      	orrs	r3, r2
 8005846:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	b2d8      	uxtb	r0, r3
 800584c:	f107 0208 	add.w	r2, r7, #8
 8005850:	2302      	movs	r3, #2
 8005852:	21aa      	movs	r1, #170	; 0xaa
 8005854:	f001 fb58 	bl	8006f08 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005858:	7a7b      	ldrb	r3, [r7, #9]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	b21a      	sxth	r2, r3
 800585e:	7a3b      	ldrb	r3, [r7, #8]
 8005860:	b21b      	sxth	r3, r3
 8005862:	4313      	orrs	r3, r2
 8005864:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8005866:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800586a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005878:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800587c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800588a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800588e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005892:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	ee07 3a90 	vmov	s15, r3
 800589c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058b4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	ee07 3a90 	vmov	s15, r3
}
 80058be:	eeb0 0a67 	vmov.f32	s0, s15
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80058d6:	2110      	movs	r1, #16
 80058d8:	20d4      	movs	r0, #212	; 0xd4
 80058da:	f001 faf7 	bl	8006ecc <SENSOR_IO_Read>
 80058de:	4603      	mov	r3, r0
 80058e0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80058ee:	7bba      	ldrb	r2, [r7, #14]
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	461a      	mov	r2, r3
 80058fa:	2110      	movs	r1, #16
 80058fc:	20d4      	movs	r0, #212	; 0xd4
 80058fe:	f001 facb 	bl	8006e98 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8005902:	2112      	movs	r1, #18
 8005904:	20d4      	movs	r0, #212	; 0xd4
 8005906:	f001 fae1 	bl	8006ecc <SENSOR_IO_Read>
 800590a:	4603      	mov	r3, r0
 800590c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	b29b      	uxth	r3, r3
 8005914:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8005916:	7bbb      	ldrb	r3, [r7, #14]
 8005918:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800591c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800591e:	7bba      	ldrb	r2, [r7, #14]
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	4313      	orrs	r3, r2
 8005924:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005926:	7bbb      	ldrb	r3, [r7, #14]
 8005928:	461a      	mov	r2, r3
 800592a:	2112      	movs	r1, #18
 800592c:	20d4      	movs	r0, #212	; 0xd4
 800592e:	f001 fab3 	bl	8006e98 <SENSOR_IO_Write>
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005940:	2300      	movs	r3, #0
 8005942:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005944:	2110      	movs	r1, #16
 8005946:	20d4      	movs	r0, #212	; 0xd4
 8005948:	f001 fac0 	bl	8006ecc <SENSOR_IO_Read>
 800594c:	4603      	mov	r3, r0
 800594e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	461a      	mov	r2, r3
 800595c:	2110      	movs	r1, #16
 800595e:	20d4      	movs	r0, #212	; 0xd4
 8005960:	f001 fa9a 	bl	8006e98 <SENSOR_IO_Write>
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8005970:	f001 fa88 	bl	8006e84 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8005974:	210f      	movs	r1, #15
 8005976:	20d4      	movs	r0, #212	; 0xd4
 8005978:	f001 faa8 	bl	8006ecc <SENSOR_IO_Read>
 800597c:	4603      	mov	r3, r0
}
 800597e:	4618      	mov	r0, r3
 8005980:	bd80      	pop	{r7, pc}

08005982 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	4603      	mov	r3, r0
 800598a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8005990:	2115      	movs	r1, #21
 8005992:	20d4      	movs	r0, #212	; 0xd4
 8005994:	f001 fa9a 	bl	8006ecc <SENSOR_IO_Read>
 8005998:	4603      	mov	r3, r0
 800599a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	f023 0310 	bic.w	r3, r3, #16
 80059a2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80059a4:	88fb      	ldrh	r3, [r7, #6]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	f043 0310 	orr.w	r3, r3, #16
 80059b0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	461a      	mov	r2, r3
 80059b6:	2115      	movs	r1, #21
 80059b8:	20d4      	movs	r0, #212	; 0xd4
 80059ba:	f001 fa6d 	bl	8006e98 <SENSOR_IO_Write>
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80059de:	2110      	movs	r1, #16
 80059e0:	20d4      	movs	r0, #212	; 0xd4
 80059e2:	f001 fa73 	bl	8006ecc <SENSOR_IO_Read>
 80059e6:	4603      	mov	r3, r0
 80059e8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80059ea:	f107 0208 	add.w	r2, r7, #8
 80059ee:	2306      	movs	r3, #6
 80059f0:	2128      	movs	r1, #40	; 0x28
 80059f2:	20d4      	movs	r0, #212	; 0xd4
 80059f4:	f001 fa88 	bl	8006f08 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80059f8:	2300      	movs	r3, #0
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e01f      	b.n	8005a3e <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80059fe:	7ffb      	ldrb	r3, [r7, #31]
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	3301      	adds	r3, #1
 8005a04:	f107 0220 	add.w	r2, r7, #32
 8005a08:	4413      	add	r3, r2
 8005a0a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	7ffb      	ldrb	r3, [r7, #31]
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	f107 0120 	add.w	r1, r7, #32
 8005a1c:	440b      	add	r3, r1
 8005a1e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	4413      	add	r3, r2
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	7ffb      	ldrb	r3, [r7, #31]
 8005a2a:	b212      	sxth	r2, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	f107 0120 	add.w	r1, r7, #32
 8005a32:	440b      	add	r3, r1
 8005a34:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8005a38:	7ffb      	ldrb	r3, [r7, #31]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	77fb      	strb	r3, [r7, #31]
 8005a3e:	7ffb      	ldrb	r3, [r7, #31]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d9dc      	bls.n	80059fe <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d828      	bhi.n	8005aa0 <LSM6DSL_AccReadXYZ+0xd8>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <LSM6DSL_AccReadXYZ+0x8c>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a89 	.word	0x08005a89
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005aa1 	.word	0x08005aa1
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005a9b 	.word	0x08005a9b
 8005a68:	08005aa1 	.word	0x08005aa1
 8005a6c:	08005aa1 	.word	0x08005aa1
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005a8f 	.word	0x08005a8f
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005aa1 	.word	0x08005aa1
 8005a80:	08005aa1 	.word	0x08005aa1
 8005a84:	08005a95 	.word	0x08005a95
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8005a88:	4b18      	ldr	r3, [pc, #96]	; (8005aec <LSM6DSL_AccReadXYZ+0x124>)
 8005a8a:	61bb      	str	r3, [r7, #24]
    break;
 8005a8c:	e008      	b.n	8005aa0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8005a8e:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <LSM6DSL_AccReadXYZ+0x128>)
 8005a90:	61bb      	str	r3, [r7, #24]
    break;
 8005a92:	e005      	b.n	8005aa0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8005a94:	4b17      	ldr	r3, [pc, #92]	; (8005af4 <LSM6DSL_AccReadXYZ+0x12c>)
 8005a96:	61bb      	str	r3, [r7, #24]
    break;
 8005a98:	e002      	b.n	8005aa0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8005a9a:	4b17      	ldr	r3, [pc, #92]	; (8005af8 <LSM6DSL_AccReadXYZ+0x130>)
 8005a9c:	61bb      	str	r3, [r7, #24]
    break;    
 8005a9e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e01b      	b.n	8005ade <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8005aa6:	7ffb      	ldrb	r3, [r7, #31]
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	f107 0220 	add.w	r2, r7, #32
 8005aae:	4413      	add	r3, r2
 8005ab0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005abc:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac4:	7ffb      	ldrb	r3, [r7, #31]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	4413      	add	r3, r2
 8005acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ad0:	ee17 2a90 	vmov	r2, s15
 8005ad4:	b212      	sxth	r2, r2
 8005ad6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8005ad8:	7ffb      	ldrb	r3, [r7, #31]
 8005ada:	3301      	adds	r3, #1
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	7ffb      	ldrb	r3, [r7, #31]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d9e0      	bls.n	8005aa6 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8005ae4:	bf00      	nop
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	3d79db23 	.word	0x3d79db23
 8005af0:	3df9db23 	.word	0x3df9db23
 8005af4:	3e79db23 	.word	0x3e79db23
 8005af8:	3ef9db23 	.word	0x3ef9db23

08005afc <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005b06:	2300      	movs	r3, #0
 8005b08:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005b0a:	2111      	movs	r1, #17
 8005b0c:	20d4      	movs	r0, #212	; 0xd4
 8005b0e:	f001 f9dd 	bl	8006ecc <SENSOR_IO_Read>
 8005b12:	4603      	mov	r3, r0
 8005b14:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8005b1a:	7bbb      	ldrb	r3, [r7, #14]
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8005b22:	7bba      	ldrb	r2, [r7, #14]
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	2111      	movs	r1, #17
 8005b30:	20d4      	movs	r0, #212	; 0xd4
 8005b32:	f001 f9b1 	bl	8006e98 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8005b36:	2112      	movs	r1, #18
 8005b38:	20d4      	movs	r0, #212	; 0xd4
 8005b3a:	f001 f9c7 	bl	8006ecc <SENSOR_IO_Read>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	0a1b      	lsrs	r3, r3, #8
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8005b4a:	7bbb      	ldrb	r3, [r7, #14]
 8005b4c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8005b50:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8005b52:	7bba      	ldrb	r2, [r7, #14]
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2112      	movs	r1, #18
 8005b60:	20d4      	movs	r0, #212	; 0xd4
 8005b62:	f001 f999 	bl	8006e98 <SENSOR_IO_Write>
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005b74:	2300      	movs	r3, #0
 8005b76:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005b78:	2111      	movs	r1, #17
 8005b7a:	20d4      	movs	r0, #212	; 0xd4
 8005b7c:	f001 f9a6 	bl	8006ecc <SENSOR_IO_Read>
 8005b80:	4603      	mov	r3, r0
 8005b82:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2111      	movs	r1, #17
 8005b92:	20d4      	movs	r0, #212	; 0xd4
 8005b94:	f001 f980 	bl	8006e98 <SENSOR_IO_Write>
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8005ba4:	f001 f96e 	bl	8006e84 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8005ba8:	210f      	movs	r1, #15
 8005baa:	20d4      	movs	r0, #212	; 0xd4
 8005bac:	f001 f98e 	bl	8006ecc <SENSOR_IO_Read>
 8005bb0:	4603      	mov	r3, r0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8005bc4:	2116      	movs	r1, #22
 8005bc6:	20d4      	movs	r0, #212	; 0xd4
 8005bc8:	f001 f980 	bl	8006ecc <SENSOR_IO_Read>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8005bd8:	88fb      	ldrh	r3, [r7, #6]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005be4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	461a      	mov	r2, r3
 8005bea:	2116      	movs	r1, #22
 8005bec:	20d4      	movs	r0, #212	; 0xd4
 8005bee:	f001 f953 	bl	8006e98 <SENSOR_IO_Write>
}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005c12:	2111      	movs	r1, #17
 8005c14:	20d4      	movs	r0, #212	; 0xd4
 8005c16:	f001 f959 	bl	8006ecc <SENSOR_IO_Read>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8005c1e:	f107 0208 	add.w	r2, r7, #8
 8005c22:	2306      	movs	r3, #6
 8005c24:	2122      	movs	r1, #34	; 0x22
 8005c26:	20d4      	movs	r0, #212	; 0xd4
 8005c28:	f001 f96e 	bl	8006f08 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	e01f      	b.n	8005c72 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005c32:	7ffb      	ldrb	r3, [r7, #31]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	3301      	adds	r3, #1
 8005c38:	f107 0220 	add.w	r2, r7, #32
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	7ffb      	ldrb	r3, [r7, #31]
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	f107 0120 	add.w	r1, r7, #32
 8005c50:	440b      	add	r3, r1
 8005c52:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	4413      	add	r3, r2
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	7ffb      	ldrb	r3, [r7, #31]
 8005c5e:	b212      	sxth	r2, r2
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	f107 0120 	add.w	r1, r7, #32
 8005c66:	440b      	add	r3, r1
 8005c68:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8005c6c:	7ffb      	ldrb	r3, [r7, #31]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	77fb      	strb	r3, [r7, #31]
 8005c72:	7ffb      	ldrb	r3, [r7, #31]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d9dc      	bls.n	8005c32 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	f003 030c 	and.w	r3, r3, #12
 8005c7e:	2b0c      	cmp	r3, #12
 8005c80:	d828      	bhi.n	8005cd4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005cbd 	.word	0x08005cbd
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cd5 	.word	0x08005cd5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cc3 	.word	0x08005cc3
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005cd5 	.word	0x08005cd5
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005cc9 	.word	0x08005cc9
 8005cac:	08005cd5 	.word	0x08005cd5
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cd5 	.word	0x08005cd5
 8005cb8:	08005ccf 	.word	0x08005ccf
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8005cbc:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8005cbe:	61bb      	str	r3, [r7, #24]
    break;
 8005cc0:	e008      	b.n	8005cd4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8005cc2:	4b16      	ldr	r3, [pc, #88]	; (8005d1c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8005cc4:	61bb      	str	r3, [r7, #24]
    break;
 8005cc6:	e005      	b.n	8005cd4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8005cc8:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8005cca:	61bb      	str	r3, [r7, #24]
    break;
 8005ccc:	e002      	b.n	8005cd4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8005cce:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8005cd0:	61bb      	str	r3, [r7, #24]
    break;    
 8005cd2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	e017      	b.n	8005d0a <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8005cda:	7ffb      	ldrb	r3, [r7, #31]
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	f107 0220 	add.w	r2, r7, #32
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cf0:	7ffb      	ldrb	r3, [r7, #31]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8005cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d00:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8005d04:	7ffb      	ldrb	r3, [r7, #31]
 8005d06:	3301      	adds	r3, #1
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	7ffb      	ldrb	r3, [r7, #31]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d9e4      	bls.n	8005cda <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8005d10:	bf00      	nop
 8005d12:	3720      	adds	r7, #32
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	410c0000 	.word	0x410c0000
 8005d1c:	418c0000 	.word	0x418c0000
 8005d20:	420c0000 	.word	0x420c0000
 8005d24:	428c0000 	.word	0x428c0000

08005d28 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 8005d2e:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005d30:	f7fa fc1e 	bl	8000570 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005d34:	f000 faea 	bl	800630c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005d38:	f000 fce4 	bl	8006704 <MX_GPIO_Init>
	MX_DMA_Init();
 8005d3c:	f000 fcc4 	bl	80066c8 <MX_DMA_Init>
	MX_I2C1_Init();
 8005d40:	f000 fb90 	bl	8006464 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8005d44:	f000 fc90 	bl	8006668 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8005d48:	f000 fbf2 	bl	8006530 <MX_TIM2_Init>
	MX_DAC1_Init();
 8005d4c:	f000 fb58 	bl	8006400 <MX_DAC1_Init>
	MX_QUADSPI_Init();
 8005d50:	f000 fbc8 	bl	80064e4 <MX_QUADSPI_Init>
	MX_TIM3_Init();
 8005d54:	f000 fc3a 	bl	80065cc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	//I2C Sensor Initialization
	BSP_ACCELERO_Init();
 8005d58:	f001 f8f4 	bl	8006f44 <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 8005d5c:	f001 fd9a 	bl	8007894 <BSP_TSENSOR_Init>
	BSP_GYRO_Init();
 8005d60:	f001 f946 	bl	8006ff0 <BSP_GYRO_Init>
	BSP_HSENSOR_Init();
 8005d64:	f001 f986 	bl	8007074 <BSP_HSENSOR_Init>

	// Start the timer

	BSP_QSPI_Init();
 8005d68:	f001 f9a4 	bl	80070b4 <BSP_QSPI_Init>
	uint32_t note_c7[21];
	uint32_t note_e7[17];
	uint32_t note_g7[14];

	// Tone C6
	for (uint8_t i=0; i<42;i++) {
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
 8005d72:	e031      	b.n	8005dd8 <main+0xb0>
		note_c6[i] = ((arm_sin_f32(i*2*PI/42) + 1)*((0xFF + 1)/2)) / 2;
 8005d74:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d82:	ed9f 7ae0 	vldr	s14, [pc, #896]	; 8006104 <main+0x3dc>
 8005d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d8a:	ed9f 7adf 	vldr	s14, [pc, #892]	; 8006108 <main+0x3e0>
 8005d8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d92:	eeb0 0a66 	vmov.f32	s0, s13
 8005d96:	f002 f849 	bl	8007e2c <arm_sin_f32>
 8005d9a:	eeb0 7a40 	vmov.f32	s14, s0
 8005d9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005da6:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 800610c <main+0x3e4>
 8005daa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005dae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005db6:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8005dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dbe:	ee17 2a90 	vmov	r2, s15
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005dc8:	440b      	add	r3, r1
 8005dca:	f843 2ce0 	str.w	r2, [r3, #-224]
	for (uint8_t i=0; i<42;i++) {
 8005dce:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
 8005dd8:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8005ddc:	2b29      	cmp	r3, #41	; 0x29
 8005dde:	d9c9      	bls.n	8005d74 <main+0x4c>
	}

	// Tone E6
	for (uint8_t i=0; i<33;i++) {
 8005de0:	2300      	movs	r3, #0
 8005de2:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
 8005de6:	e02f      	b.n	8005e48 <main+0x120>
		note_e6[i] = ((arm_sin_f32(i*2*PI/33) + 1)*((0xFF + 1)/2)) / 2;
 8005de8:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df6:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8006104 <main+0x3dc>
 8005dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dfe:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8006110 <main+0x3e8>
 8005e02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e06:	eeb0 0a66 	vmov.f32	s0, s13
 8005e0a:	f002 f80f 	bl	8007e2c <arm_sin_f32>
 8005e0e:	eeb0 7a40 	vmov.f32	s14, s0
 8005e12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e1a:	ed9f 7abc 	vldr	s14, [pc, #752]	; 800610c <main+0x3e4>
 8005e1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005e22:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e2a:	f897 22a6 	ldrb.w	r2, [r7, #678]	; 0x2a6
 8005e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e32:	ee17 1a90 	vmov	r1, s15
 8005e36:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i=0; i<33;i++) {
 8005e3e:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 8005e42:	3301      	adds	r3, #1
 8005e44:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
 8005e48:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d9cb      	bls.n	8005de8 <main+0xc0>
	}

	// Tone G6
	for (uint8_t i=0; i<28;i++) {
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
 8005e56:	e02f      	b.n	8005eb8 <main+0x190>
		note_g6[i] = ((arm_sin_f32(i*2*PI/28) + 1)*((0xFF + 1)/2)) / 2;
 8005e58:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e66:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8006104 <main+0x3dc>
 8005e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e6e:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8005e72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e76:	eeb0 0a66 	vmov.f32	s0, s13
 8005e7a:	f001 ffd7 	bl	8007e2c <arm_sin_f32>
 8005e7e:	eeb0 7a40 	vmov.f32	s14, s0
 8005e82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e8a:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800610c <main+0x3e4>
 8005e8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005e92:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e9a:	f897 22a5 	ldrb.w	r2, [r7, #677]	; 0x2a5
 8005e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea2:	ee17 1a90 	vmov	r1, s15
 8005ea6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i=0; i<28;i++) {
 8005eae:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
 8005eb8:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 8005ebc:	2b1b      	cmp	r3, #27
 8005ebe:	d9cb      	bls.n	8005e58 <main+0x130>
	}

	// Tone C7
	for (uint8_t i=0; i<21;i++) {
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
 8005ec6:	e02f      	b.n	8005f28 <main+0x200>
		note_c7[i] = ((arm_sin_f32(i*2*PI/21) + 1)*((0xFF + 1)/2)) / 2;
 8005ec8:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ed6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8006104 <main+0x3dc>
 8005eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ede:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8005ee2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ee6:	eeb0 0a66 	vmov.f32	s0, s13
 8005eea:	f001 ff9f 	bl	8007e2c <arm_sin_f32>
 8005eee:	eeb0 7a40 	vmov.f32	s14, s0
 8005ef2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005efa:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800610c <main+0x3e4>
 8005efe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f02:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f0a:	f897 22a4 	ldrb.w	r2, [r7, #676]	; 0x2a4
 8005f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f12:	ee17 1a90 	vmov	r1, s15
 8005f16:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i=0; i<21;i++) {
 8005f1e:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 8005f22:	3301      	adds	r3, #1
 8005f24:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
 8005f28:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 8005f2c:	2b14      	cmp	r3, #20
 8005f2e:	d9cb      	bls.n	8005ec8 <main+0x1a0>
	}

	// Tone E7
	for (uint8_t i=0; i<17;i++) {
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
 8005f36:	e02f      	b.n	8005f98 <main+0x270>
		note_e7[i] = ((arm_sin_f32(i*2*PI/17) + 1)*((0xFF + 1)/2)) / 2;
 8005f38:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f46:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8006104 <main+0x3dc>
 8005f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f4e:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8005f52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f56:	eeb0 0a66 	vmov.f32	s0, s13
 8005f5a:	f001 ff67 	bl	8007e2c <arm_sin_f32>
 8005f5e:	eeb0 7a40 	vmov.f32	s14, s0
 8005f62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f6a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800610c <main+0x3e4>
 8005f6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f7a:	f897 22a3 	ldrb.w	r2, [r7, #675]	; 0x2a3
 8005f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f82:	ee17 1a90 	vmov	r1, s15
 8005f86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i=0; i<17;i++) {
 8005f8e:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 8005f92:	3301      	adds	r3, #1
 8005f94:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
 8005f98:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	d9cb      	bls.n	8005f38 <main+0x210>
	}

	// Tone G7
	for (uint8_t i=0; i<14;i++) {
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
 8005fa6:	e02e      	b.n	8006006 <main+0x2de>
		note_g7[i] = ((arm_sin_f32(i*2*PI/14) + 1)*((0xFF + 1)/2)) / 2;
 8005fa8:	f897 32a2 	ldrb.w	r3, [r7, #674]	; 0x2a2
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fb6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8006104 <main+0x3dc>
 8005fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fbe:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8005fc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005fc6:	eeb0 0a66 	vmov.f32	s0, s13
 8005fca:	f001 ff2f 	bl	8007e2c <arm_sin_f32>
 8005fce:	eeb0 7a40 	vmov.f32	s14, s0
 8005fd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fda:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800610c <main+0x3e4>
 8005fde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005fe2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fea:	f897 22a2 	ldrb.w	r2, [r7, #674]	; 0x2a2
 8005fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff2:	ee17 1a90 	vmov	r1, s15
 8005ff6:	1d3b      	adds	r3, r7, #4
 8005ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t i=0; i<14;i++) {
 8005ffc:	f897 32a2 	ldrb.w	r3, [r7, #674]	; 0x2a2
 8006000:	3301      	adds	r3, #1
 8006002:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
 8006006:	f897 32a2 	ldrb.w	r3, [r7, #674]	; 0x2a2
 800600a:	2b0d      	cmp	r3, #13
 800600c:	d9cc      	bls.n	8005fa8 <main+0x280>


	/*
	 * Prepare the Flash - note: probably need quite a few blocks
	 */
	BSP_QSPI_Erase_Block(0);
 800600e:	2000      	movs	r0, #0
 8006010:	f001 f980 	bl	8007314 <BSP_QSPI_Erase_Block>
	BSP_QSPI_Erase_Block(64000);
 8006014:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
 8006018:	f001 f97c 	bl	8007314 <BSP_QSPI_Erase_Block>
	BSP_QSPI_Erase_Block(128000);
 800601c:	f44f 30fa 	mov.w	r0, #128000	; 0x1f400
 8006020:	f001 f978 	bl	8007314 <BSP_QSPI_Erase_Block>
	/*
	 * Write the notes into flash
	 */

	// C6
	for(int i=0; i<526; i++){
 8006024:	2300      	movs	r3, #0
 8006026:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800602a:	e024      	b.n	8006076 <main+0x34e>
		for(int j=0; j<42; j++){
 800602c:	2300      	movs	r3, #0
 800602e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006032:	e017      	b.n	8006064 <main+0x33c>
			soundBuffer[42*i+j] = note_c6[j] % 256;
 8006034:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 800603e:	4413      	add	r3, r2
 8006040:	f853 1ce0 	ldr.w	r1, [r3, #-224]
 8006044:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8006048:	222a      	movs	r2, #42	; 0x2a
 800604a:	fb02 f203 	mul.w	r2, r2, r3
 800604e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006052:	4413      	add	r3, r2
 8006054:	b2c9      	uxtb	r1, r1
 8006056:	4a2f      	ldr	r2, [pc, #188]	; (8006114 <main+0x3ec>)
 8006058:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<42; j++){
 800605a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800605e:	3301      	adds	r3, #1
 8006060:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8006064:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006068:	2b29      	cmp	r3, #41	; 0x29
 800606a:	dde3      	ble.n	8006034 <main+0x30c>
	for(int i=0; i<526; i++){
 800606c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8006070:	3301      	adds	r3, #1
 8006072:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8006076:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800607a:	f240 220d 	movw	r2, #525	; 0x20d
 800607e:	4293      	cmp	r3, r2
 8006080:	ddd4      	ble.n	800602c <main+0x304>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 11025*0, 22050);
 8006082:	f245 6222 	movw	r2, #22050	; 0x5622
 8006086:	2100      	movs	r1, #0
 8006088:	4822      	ldr	r0, [pc, #136]	; (8006114 <main+0x3ec>)
 800608a:	f001 f8c5 	bl	8007218 <BSP_QSPI_Write>


	// E6
	for(int i=0; i<668; i++){
 800608e:	2300      	movs	r3, #0
 8006090:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8006094:	e022      	b.n	80060dc <main+0x3b4>
		for(int j=0; j<33; j++){
 8006096:	2300      	movs	r3, #0
 8006098:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800609c:	e015      	b.n	80060ca <main+0x3a2>
			soundBuffer[i*33+j] = note_e6[j] % 256;
 800609e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80060a2:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80060a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060aa:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80060ae:	4613      	mov	r3, r2
 80060b0:	015b      	lsls	r3, r3, #5
 80060b2:	441a      	add	r2, r3
 80060b4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80060b8:	4413      	add	r3, r2
 80060ba:	b2c9      	uxtb	r1, r1
 80060bc:	4a15      	ldr	r2, [pc, #84]	; (8006114 <main+0x3ec>)
 80060be:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<33; j++){
 80060c0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80060c4:	3301      	adds	r3, #1
 80060c6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80060ca:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	dde5      	ble.n	800609e <main+0x376>
	for(int i=0; i<668; i++){
 80060d2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80060d6:	3301      	adds	r3, #1
 80060d8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80060dc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80060e0:	f5b3 7f27 	cmp.w	r3, #668	; 0x29c
 80060e4:	dbd7      	blt.n	8006096 <main+0x36e>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 22050*1, 22050);
 80060e6:	f245 6222 	movw	r2, #22050	; 0x5622
 80060ea:	f245 6122 	movw	r1, #22050	; 0x5622
 80060ee:	4809      	ldr	r0, [pc, #36]	; (8006114 <main+0x3ec>)
 80060f0:	f001 f892 	bl	8007218 <BSP_QSPI_Write>

	// G6
	for(int i=0; i<786; i++){
 80060f4:	2300      	movs	r3, #0
 80060f6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80060fa:	e02e      	b.n	800615a <main+0x432>
		for(int j=0; j<28; j++){
 80060fc:	2300      	movs	r3, #0
 80060fe:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8006102:	e021      	b.n	8006148 <main+0x420>
 8006104:	40490fdb 	.word	0x40490fdb
 8006108:	42280000 	.word	0x42280000
 800610c:	43000000 	.word	0x43000000
 8006110:	42040000 	.word	0x42040000
 8006114:	20000318 	.word	0x20000318
			soundBuffer[i*28+j] = note_g6[j] % 256;
 8006118:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800611c:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8006120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006124:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8006128:	4613      	mov	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	461a      	mov	r2, r3
 8006132:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8006136:	4413      	add	r3, r2
 8006138:	b2c9      	uxtb	r1, r1
 800613a:	4a6b      	ldr	r2, [pc, #428]	; (80062e8 <main+0x5c0>)
 800613c:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<28; j++){
 800613e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8006142:	3301      	adds	r3, #1
 8006144:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8006148:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800614c:	2b1b      	cmp	r3, #27
 800614e:	dde3      	ble.n	8006118 <main+0x3f0>
	for(int i=0; i<786; i++){
 8006150:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8006154:	3301      	adds	r3, #1
 8006156:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800615a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800615e:	f240 3211 	movw	r2, #785	; 0x311
 8006162:	4293      	cmp	r3, r2
 8006164:	ddca      	ble.n	80060fc <main+0x3d4>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 22050*2, 22050);
 8006166:	f245 6222 	movw	r2, #22050	; 0x5622
 800616a:	f64a 4144 	movw	r1, #44100	; 0xac44
 800616e:	485e      	ldr	r0, [pc, #376]	; (80062e8 <main+0x5c0>)
 8006170:	f001 f852 	bl	8007218 <BSP_QSPI_Write>



	// C7
	for(int i=0; i<1050; i++){
 8006174:	2300      	movs	r3, #0
 8006176:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800617a:	e024      	b.n	80061c6 <main+0x49e>
		for(int j=0; j<21; j++){
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8006182:	e017      	b.n	80061b4 <main+0x48c>
			soundBuffer[i*21+j] = note_c7[j] % 256;
 8006184:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006188:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800618c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006190:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8006194:	4613      	mov	r3, r2
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	4413      	add	r3, r2
 800619a:	00da      	lsls	r2, r3, #3
 800619c:	1ad2      	subs	r2, r2, r3
 800619e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80061a2:	4413      	add	r3, r2
 80061a4:	b2c9      	uxtb	r1, r1
 80061a6:	4a50      	ldr	r2, [pc, #320]	; (80062e8 <main+0x5c0>)
 80061a8:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<21; j++){
 80061aa:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80061ae:	3301      	adds	r3, #1
 80061b0:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80061b4:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80061b8:	2b14      	cmp	r3, #20
 80061ba:	dde3      	ble.n	8006184 <main+0x45c>
	for(int i=0; i<1050; i++){
 80061bc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80061c0:	3301      	adds	r3, #1
 80061c2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80061c6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80061ca:	f240 4219 	movw	r2, #1049	; 0x419
 80061ce:	4293      	cmp	r3, r2
 80061d0:	ddd4      	ble.n	800617c <main+0x454>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 22050*3, 22050);
 80061d2:	f245 6222 	movw	r2, #22050	; 0x5622
 80061d6:	4945      	ldr	r1, [pc, #276]	; (80062ec <main+0x5c4>)
 80061d8:	4843      	ldr	r0, [pc, #268]	; (80062e8 <main+0x5c0>)
 80061da:	f001 f81d 	bl	8007218 <BSP_QSPI_Write>


	// E7
	for(int i=0; i<1296; i++){
 80061de:	2300      	movs	r3, #0
 80061e0:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80061e4:	e022      	b.n	800622c <main+0x504>
		for(int j=0; j<17; j++){
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 80061ec:	e015      	b.n	800621a <main+0x4f2>
			soundBuffer[i*17+j] = note_e7[j] % 256;
 80061ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80061f2:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 80061f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061fa:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80061fe:	4613      	mov	r3, r2
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	441a      	add	r2, r3
 8006204:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8006208:	4413      	add	r3, r2
 800620a:	b2c9      	uxtb	r1, r1
 800620c:	4a36      	ldr	r2, [pc, #216]	; (80062e8 <main+0x5c0>)
 800620e:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<17; j++){
 8006210:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8006214:	3301      	adds	r3, #1
 8006216:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 800621a:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800621e:	2b10      	cmp	r3, #16
 8006220:	dde5      	ble.n	80061ee <main+0x4c6>
	for(int i=0; i<1296; i++){
 8006222:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8006226:	3301      	adds	r3, #1
 8006228:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800622c:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8006230:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8006234:	dbd7      	blt.n	80061e6 <main+0x4be>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 22050*4, 22050);
 8006236:	f245 6222 	movw	r2, #22050	; 0x5622
 800623a:	492d      	ldr	r1, [pc, #180]	; (80062f0 <main+0x5c8>)
 800623c:	482a      	ldr	r0, [pc, #168]	; (80062e8 <main+0x5c0>)
 800623e:	f000 ffeb 	bl	8007218 <BSP_QSPI_Write>


	// G7
	for(int i=0; i<1574; i++){
 8006242:	2300      	movs	r3, #0
 8006244:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8006248:	e023      	b.n	8006292 <main+0x56a>
		for(int j=0; j<14; j++){
 800624a:	2300      	movs	r3, #0
 800624c:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8006250:	e016      	b.n	8006280 <main+0x558>
			soundBuffer[i*14+j] = note_g7[j] % 256;
 8006252:	1d3b      	adds	r3, r7, #4
 8006254:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8006258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800625c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8006260:	4613      	mov	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	461a      	mov	r2, r3
 800626a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800626e:	4413      	add	r3, r2
 8006270:	b2c9      	uxtb	r1, r1
 8006272:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <main+0x5c0>)
 8006274:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<14; j++){
 8006276:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800627a:	3301      	adds	r3, #1
 800627c:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8006280:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8006284:	2b0d      	cmp	r3, #13
 8006286:	dde4      	ble.n	8006252 <main+0x52a>
	for(int i=0; i<1574; i++){
 8006288:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800628c:	3301      	adds	r3, #1
 800628e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8006292:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8006296:	f240 6225 	movw	r2, #1573	; 0x625
 800629a:	4293      	cmp	r3, r2
 800629c:	ddd5      	ble.n	800624a <main+0x522>
		}
	}
	BSP_QSPI_Write((uint8_t*)&soundBuffer[0], 22050*5, 22050);
 800629e:	f245 6222 	movw	r2, #22050	; 0x5622
 80062a2:	4914      	ldr	r1, [pc, #80]	; (80062f4 <main+0x5cc>)
 80062a4:	4810      	ldr	r0, [pc, #64]	; (80062e8 <main+0x5c0>)
 80062a6:	f000 ffb7 	bl	8007218 <BSP_QSPI_Write>



	// Prepare to play the first two notes
	BSP_QSPI_Read((uint8_t *)&soundBufferDac[0], 0, 22050);
 80062aa:	f245 6222 	movw	r2, #22050	; 0x5622
 80062ae:	2100      	movs	r1, #0
 80062b0:	4811      	ldr	r0, [pc, #68]	; (80062f8 <main+0x5d0>)
 80062b2:	f000 ff6b 	bl	800718c <BSP_QSPI_Read>
	BSP_QSPI_Read((uint8_t *)&soundBufferDac[22050], 22050, 22050);
 80062b6:	f245 6222 	movw	r2, #22050	; 0x5622
 80062ba:	f245 6122 	movw	r1, #22050	; 0x5622
 80062be:	480f      	ldr	r0, [pc, #60]	; (80062fc <main+0x5d4>)
 80062c0:	f000 ff64 	bl	800718c <BSP_QSPI_Read>

	// Calibrate the accelerator
	calibrate();
 80062c4:	f000 fb70 	bl	80069a8 <calibrate>

	// Beep twice to indicate it's ready
	beepTwice = 1;
 80062c8:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <main+0x5d8>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)soundBufferDac, 11025, DAC_ALIGN_8B_R);
 80062ce:	2308      	movs	r3, #8
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	f642 3311 	movw	r3, #11025	; 0x2b11
 80062d6:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <main+0x5d0>)
 80062d8:	2100      	movs	r1, #0
 80062da:	480a      	ldr	r0, [pc, #40]	; (8006304 <main+0x5dc>)
 80062dc:	f7fa fb12 	bl	8000904 <HAL_DAC_Start_DMA>

	// Start the measurement
	HAL_TIM_Base_Start_IT(&htim2);
 80062e0:	4809      	ldr	r0, [pc, #36]	; (8006308 <main+0x5e0>)
 80062e2:	f7fe f847 	bl	8004374 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80062e6:	e7fe      	b.n	80062e6 <main+0x5be>
 80062e8:	20000318 	.word	0x20000318
 80062ec:	00010266 	.word	0x00010266
 80062f0:	00015888 	.word	0x00015888
 80062f4:	0001aeaa 	.word	0x0001aeaa
 80062f8:	20005bc0 	.word	0x20005bc0
 80062fc:	2000b1e2 	.word	0x2000b1e2
 8006300:	2000011f 	.word	0x2000011f
 8006304:	20000304 	.word	0x20000304
 8006308:	20005b48 	.word	0x20005b48

0800630c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b0b8      	sub	sp, #224	; 0xe0
 8006310:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006312:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006316:	2244      	movs	r2, #68	; 0x44
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f001 fdf6 	bl	8007f0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006320:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	609a      	str	r2, [r3, #8]
 800632c:	60da      	str	r2, [r3, #12]
 800632e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006330:	463b      	mov	r3, r7
 8006332:	2288      	movs	r2, #136	; 0x88
 8006334:	2100      	movs	r1, #0
 8006336:	4618      	mov	r0, r3
 8006338:	f001 fde8 	bl	8007f0c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800633c:	2310      	movs	r3, #16
 800633e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006342:	2301      	movs	r3, #1
 8006344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800634e:	2360      	movs	r3, #96	; 0x60
 8006350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006354:	2302      	movs	r3, #2
 8006356:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800635a:	2301      	movs	r3, #1
 800635c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8006360:	2301      	movs	r3, #1
 8006362:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 40;
 8006366:	2328      	movs	r3, #40	; 0x28
 8006368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800636c:	2307      	movs	r3, #7
 800636e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006372:	2302      	movs	r3, #2
 8006374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006378:	2302      	movs	r3, #2
 800637a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800637e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006382:	4618      	mov	r0, r3
 8006384:	f7fc fd04 	bl	8002d90 <HAL_RCC_OscConfig>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <SystemClock_Config+0x86>
	{
		Error_Handler();
 800638e:	f000 fc81 	bl	8006c94 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006392:	230f      	movs	r3, #15
 8006394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006398:	2303      	movs	r3, #3
 800639a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800639e:	2300      	movs	r3, #0
 80063a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80063aa:	2300      	movs	r3, #0
 80063ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80063b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80063b4:	2104      	movs	r1, #4
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fd f8d0 	bl	800355c <HAL_RCC_ClockConfig>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <SystemClock_Config+0xba>
	{
		Error_Handler();
 80063c2:	f000 fc67 	bl	8006c94 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80063c6:	2341      	movs	r3, #65	; 0x41
 80063c8:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80063ca:	2300      	movs	r3, #0
 80063cc:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80063ce:	2300      	movs	r3, #0
 80063d0:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80063d2:	463b      	mov	r3, r7
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fd fac5 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <SystemClock_Config+0xd8>
	{
		Error_Handler();
 80063e0:	f000 fc58 	bl	8006c94 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80063e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80063e8:	f7fb ff9c 	bl	8002324 <HAL_PWREx_ControlVoltageScaling>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <SystemClock_Config+0xea>
	{
		Error_Handler();
 80063f2:	f000 fc4f 	bl	8006c94 <Error_Handler>
	}
}
 80063f6:	bf00      	nop
 80063f8:	37e0      	adds	r7, #224	; 0xe0
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	; 0x28
 8006404:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8006406:	1d3b      	adds	r3, r7, #4
 8006408:	2224      	movs	r2, #36	; 0x24
 800640a:	2100      	movs	r1, #0
 800640c:	4618      	mov	r0, r3
 800640e:	f001 fd7d 	bl	8007f0c <memset>
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <MX_DAC1_Init+0x5c>)
 8006414:	4a12      	ldr	r2, [pc, #72]	; (8006460 <MX_DAC1_Init+0x60>)
 8006416:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006418:	4810      	ldr	r0, [pc, #64]	; (800645c <MX_DAC1_Init+0x5c>)
 800641a:	f7fa fa50 	bl	80008be <HAL_DAC_Init>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 8006424:	f000 fc36 	bl	8006c94 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006428:	2300      	movs	r3, #0
 800642a:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800642c:	2324      	movs	r3, #36	; 0x24
 800642e:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006434:	2300      	movs	r3, #0
 8006436:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006438:	2300      	movs	r3, #0
 800643a:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	2200      	movs	r2, #0
 8006440:	4619      	mov	r1, r3
 8006442:	4806      	ldr	r0, [pc, #24]	; (800645c <MX_DAC1_Init+0x5c>)
 8006444:	f7fa fb30 	bl	8000aa8 <HAL_DAC_ConfigChannel>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <MX_DAC1_Init+0x52>
	{
		Error_Handler();
 800644e:	f000 fc21 	bl	8006c94 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8006452:	bf00      	nop
 8006454:	3728      	adds	r7, #40	; 0x28
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000304 	.word	0x20000304
 8006460:	40007400 	.word	0x40007400

08006464 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8006468:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <MX_I2C1_Init+0x74>)
 800646a:	4a1c      	ldr	r2, [pc, #112]	; (80064dc <MX_I2C1_Init+0x78>)
 800646c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 800646e:	4b1a      	ldr	r3, [pc, #104]	; (80064d8 <MX_I2C1_Init+0x74>)
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <MX_I2C1_Init+0x7c>)
 8006472:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8006474:	4b18      	ldr	r3, [pc, #96]	; (80064d8 <MX_I2C1_Init+0x74>)
 8006476:	2200      	movs	r2, #0
 8006478:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800647a:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <MX_I2C1_Init+0x74>)
 800647c:	2201      	movs	r2, #1
 800647e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006480:	4b15      	ldr	r3, [pc, #84]	; (80064d8 <MX_I2C1_Init+0x74>)
 8006482:	2200      	movs	r2, #0
 8006484:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <MX_I2C1_Init+0x74>)
 8006488:	2200      	movs	r2, #0
 800648a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800648c:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <MX_I2C1_Init+0x74>)
 800648e:	2200      	movs	r2, #0
 8006490:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006492:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <MX_I2C1_Init+0x74>)
 8006494:	2200      	movs	r2, #0
 8006496:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006498:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <MX_I2C1_Init+0x74>)
 800649a:	2200      	movs	r2, #0
 800649c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800649e:	480e      	ldr	r0, [pc, #56]	; (80064d8 <MX_I2C1_Init+0x74>)
 80064a0:	f7fb f992 	bl	80017c8 <HAL_I2C_Init>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80064aa:	f000 fbf3 	bl	8006c94 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80064ae:	2100      	movs	r1, #0
 80064b0:	4809      	ldr	r0, [pc, #36]	; (80064d8 <MX_I2C1_Init+0x74>)
 80064b2:	f7fb fe91 	bl	80021d8 <HAL_I2CEx_ConfigAnalogFilter>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80064bc:	f000 fbea 	bl	8006c94 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80064c0:	2100      	movs	r1, #0
 80064c2:	4805      	ldr	r0, [pc, #20]	; (80064d8 <MX_I2C1_Init+0x74>)
 80064c4:	f7fb fed3 	bl	800226e <HAL_I2CEx_ConfigDigitalFilter>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80064ce:	f000 fbe1 	bl	8006c94 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80064d2:	bf00      	nop
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	2000593c 	.word	0x2000593c
 80064dc:	40005400 	.word	0x40005400
 80064e0:	10909cec 	.word	0x10909cec

080064e4 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 80064e8:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <MX_QUADSPI_Init+0x44>)
 80064ea:	4a10      	ldr	r2, [pc, #64]	; (800652c <MX_QUADSPI_Init+0x48>)
 80064ec:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 255;
 80064ee:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <MX_QUADSPI_Init+0x44>)
 80064f0:	22ff      	movs	r2, #255	; 0xff
 80064f2:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 1;
 80064f4:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <MX_QUADSPI_Init+0x44>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <MX_QUADSPI_Init+0x44>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 1;
 8006500:	4b09      	ldr	r3, [pc, #36]	; (8006528 <MX_QUADSPI_Init+0x44>)
 8006502:	2201      	movs	r2, #1
 8006504:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8006506:	4b08      	ldr	r3, [pc, #32]	; (8006528 <MX_QUADSPI_Init+0x44>)
 8006508:	2200      	movs	r2, #0
 800650a:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800650c:	4b06      	ldr	r3, [pc, #24]	; (8006528 <MX_QUADSPI_Init+0x44>)
 800650e:	2200      	movs	r2, #0
 8006510:	619a      	str	r2, [r3, #24]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006512:	4805      	ldr	r0, [pc, #20]	; (8006528 <MX_QUADSPI_Init+0x44>)
 8006514:	f7fb ff5c 	bl	80023d0 <HAL_QSPI_Init>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <MX_QUADSPI_Init+0x3e>
	{
		Error_Handler();
 800651e:	f000 fbb9 	bl	8006c94 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	/* USER CODE END QUADSPI_Init 2 */

}
 8006522:	bf00      	nop
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20010818 	.word	0x20010818
 800652c:	a0001000 	.word	0xa0001000

08006530 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006536:	f107 0310 	add.w	r3, r7, #16
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	605a      	str	r2, [r3, #4]
 8006540:	609a      	str	r2, [r3, #8]
 8006542:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	605a      	str	r2, [r3, #4]
 800654c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800654e:	4b1e      	ldr	r3, [pc, #120]	; (80065c8 <MX_TIM2_Init+0x98>)
 8006550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006554:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8006556:	4b1c      	ldr	r3, [pc, #112]	; (80065c8 <MX_TIM2_Init+0x98>)
 8006558:	2200      	movs	r2, #0
 800655a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800655c:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <MX_TIM2_Init+0x98>)
 800655e:	2200      	movs	r2, #0
 8006560:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1814;
 8006562:	4b19      	ldr	r3, [pc, #100]	; (80065c8 <MX_TIM2_Init+0x98>)
 8006564:	f240 7216 	movw	r2, #1814	; 0x716
 8006568:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800656a:	4b17      	ldr	r3, [pc, #92]	; (80065c8 <MX_TIM2_Init+0x98>)
 800656c:	2200      	movs	r2, #0
 800656e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006570:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <MX_TIM2_Init+0x98>)
 8006572:	2200      	movs	r2, #0
 8006574:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006576:	4814      	ldr	r0, [pc, #80]	; (80065c8 <MX_TIM2_Init+0x98>)
 8006578:	f7fd fea4 	bl	80042c4 <HAL_TIM_Base_Init>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8006582:	f000 fb87 	bl	8006c94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800658a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800658c:	f107 0310 	add.w	r3, r7, #16
 8006590:	4619      	mov	r1, r3
 8006592:	480d      	ldr	r0, [pc, #52]	; (80065c8 <MX_TIM2_Init+0x98>)
 8006594:	f7fe f87d 	bl	8004692 <HAL_TIM_ConfigClockSource>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 800659e:	f000 fb79 	bl	8006c94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80065a2:	2320      	movs	r3, #32
 80065a4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80065aa:	1d3b      	adds	r3, r7, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	4806      	ldr	r0, [pc, #24]	; (80065c8 <MX_TIM2_Init+0x98>)
 80065b0:	f7fe fa84 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80065ba:	f000 fb6b 	bl	8006c94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80065be:	bf00      	nop
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20005b48 	.word	0x20005b48

080065cc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80065d2:	f107 0310 	add.w	r3, r7, #16
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	605a      	str	r2, [r3, #4]
 80065dc:	609a      	str	r2, [r3, #8]
 80065de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065e0:	1d3b      	adds	r3, r7, #4
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	605a      	str	r2, [r3, #4]
 80065e8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80065ea:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <MX_TIM3_Init+0x94>)
 80065ec:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <MX_TIM3_Init+0x98>)
 80065ee:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80065f0:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <MX_TIM3_Init+0x94>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065f6:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <MX_TIM3_Init+0x94>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 7256;
 80065fc:	4b18      	ldr	r3, [pc, #96]	; (8006660 <MX_TIM3_Init+0x94>)
 80065fe:	f641 4258 	movw	r2, #7256	; 0x1c58
 8006602:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006604:	4b16      	ldr	r3, [pc, #88]	; (8006660 <MX_TIM3_Init+0x94>)
 8006606:	2200      	movs	r2, #0
 8006608:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800660a:	4b15      	ldr	r3, [pc, #84]	; (8006660 <MX_TIM3_Init+0x94>)
 800660c:	2200      	movs	r2, #0
 800660e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006610:	4813      	ldr	r0, [pc, #76]	; (8006660 <MX_TIM3_Init+0x94>)
 8006612:	f7fd fe57 	bl	80042c4 <HAL_TIM_Base_Init>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 800661c:	f000 fb3a 	bl	8006c94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006624:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006626:	f107 0310 	add.w	r3, r7, #16
 800662a:	4619      	mov	r1, r3
 800662c:	480c      	ldr	r0, [pc, #48]	; (8006660 <MX_TIM3_Init+0x94>)
 800662e:	f7fe f830 	bl	8004692 <HAL_TIM_ConfigClockSource>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8006638:	f000 fb2c 	bl	8006c94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800663c:	2320      	movs	r3, #32
 800663e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	4619      	mov	r1, r3
 8006648:	4805      	ldr	r0, [pc, #20]	; (8006660 <MX_TIM3_Init+0x94>)
 800664a:	f7fe fa37 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8006654:	f000 fb1e 	bl	8006c94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8006658:	bf00      	nop
 800665a:	3720      	adds	r7, #32
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	200059c8 	.word	0x200059c8
 8006664:	40000400 	.word	0x40000400

08006668 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800666c:	4b14      	ldr	r3, [pc, #80]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 800666e:	4a15      	ldr	r2, [pc, #84]	; (80066c4 <MX_USART1_UART_Init+0x5c>)
 8006670:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8006672:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 8006674:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006678:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800667a:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 800667c:	2200      	movs	r2, #0
 800667e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8006680:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 8006682:	2200      	movs	r2, #0
 8006684:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8006686:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 8006688:	2200      	movs	r2, #0
 800668a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800668c:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 800668e:	220c      	movs	r2, #12
 8006690:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 8006694:	2200      	movs	r2, #0
 8006696:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006698:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 800669a:	2200      	movs	r2, #0
 800669c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80066a4:	4b06      	ldr	r3, [pc, #24]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80066aa:	4805      	ldr	r0, [pc, #20]	; (80066c0 <MX_USART1_UART_Init+0x58>)
 80066ac:	f7fe faac 	bl	8004c08 <HAL_UART_Init>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80066b6:	f000 faed 	bl	8006c94 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80066ba:	bf00      	nop
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20005aa0 	.word	0x20005aa0
 80066c4:	40013800 	.word	0x40013800

080066c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <MX_DMA_Init+0x38>)
 80066d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d2:	4a0b      	ldr	r2, [pc, #44]	; (8006700 <MX_DMA_Init+0x38>)
 80066d4:	f043 0301 	orr.w	r3, r3, #1
 80066d8:	6493      	str	r3, [r2, #72]	; 0x48
 80066da:	4b09      	ldr	r3, [pc, #36]	; (8006700 <MX_DMA_Init+0x38>)
 80066dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80066e6:	2200      	movs	r2, #0
 80066e8:	2100      	movs	r1, #0
 80066ea:	200d      	movs	r0, #13
 80066ec:	f7fa f8b1 	bl	8000852 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80066f0:	200d      	movs	r0, #13
 80066f2:	f7fa f8ca 	bl	800088a <HAL_NVIC_EnableIRQ>

}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40021000 	.word	0x40021000

08006704 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800670a:	f107 030c 	add.w	r3, r7, #12
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	609a      	str	r2, [r3, #8]
 8006716:	60da      	str	r2, [r3, #12]
 8006718:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800671a:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <MX_GPIO_Init+0x80>)
 800671c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671e:	4a19      	ldr	r2, [pc, #100]	; (8006784 <MX_GPIO_Init+0x80>)
 8006720:	f043 0301 	orr.w	r3, r3, #1
 8006724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006726:	4b17      	ldr	r3, [pc, #92]	; (8006784 <MX_GPIO_Init+0x80>)
 8006728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	60bb      	str	r3, [r7, #8]
 8006730:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8006732:	4b14      	ldr	r3, [pc, #80]	; (8006784 <MX_GPIO_Init+0x80>)
 8006734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006736:	4a13      	ldr	r2, [pc, #76]	; (8006784 <MX_GPIO_Init+0x80>)
 8006738:	f043 0310 	orr.w	r3, r3, #16
 800673c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800673e:	4b11      	ldr	r3, [pc, #68]	; (8006784 <MX_GPIO_Init+0x80>)
 8006740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	607b      	str	r3, [r7, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800674a:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <MX_GPIO_Init+0x80>)
 800674c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674e:	4a0d      	ldr	r2, [pc, #52]	; (8006784 <MX_GPIO_Init+0x80>)
 8006750:	f043 0302 	orr.w	r3, r3, #2
 8006754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <MX_GPIO_Init+0x80>)
 8006758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8006762:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006766:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006768:	4b07      	ldr	r3, [pc, #28]	; (8006788 <MX_GPIO_Init+0x84>)
 800676a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006770:	f107 030c 	add.w	r3, r7, #12
 8006774:	4619      	mov	r1, r3
 8006776:	4805      	ldr	r0, [pc, #20]	; (800678c <MX_GPIO_Init+0x88>)
 8006778:	f7fa fd70 	bl	800125c <HAL_GPIO_Init>

}
 800677c:	bf00      	nop
 800677e:	3720      	adds	r7, #32
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40021000 	.word	0x40021000
 8006788:	10110000 	.word	0x10110000
 800678c:	48000400 	.word	0x48000400

08006790 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	readAccelerometer();
 8006798:	f000 f988 	bl	8006aac <readAccelerometer>
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <beepOnce>:

void beepOnce(){
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af02      	add	r7, sp, #8
	beepTwice = 0;
 80067aa:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <beepOnce+0x44>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	701a      	strb	r2, [r3, #0]
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)soundBufferDac, 11025, DAC_ALIGN_8B_R);
 80067b0:	2308      	movs	r3, #8
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	f642 3311 	movw	r3, #11025	; 0x2b11
 80067b8:	4a0c      	ldr	r2, [pc, #48]	; (80067ec <beepOnce+0x48>)
 80067ba:	2100      	movs	r1, #0
 80067bc:	480c      	ldr	r0, [pc, #48]	; (80067f0 <beepOnce+0x4c>)
 80067be:	f7fa f8a1 	bl	8000904 <HAL_DAC_Start_DMA>
	sprintf(beepStr, "beep Once. \n");
 80067c2:	4a0c      	ldr	r2, [pc, #48]	; (80067f4 <beepOnce+0x50>)
 80067c4:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <beepOnce+0x54>)
 80067c6:	4614      	mov	r4, r2
 80067c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80067ca:	6020      	str	r0, [r4, #0]
 80067cc:	6061      	str	r1, [r4, #4]
 80067ce:	60a2      	str	r2, [r4, #8]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	7323      	strb	r3, [r4, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)beepStr, sizeof(beepStr), 100);
 80067d4:	2364      	movs	r3, #100	; 0x64
 80067d6:	221e      	movs	r2, #30
 80067d8:	4906      	ldr	r1, [pc, #24]	; (80067f4 <beepOnce+0x50>)
 80067da:	4808      	ldr	r0, [pc, #32]	; (80067fc <beepOnce+0x58>)
 80067dc:	f7fe fa62 	bl	8004ca4 <HAL_UART_Transmit>
}
 80067e0:	bf00      	nop
 80067e2:	3704      	adds	r7, #4
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd90      	pop	{r4, r7, pc}
 80067e8:	2000011f 	.word	0x2000011f
 80067ec:	20005bc0 	.word	0x20005bc0
 80067f0:	20000304 	.word	0x20000304
 80067f4:	20005a60 	.word	0x20005a60
 80067f8:	08008740 	.word	0x08008740
 80067fc:	20005aa0 	.word	0x20005aa0

08006800 <beepMany>:

void beepMany() {
 8006800:	b590      	push	{r4, r7, lr}
 8006802:	b083      	sub	sp, #12
 8006804:	af02      	add	r7, sp, #8
	beepTwice = 1;
 8006806:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <beepMany+0x44>)
 8006808:	2201      	movs	r2, #1
 800680a:	701a      	strb	r2, [r3, #0]
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)soundBufferDac, 11025, DAC_ALIGN_8B_R);
 800680c:	2308      	movs	r3, #8
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	f642 3311 	movw	r3, #11025	; 0x2b11
 8006814:	4a0c      	ldr	r2, [pc, #48]	; (8006848 <beepMany+0x48>)
 8006816:	2100      	movs	r1, #0
 8006818:	480c      	ldr	r0, [pc, #48]	; (800684c <beepMany+0x4c>)
 800681a:	f7fa f873 	bl	8000904 <HAL_DAC_Start_DMA>
	sprintf(beepStr, "beep Once. \n");
 800681e:	4a0c      	ldr	r2, [pc, #48]	; (8006850 <beepMany+0x50>)
 8006820:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <beepMany+0x54>)
 8006822:	4614      	mov	r4, r2
 8006824:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006826:	6020      	str	r0, [r4, #0]
 8006828:	6061      	str	r1, [r4, #4]
 800682a:	60a2      	str	r2, [r4, #8]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	7323      	strb	r3, [r4, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)beepStr, sizeof(beepStr), 100);
 8006830:	2364      	movs	r3, #100	; 0x64
 8006832:	221e      	movs	r2, #30
 8006834:	4906      	ldr	r1, [pc, #24]	; (8006850 <beepMany+0x50>)
 8006836:	4808      	ldr	r0, [pc, #32]	; (8006858 <beepMany+0x58>)
 8006838:	f7fe fa34 	bl	8004ca4 <HAL_UART_Transmit>
}
 800683c:	bf00      	nop
 800683e:	3704      	adds	r7, #4
 8006840:	46bd      	mov	sp, r7
 8006842:	bd90      	pop	{r4, r7, pc}
 8006844:	2000011f 	.word	0x2000011f
 8006848:	20005bc0 	.word	0x20005bc0
 800684c:	20000304 	.word	0x20000304
 8006850:	20005a60 	.word	0x20005a60
 8006854:	08008740 	.word	0x08008740
 8006858:	20005aa0 	.word	0x20005aa0

0800685c <getXYZ>:

void getXYZ() {
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
	int16_t count2 = 0;
 8006862:	2300      	movs	r3, #0
 8006864:	80fb      	strh	r3, [r7, #6]
	Sample_X = 0;
 8006866:	4b46      	ldr	r3, [pc, #280]	; (8006980 <getXYZ+0x124>)
 8006868:	2200      	movs	r2, #0
 800686a:	801a      	strh	r2, [r3, #0]
	do{
		BSP_ACCELERO_AccGetXYZ(acceleroReading);
 800686c:	4845      	ldr	r0, [pc, #276]	; (8006984 <getXYZ+0x128>)
 800686e:	f000 fba7 	bl	8006fc0 <BSP_ACCELERO_AccGetXYZ>
		Sample_X = Sample_X + (int)acceleroReading[0];
 8006872:	4b44      	ldr	r3, [pc, #272]	; (8006984 <getXYZ+0x128>)
 8006874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006878:	b29a      	uxth	r2, r3
 800687a:	4b41      	ldr	r3, [pc, #260]	; (8006980 <getXYZ+0x124>)
 800687c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006880:	b29b      	uxth	r3, r3
 8006882:	4413      	add	r3, r2
 8006884:	b29b      	uxth	r3, r3
 8006886:	b21a      	sxth	r2, r3
 8006888:	4b3d      	ldr	r3, [pc, #244]	; (8006980 <getXYZ+0x124>)
 800688a:	801a      	strh	r2, [r3, #0]
		count2++; // average represents the acceleration of
 800688c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006890:	b29b      	uxth	r3, r3
 8006892:	3301      	adds	r3, #1
 8006894:	b29b      	uxth	r3, r3
 8006896:	80fb      	strh	r3, [r7, #6]
		// an instant.
	} while (count2!=0x40); // 64 sums of the acceleration sample
 8006898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	d1e5      	bne.n	800686c <getXYZ+0x10>

	Sample_X = Sample_X >> 6; // division by 64
 80068a0:	4b37      	ldr	r3, [pc, #220]	; (8006980 <getXYZ+0x124>)
 80068a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068a6:	119b      	asrs	r3, r3, #6
 80068a8:	b21a      	sxth	r2, r3
 80068aa:	4b35      	ldr	r3, [pc, #212]	; (8006980 <getXYZ+0x124>)
 80068ac:	801a      	strh	r2, [r3, #0]
	Sample_Y = Sample_X >> 6;
 80068ae:	4b34      	ldr	r3, [pc, #208]	; (8006980 <getXYZ+0x124>)
 80068b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068b4:	119b      	asrs	r3, r3, #6
 80068b6:	b21a      	sxth	r2, r3
 80068b8:	4b33      	ldr	r3, [pc, #204]	; (8006988 <getXYZ+0x12c>)
 80068ba:	801a      	strh	r2, [r3, #0]

	//push up counter
	Sample_Z = (int)acceleroReading[2];
 80068bc:	4b31      	ldr	r3, [pc, #196]	; (8006984 <getXYZ+0x128>)
 80068be:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80068c2:	4b32      	ldr	r3, [pc, #200]	; (800698c <getXYZ+0x130>)
 80068c4:	801a      	strh	r2, [r3, #0]
	if(abs(Sample_Z-1032)>100)/*otherwise in noise range*/{
 80068c6:	4b31      	ldr	r3, [pc, #196]	; (800698c <getXYZ+0x130>)
 80068c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068cc:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	bfb8      	it	lt
 80068d4:	425b      	neglt	r3, r3
 80068d6:	2b64      	cmp	r3, #100	; 0x64
 80068d8:	dd4d      	ble.n	8006976 <getXYZ+0x11a>
		calibratedz = Sample_Z-1032;
 80068da:	4b2c      	ldr	r3, [pc, #176]	; (800698c <getXYZ+0x130>)
 80068dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068e0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80068e4:	4a2a      	ldr	r2, [pc, #168]	; (8006990 <getXYZ+0x134>)
 80068e6:	6013      	str	r3, [r2, #0]
		integral_velo += calibratedz/100;
 80068e8:	4b29      	ldr	r3, [pc, #164]	; (8006990 <getXYZ+0x134>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a29      	ldr	r2, [pc, #164]	; (8006994 <getXYZ+0x138>)
 80068ee:	fb82 1203 	smull	r1, r2, r2, r3
 80068f2:	1152      	asrs	r2, r2, #5
 80068f4:	17db      	asrs	r3, r3, #31
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	4b27      	ldr	r3, [pc, #156]	; (8006998 <getXYZ+0x13c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4413      	add	r3, r2
 80068fe:	4a26      	ldr	r2, [pc, #152]	; (8006998 <getXYZ+0x13c>)
 8006900:	6013      	str	r3, [r2, #0]
		if(abs(integral_velo/100 - arr[counter])> 4){
 8006902:	4b25      	ldr	r3, [pc, #148]	; (8006998 <getXYZ+0x13c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a23      	ldr	r2, [pc, #140]	; (8006994 <getXYZ+0x138>)
 8006908:	fb82 1203 	smull	r1, r2, r2, r3
 800690c:	1152      	asrs	r2, r2, #5
 800690e:	17db      	asrs	r3, r3, #31
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	4b22      	ldr	r3, [pc, #136]	; (800699c <getXYZ+0x140>)
 8006914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006918:	4619      	mov	r1, r3
 800691a:	4b21      	ldr	r3, [pc, #132]	; (80069a0 <getXYZ+0x144>)
 800691c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	bfb8      	it	lt
 8006926:	425b      	neglt	r3, r3
 8006928:	2b04      	cmp	r3, #4
 800692a:	dd24      	ble.n	8006976 <getXYZ+0x11a>
			counter++;
 800692c:	4b1b      	ldr	r3, [pc, #108]	; (800699c <getXYZ+0x140>)
 800692e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006932:	b29b      	uxth	r3, r3
 8006934:	3301      	adds	r3, #1
 8006936:	b29b      	uxth	r3, r3
 8006938:	b21a      	sxth	r2, r3
 800693a:	4b18      	ldr	r3, [pc, #96]	; (800699c <getXYZ+0x140>)
 800693c:	801a      	strh	r2, [r3, #0]
			arr[counter] = integral_velo/100;
 800693e:	4b16      	ldr	r3, [pc, #88]	; (8006998 <getXYZ+0x13c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a16      	ldr	r2, [pc, #88]	; (800699c <getXYZ+0x140>)
 8006944:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006948:	4611      	mov	r1, r2
 800694a:	4a12      	ldr	r2, [pc, #72]	; (8006994 <getXYZ+0x138>)
 800694c:	fb82 0203 	smull	r0, r2, r2, r3
 8006950:	1152      	asrs	r2, r2, #5
 8006952:	17db      	asrs	r3, r3, #31
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	4a12      	ldr	r2, [pc, #72]	; (80069a0 <getXYZ+0x144>)
 8006958:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

			if(counter == target){
 800695c:	4b0f      	ldr	r3, [pc, #60]	; (800699c <getXYZ+0x140>)
 800695e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006962:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <getXYZ+0x148>)
 8006964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006968:	429a      	cmp	r2, r3
 800696a:	d102      	bne.n	8006972 <getXYZ+0x116>
				beepMany();
 800696c:	f7ff ff48 	bl	8006800 <beepMany>
				beepOnce();
			}

		}
	}
}
 8006970:	e001      	b.n	8006976 <getXYZ+0x11a>
				beepOnce();
 8006972:	f7ff ff17 	bl	80067a4 <beepOnce>
}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20005bbc 	.word	0x20005bbc
 8006984:	20000118 	.word	0x20000118
 8006988:	20005b20 	.word	0x20005b20
 800698c:	20005988 	.word	0x20005988
 8006990:	200002c8 	.word	0x200002c8
 8006994:	51eb851f 	.word	0x51eb851f
 8006998:	20000134 	.word	0x20000134
 800699c:	200002cc 	.word	0x200002cc
 80069a0:	20000138 	.word	0x20000138
 80069a4:	20000090 	.word	0x20000090

080069a8 <calibrate>:

void calibrate() {
 80069a8:	b5b0      	push	{r4, r5, r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
	int16_t count1 = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	80fb      	strh	r3, [r7, #6]

	HAL_Delay(3000);
 80069b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80069b6:	f7f9 fe4f 	bl	8000658 <HAL_Delay>

	do {
		getXYZ();
 80069ba:	f7ff ff4f 	bl	800685c <getXYZ>
		sstatex = sstatex + Sample_X; // Accumulate Samples
 80069be:	4b31      	ldr	r3, [pc, #196]	; (8006a84 <calibrate+0xdc>)
 80069c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	4b30      	ldr	r3, [pc, #192]	; (8006a88 <calibrate+0xe0>)
 80069c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	4413      	add	r3, r2
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	b21a      	sxth	r2, r3
 80069d4:	4b2b      	ldr	r3, [pc, #172]	; (8006a84 <calibrate+0xdc>)
 80069d6:	801a      	strh	r2, [r3, #0]
		sstatey = sstatey + Sample_Y;
 80069d8:	4b2c      	ldr	r3, [pc, #176]	; (8006a8c <calibrate+0xe4>)
 80069da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	4b2b      	ldr	r3, [pc, #172]	; (8006a90 <calibrate+0xe8>)
 80069e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	4413      	add	r3, r2
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	b21a      	sxth	r2, r3
 80069ee:	4b27      	ldr	r3, [pc, #156]	; (8006a8c <calibrate+0xe4>)
 80069f0:	801a      	strh	r2, [r3, #0]
		sstatez = sstatez + Sample_Z;
 80069f2:	4b28      	ldr	r3, [pc, #160]	; (8006a94 <calibrate+0xec>)
 80069f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	4b27      	ldr	r3, [pc, #156]	; (8006a98 <calibrate+0xf0>)
 80069fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	4413      	add	r3, r2
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	b21a      	sxth	r2, r3
 8006a08:	4b22      	ldr	r3, [pc, #136]	; (8006a94 <calibrate+0xec>)
 8006a0a:	801a      	strh	r2, [r3, #0]
		count1++;
 8006a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3301      	adds	r3, #1
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	80fb      	strh	r3, [r7, #6]
	} while (count1 != 0x0400); // 1024 times
 8006a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a20:	d1cb      	bne.n	80069ba <calibrate+0x12>

	sstatex = sstatex>>10; // division between 1024
 8006a22:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <calibrate+0xdc>)
 8006a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a28:	129b      	asrs	r3, r3, #10
 8006a2a:	b21a      	sxth	r2, r3
 8006a2c:	4b15      	ldr	r3, [pc, #84]	; (8006a84 <calibrate+0xdc>)
 8006a2e:	801a      	strh	r2, [r3, #0]
	sstatey = sstatey>>10;
 8006a30:	4b16      	ldr	r3, [pc, #88]	; (8006a8c <calibrate+0xe4>)
 8006a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a36:	129b      	asrs	r3, r3, #10
 8006a38:	b21a      	sxth	r2, r3
 8006a3a:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <calibrate+0xe4>)
 8006a3c:	801a      	strh	r2, [r3, #0]
	sstatez = sstatez>>10;
 8006a3e:	4b15      	ldr	r3, [pc, #84]	; (8006a94 <calibrate+0xec>)
 8006a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a44:	129b      	asrs	r3, r3, #10
 8006a46:	b21a      	sxth	r2, r3
 8006a48:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <calibrate+0xec>)
 8006a4a:	801a      	strh	r2, [r3, #0]

	calibrated = 1;
 8006a4c:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <calibrate+0xf4>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	701a      	strb	r2, [r3, #0]

	sprintf(accelerometerStr, "Calibration completed. \n");
 8006a52:	4a13      	ldr	r2, [pc, #76]	; (8006aa0 <calibrate+0xf8>)
 8006a54:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <calibrate+0xfc>)
 8006a56:	4615      	mov	r5, r2
 8006a58:	461c      	mov	r4, r3
 8006a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a5c:	6028      	str	r0, [r5, #0]
 8006a5e:	6069      	str	r1, [r5, #4]
 8006a60:	60aa      	str	r2, [r5, #8]
 8006a62:	60eb      	str	r3, [r5, #12]
 8006a64:	cc03      	ldmia	r4!, {r0, r1}
 8006a66:	6128      	str	r0, [r5, #16]
 8006a68:	6169      	str	r1, [r5, #20]
 8006a6a:	7823      	ldrb	r3, [r4, #0]
 8006a6c:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8006a6e:	2364      	movs	r3, #100	; 0x64
 8006a70:	221e      	movs	r2, #30
 8006a72:	490b      	ldr	r1, [pc, #44]	; (8006aa0 <calibrate+0xf8>)
 8006a74:	480c      	ldr	r0, [pc, #48]	; (8006aa8 <calibrate+0x100>)
 8006a76:	f7fe f915 	bl	8004ca4 <HAL_UART_Transmit>
}
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bdb0      	pop	{r4, r5, r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20005b22 	.word	0x20005b22
 8006a88:	20005bbc 	.word	0x20005bbc
 8006a8c:	20005a5c 	.word	0x20005a5c
 8006a90:	20005b20 	.word	0x20005b20
 8006a94:	20005b24 	.word	0x20005b24
 8006a98:	20005988 	.word	0x20005988
 8006a9c:	20000120 	.word	0x20000120
 8006aa0:	20005a80 	.word	0x20005a80
 8006aa4:	08008750 	.word	0x08008750
 8006aa8:	20005aa0 	.word	0x20005aa0

08006aac <readAccelerometer>:

void readAccelerometer() {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0

	// get one
	getXYZ();
 8006ab0:	f7ff fed4 	bl	800685c <getXYZ>
	accelerationx[0] = Sample_X - sstatex;
 8006ab4:	4b28      	ldr	r3, [pc, #160]	; (8006b58 <readAccelerometer+0xac>)
 8006ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	4b27      	ldr	r3, [pc, #156]	; (8006b5c <readAccelerometer+0xb0>)
 8006abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	b21a      	sxth	r2, r3
 8006aca:	4b25      	ldr	r3, [pc, #148]	; (8006b60 <readAccelerometer+0xb4>)
 8006acc:	801a      	strh	r2, [r3, #0]
	//velocityx[0] = velocityx[1] + accelerationx[1] + ((accelerationx[0] - accelerationx[1])>>1) ;

	// get one
	getXYZ();
 8006ace:	f7ff fec5 	bl	800685c <getXYZ>
	accelerationx[1] = Sample_X - sstatex;
 8006ad2:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <readAccelerometer+0xac>)
 8006ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	4b20      	ldr	r3, [pc, #128]	; (8006b5c <readAccelerometer+0xb0>)
 8006adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	b21a      	sxth	r2, r3
 8006ae8:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <readAccelerometer+0xb4>)
 8006aea:	805a      	strh	r2, [r3, #2]
	//velocityx[1] = velocityx[0] + accelerationx[0] + ((accelerationx[1] - accelerationx[0])>>1) ;

	if (!is_checking && isMovementDetected()) {
 8006aec:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <readAccelerometer+0xb8>)
 8006aee:	f993 3000 	ldrsb.w	r3, [r3]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d12a      	bne.n	8006b4c <readAccelerometer+0xa0>
 8006af6:	f000 f843 	bl	8006b80 <isMovementDetected>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d025      	beq.n	8006b4c <readAccelerometer+0xa0>
		is_checking = 1;
 8006b00:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <readAccelerometer+0xb8>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
		num_pushups++;
 8006b06:	4b18      	ldr	r3, [pc, #96]	; (8006b68 <readAccelerometer+0xbc>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	4b16      	ldr	r3, [pc, #88]	; (8006b68 <readAccelerometer+0xbc>)
 8006b10:	701a      	strb	r2, [r3, #0]
		sprintf(accelerometerStr, "Pushup detected. %d\n", num_pushups);
 8006b12:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <readAccelerometer+0xbc>)
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	4914      	ldr	r1, [pc, #80]	; (8006b6c <readAccelerometer+0xc0>)
 8006b1a:	4815      	ldr	r0, [pc, #84]	; (8006b70 <readAccelerometer+0xc4>)
 8006b1c:	f001 f9fe 	bl	8007f1c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8006b20:	2364      	movs	r3, #100	; 0x64
 8006b22:	221e      	movs	r2, #30
 8006b24:	4912      	ldr	r1, [pc, #72]	; (8006b70 <readAccelerometer+0xc4>)
 8006b26:	4813      	ldr	r0, [pc, #76]	; (8006b74 <readAccelerometer+0xc8>)
 8006b28:	f7fe f8bc 	bl	8004ca4 <HAL_UART_Transmit>
		pushupCur++;
 8006b2c:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <readAccelerometer+0xcc>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3301      	adds	r3, #1
 8006b32:	4a11      	ldr	r2, [pc, #68]	; (8006b78 <readAccelerometer+0xcc>)
 8006b34:	6013      	str	r3, [r2, #0]
		if(pushupCur < pushupAim){
 8006b36:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <readAccelerometer+0xcc>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <readAccelerometer+0xd0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	da02      	bge.n	8006b48 <readAccelerometer+0x9c>
			beepOnce();
 8006b42:	f7ff fe2f 	bl	80067a4 <beepOnce>
 8006b46:	e001      	b.n	8006b4c <readAccelerometer+0xa0>
		}else{
			beepMany();
 8006b48:	f7ff fe5a 	bl	8006800 <beepMany>
		}
	}
	is_checking = 0;
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <readAccelerometer+0xb8>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]
}
 8006b52:	bf00      	nop
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20005bbc 	.word	0x20005bbc
 8006b5c:	20005b22 	.word	0x20005b22
 8006b60:	20000124 	.word	0x20000124
 8006b64:	20000128 	.word	0x20000128
 8006b68:	20000130 	.word	0x20000130
 8006b6c:	0800876c 	.word	0x0800876c
 8006b70:	20005a80 	.word	0x20005a80
 8006b74:	20005aa0 	.word	0x20005aa0
 8006b78:	2000012c 	.word	0x2000012c
 8006b7c:	2000008c 	.word	0x2000008c

08006b80 <isMovementDetected>:

int isMovementDetected() {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
	int16_t accelerationx_f = (accelerationx[0] + accelerationx[1]) / 2;
 8006b86:	4b13      	ldr	r3, [pc, #76]	; (8006bd4 <isMovementDetected+0x54>)
 8006b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4b11      	ldr	r3, [pc, #68]	; (8006bd4 <isMovementDetected+0x54>)
 8006b90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b94:	4413      	add	r3, r2
 8006b96:	0fda      	lsrs	r2, r3, #31
 8006b98:	4413      	add	r3, r2
 8006b9a:	105b      	asrs	r3, r3, #1
 8006b9c:	80fb      	strh	r3, [r7, #6]
	if (abs(accelerationx_f) > 100) {
 8006b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfb8      	it	lt
 8006ba6:	425b      	neglt	r3, r3
 8006ba8:	2b64      	cmp	r3, #100	; 0x64
 8006baa:	dd0e      	ble.n	8006bca <isMovementDetected+0x4a>
		sprintf(accelerometerStr, "Acceleration %d\n", accelerationx_f);
 8006bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4909      	ldr	r1, [pc, #36]	; (8006bd8 <isMovementDetected+0x58>)
 8006bb4:	4809      	ldr	r0, [pc, #36]	; (8006bdc <isMovementDetected+0x5c>)
 8006bb6:	f001 f9b1 	bl	8007f1c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)accelerometerStr, sizeof(accelerometerStr), 100);
 8006bba:	2364      	movs	r3, #100	; 0x64
 8006bbc:	221e      	movs	r2, #30
 8006bbe:	4907      	ldr	r1, [pc, #28]	; (8006bdc <isMovementDetected+0x5c>)
 8006bc0:	4807      	ldr	r0, [pc, #28]	; (8006be0 <isMovementDetected+0x60>)
 8006bc2:	f7fe f86f 	bl	8004ca4 <HAL_UART_Transmit>
		return 1;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <isMovementDetected+0x4c>
	}

	return 0;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20000124 	.word	0x20000124
 8006bd8:	08008784 	.word	0x08008784
 8006bdc:	20005a80 	.word	0x20005a80
 8006be0:	20005aa0 	.word	0x20005aa0

08006be4 <HAL_DAC_ConvCpltCallbackCh1>:



void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef * hdac){
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	6078      	str	r0, [r7, #4]
	if (beepTwice == 1) {
 8006bec:	4b22      	ldr	r3, [pc, #136]	; (8006c78 <HAL_DAC_ConvCpltCallbackCh1+0x94>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d13d      	bne.n	8006c70 <HAL_DAC_ConvCpltCallbackCh1+0x8c>
		if (this_note == 0) {
 8006bf4:	4b21      	ldr	r3, [pc, #132]	; (8006c7c <HAL_DAC_ConvCpltCallbackCh1+0x98>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d119      	bne.n	8006c30 <HAL_DAC_ConvCpltCallbackCh1+0x4c>
			BSP_QSPI_Read((uint8_t *)&soundBufferDac[0], 22050*2, 22050);
 8006bfc:	f245 6222 	movw	r2, #22050	; 0x5622
 8006c00:	f64a 4144 	movw	r1, #44100	; 0xac44
 8006c04:	481e      	ldr	r0, [pc, #120]	; (8006c80 <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 8006c06:	f000 fac1 	bl	800718c <BSP_QSPI_Read>
			BSP_QSPI_Read((uint8_t *)&soundBufferDac[22050], 22050*3, 22050);
 8006c0a:	f245 6222 	movw	r2, #22050	; 0x5622
 8006c0e:	491d      	ldr	r1, [pc, #116]	; (8006c84 <HAL_DAC_ConvCpltCallbackCh1+0xa0>)
 8006c10:	481d      	ldr	r0, [pc, #116]	; (8006c88 <HAL_DAC_ConvCpltCallbackCh1+0xa4>)
 8006c12:	f000 fabb 	bl	800718c <BSP_QSPI_Read>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)soundBufferDac, 11025, DAC_ALIGN_8B_R);
 8006c16:	2308      	movs	r3, #8
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	f642 3311 	movw	r3, #11025	; 0x2b11
 8006c1e:	4a18      	ldr	r2, [pc, #96]	; (8006c80 <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 8006c20:	2100      	movs	r1, #0
 8006c22:	481a      	ldr	r0, [pc, #104]	; (8006c8c <HAL_DAC_ConvCpltCallbackCh1+0xa8>)
 8006c24:	f7f9 fe6e 	bl	8000904 <HAL_DAC_Start_DMA>
			beepTwice = 0;
 8006c28:	4b13      	ldr	r3, [pc, #76]	; (8006c78 <HAL_DAC_ConvCpltCallbackCh1+0x94>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	e00c      	b.n	8006c4a <HAL_DAC_ConvCpltCallbackCh1+0x66>
		} else {
			BSP_QSPI_Read((uint8_t *)&soundBufferDac[0], 22050*0, 22050);
 8006c30:	f245 6222 	movw	r2, #22050	; 0x5622
 8006c34:	2100      	movs	r1, #0
 8006c36:	4812      	ldr	r0, [pc, #72]	; (8006c80 <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 8006c38:	f000 faa8 	bl	800718c <BSP_QSPI_Read>
			BSP_QSPI_Read((uint8_t *)&soundBufferDac[22050], 22050*1, 22050);
 8006c3c:	f245 6222 	movw	r2, #22050	; 0x5622
 8006c40:	f245 6122 	movw	r1, #22050	; 0x5622
 8006c44:	4810      	ldr	r0, [pc, #64]	; (8006c88 <HAL_DAC_ConvCpltCallbackCh1+0xa4>)
 8006c46:	f000 faa1 	bl	800718c <BSP_QSPI_Read>
		}
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);	// toggle LED
 8006c4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c4e:	4810      	ldr	r0, [pc, #64]	; (8006c90 <HAL_DAC_ConvCpltCallbackCh1+0xac>)
 8006c50:	f7fa fda0 	bl	8001794 <HAL_GPIO_TogglePin>

		if (this_note < 1) {
 8006c54:	4b09      	ldr	r3, [pc, #36]	; (8006c7c <HAL_DAC_ConvCpltCallbackCh1+0x98>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <HAL_DAC_ConvCpltCallbackCh1+0x86>
			this_note++;
 8006c5c:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <HAL_DAC_ConvCpltCallbackCh1+0x98>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	3301      	adds	r3, #1
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <HAL_DAC_ConvCpltCallbackCh1+0x98>)
 8006c66:	701a      	strb	r2, [r3, #0]
		} else {
			this_note = 0;
		}
	}

}
 8006c68:	e002      	b.n	8006c70 <HAL_DAC_ConvCpltCallbackCh1+0x8c>
			this_note = 0;
 8006c6a:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <HAL_DAC_ConvCpltCallbackCh1+0x98>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	2000011f 	.word	0x2000011f
 8006c7c:	2000011e 	.word	0x2000011e
 8006c80:	20005bc0 	.word	0x20005bc0
 8006c84:	00010266 	.word	0x00010266
 8006c88:	2000b1e2 	.word	0x2000b1e2
 8006c8c:	20000304 	.word	0x20000304
 8006c90:	48000400 	.word	0x48000400

08006c94 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8006c98:	bf00      	nop
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	; 0x28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006cac:	4b27      	ldr	r3, [pc, #156]	; (8006d4c <I2Cx_MspInit+0xa8>)
 8006cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb0:	4a26      	ldr	r2, [pc, #152]	; (8006d4c <I2Cx_MspInit+0xa8>)
 8006cb2:	f043 0302 	orr.w	r3, r3, #2
 8006cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cb8:	4b24      	ldr	r3, [pc, #144]	; (8006d4c <I2Cx_MspInit+0xa8>)
 8006cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8006cc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006cc8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006cca:	2312      	movs	r3, #18
 8006ccc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8006cd6:	2304      	movs	r3, #4
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006cda:	f107 0314 	add.w	r3, r7, #20
 8006cde:	4619      	mov	r1, r3
 8006ce0:	481b      	ldr	r0, [pc, #108]	; (8006d50 <I2Cx_MspInit+0xac>)
 8006ce2:	f7fa fabb 	bl	800125c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006ce6:	f107 0314 	add.w	r3, r7, #20
 8006cea:	4619      	mov	r1, r3
 8006cec:	4818      	ldr	r0, [pc, #96]	; (8006d50 <I2Cx_MspInit+0xac>)
 8006cee:	f7fa fab5 	bl	800125c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8006cf2:	4b16      	ldr	r3, [pc, #88]	; (8006d4c <I2Cx_MspInit+0xa8>)
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf6:	4a15      	ldr	r2, [pc, #84]	; (8006d4c <I2Cx_MspInit+0xa8>)
 8006cf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8006cfe:	4b13      	ldr	r3, [pc, #76]	; (8006d4c <I2Cx_MspInit+0xa8>)
 8006d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8006d0a:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <I2Cx_MspInit+0xa8>)
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	4a0f      	ldr	r2, [pc, #60]	; (8006d4c <I2Cx_MspInit+0xa8>)
 8006d10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d14:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <I2Cx_MspInit+0xa8>)
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1a:	4a0c      	ldr	r2, [pc, #48]	; (8006d4c <I2Cx_MspInit+0xa8>)
 8006d1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006d20:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8006d22:	2200      	movs	r2, #0
 8006d24:	210f      	movs	r1, #15
 8006d26:	2021      	movs	r0, #33	; 0x21
 8006d28:	f7f9 fd93 	bl	8000852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8006d2c:	2021      	movs	r0, #33	; 0x21
 8006d2e:	f7f9 fdac 	bl	800088a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8006d32:	2200      	movs	r2, #0
 8006d34:	210f      	movs	r1, #15
 8006d36:	2022      	movs	r0, #34	; 0x22
 8006d38:	f7f9 fd8b 	bl	8000852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8006d3c:	2022      	movs	r0, #34	; 0x22
 8006d3e:	f7f9 fda4 	bl	800088a <HAL_NVIC_EnableIRQ>
}
 8006d42:	bf00      	nop
 8006d44:	3728      	adds	r7, #40	; 0x28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	48000400 	.word	0x48000400

08006d54 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a12      	ldr	r2, [pc, #72]	; (8006da8 <I2Cx_Init+0x54>)
 8006d60:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a11      	ldr	r2, [pc, #68]	; (8006dac <I2Cx_Init+0x58>)
 8006d66:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff ff89 	bl	8006ca4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fa fd18 	bl	80017c8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8006d98:	2100      	movs	r1, #0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fb fa1c 	bl	80021d8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	40005800 	.word	0x40005800
 8006dac:	00702681 	.word	0x00702681

08006db0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08a      	sub	sp, #40	; 0x28
 8006db4:	af04      	add	r7, sp, #16
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	72fb      	strb	r3, [r7, #11]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	813b      	strh	r3, [r7, #8]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	b299      	uxth	r1, r3
 8006dd2:	88f8      	ldrh	r0, [r7, #6]
 8006dd4:	893a      	ldrh	r2, [r7, #8]
 8006dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dda:	9302      	str	r3, [sp, #8]
 8006ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	4603      	mov	r3, r0
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f7fa fec0 	bl	8001b6c <HAL_I2C_Mem_Read>
 8006dec:	4603      	mov	r3, r0
 8006dee:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d004      	beq.n	8006e00 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f832 	bl	8006e64 <I2Cx_Error>
  }
  return status;
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b08a      	sub	sp, #40	; 0x28
 8006e0e:	af04      	add	r7, sp, #16
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	4608      	mov	r0, r1
 8006e14:	4611      	mov	r1, r2
 8006e16:	461a      	mov	r2, r3
 8006e18:	4603      	mov	r3, r0
 8006e1a:	72fb      	strb	r3, [r7, #11]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	813b      	strh	r3, [r7, #8]
 8006e20:	4613      	mov	r3, r2
 8006e22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	b299      	uxth	r1, r3
 8006e2c:	88f8      	ldrh	r0, [r7, #6]
 8006e2e:	893a      	ldrh	r2, [r7, #8]
 8006e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e34:	9302      	str	r3, [sp, #8]
 8006e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4603      	mov	r3, r0
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f7fa fd7f 	bl	8001944 <HAL_I2C_Mem_Write>
 8006e46:	4603      	mov	r3, r0
 8006e48:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006e50:	7afb      	ldrb	r3, [r7, #11]
 8006e52:	4619      	mov	r1, r3
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f805 	bl	8006e64 <I2Cx_Error>
  }
  return status;
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fa fd38 	bl	80018e6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff ff6c 	bl	8006d54 <I2Cx_Init>
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8006e88:	4802      	ldr	r0, [pc, #8]	; (8006e94 <SENSOR_IO_Init+0x10>)
 8006e8a:	f7ff ff63 	bl	8006d54 <I2Cx_Init>
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200108dc 	.word	0x200108dc

08006e98 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	71fb      	strb	r3, [r7, #7]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	71bb      	strb	r3, [r7, #6]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8006eaa:	79bb      	ldrb	r3, [r7, #6]
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	79f9      	ldrb	r1, [r7, #7]
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	1d7b      	adds	r3, r7, #5
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	2301      	movs	r3, #1
 8006eba:	4803      	ldr	r0, [pc, #12]	; (8006ec8 <SENSOR_IO_Write+0x30>)
 8006ebc:	f7ff ffa5 	bl	8006e0a <I2Cx_WriteMultiple>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	200108dc 	.word	0x200108dc

08006ecc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	460a      	mov	r2, r1
 8006ed6:	71fb      	strb	r3, [r7, #7]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006ee0:	79bb      	ldrb	r3, [r7, #6]
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	79f9      	ldrb	r1, [r7, #7]
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	f107 030f 	add.w	r3, r7, #15
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	4804      	ldr	r0, [pc, #16]	; (8006f04 <SENSOR_IO_Read+0x38>)
 8006ef4:	f7ff ff5c 	bl	8006db0 <I2Cx_ReadMultiple>

  return read_value;
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	200108dc 	.word	0x200108dc

08006f08 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	603a      	str	r2, [r7, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	71fb      	strb	r3, [r7, #7]
 8006f16:	460b      	mov	r3, r1
 8006f18:	71bb      	strb	r3, [r7, #6]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8006f1e:	79bb      	ldrb	r3, [r7, #6]
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	79f9      	ldrb	r1, [r7, #7]
 8006f24:	88bb      	ldrh	r3, [r7, #4]
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4804      	ldr	r0, [pc, #16]	; (8006f40 <SENSOR_IO_ReadMultiple+0x38>)
 8006f30:	f7ff ff3e 	bl	8006db0 <I2Cx_ReadMultiple>
 8006f34:	4603      	mov	r3, r0
 8006f36:	b29b      	uxth	r3, r3
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	200108dc 	.word	0x200108dc

08006f44 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8006f52:	4b19      	ldr	r3, [pc, #100]	; (8006fb8 <BSP_ACCELERO_Init+0x74>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	4798      	blx	r3
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b6a      	cmp	r3, #106	; 0x6a
 8006f5c:	d002      	beq.n	8006f64 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	73fb      	strb	r3, [r7, #15]
 8006f62:	e024      	b.n	8006fae <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8006f64:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <BSP_ACCELERO_Init+0x78>)
 8006f66:	4a14      	ldr	r2, [pc, #80]	; (8006fb8 <BSP_ACCELERO_Init+0x74>)
 8006f68:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8006f6a:	2330      	movs	r3, #48	; 0x30
 8006f6c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8006f72:	2300      	movs	r3, #0
 8006f74:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8006f76:	2340      	movs	r3, #64	; 0x40
 8006f78:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8006f82:	797a      	ldrb	r2, [r7, #5]
 8006f84:	7abb      	ldrb	r3, [r7, #10]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8006f8c:	7a3b      	ldrb	r3, [r7, #8]
 8006f8e:	f043 0304 	orr.w	r3, r3, #4
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	b21a      	sxth	r2, r3
 8006f98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	b21b      	sxth	r3, r3
 8006fa0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8006fa2:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <BSP_ACCELERO_Init+0x78>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	89ba      	ldrh	r2, [r7, #12]
 8006faa:	4610      	mov	r0, r2
 8006fac:	4798      	blx	r3
  }  

  return ret;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000024 	.word	0x20000024
 8006fbc:	200002d0 	.word	0x200002d0

08006fc0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8006fc8:	4b08      	ldr	r3, [pc, #32]	; (8006fec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d009      	beq.n	8006fe4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8006fd0:	4b06      	ldr	r3, [pc, #24]	; (8006fec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8006fda:	4b04      	ldr	r3, [pc, #16]	; (8006fec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
    }
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	200002d0 	.word	0x200002d0

08006ff0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8006ffe:	4b1b      	ldr	r3, [pc, #108]	; (800706c <BSP_GYRO_Init+0x7c>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	4798      	blx	r3
 8007004:	4603      	mov	r3, r0
 8007006:	2b6a      	cmp	r3, #106	; 0x6a
 8007008:	d002      	beq.n	8007010 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	73fb      	strb	r3, [r7, #15]
 800700e:	e028      	b.n	8007062 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8007010:	4b17      	ldr	r3, [pc, #92]	; (8007070 <BSP_GYRO_Init+0x80>)
 8007012:	4a16      	ldr	r2, [pc, #88]	; (800706c <BSP_GYRO_Init+0x7c>)
 8007014:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800701a:	2330      	movs	r3, #48	; 0x30
 800701c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007026:	2340      	movs	r3, #64	; 0x40
 8007028:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800702e:	230c      	movs	r3, #12
 8007030:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8007032:	7aba      	ldrb	r2, [r7, #10]
 8007034:	797b      	ldrb	r3, [r7, #5]
 8007036:	4313      	orrs	r3, r2
 8007038:	b2db      	uxtb	r3, r3
 800703a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800703c:	7a3b      	ldrb	r3, [r7, #8]
 800703e:	f043 0304 	orr.w	r3, r3, #4
 8007042:	b2db      	uxtb	r3, r3
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	b21a      	sxth	r2, r3
 8007048:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	b21b      	sxth	r3, r3
 8007050:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8007052:	4b07      	ldr	r3, [pc, #28]	; (8007070 <BSP_GYRO_Init+0x80>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	89ba      	ldrh	r2, [r7, #12]
 800705a:	4610      	mov	r0, r2
 800705c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000058 	.word	0x20000058
 8007070:	200002d4 	.word	0x200002d4

08007074 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <BSP_HSENSOR_Init+0x38>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	20be      	movs	r0, #190	; 0xbe
 8007080:	4798      	blx	r3
 8007082:	4603      	mov	r3, r0
 8007084:	2bbc      	cmp	r3, #188	; 0xbc
 8007086:	d002      	beq.n	800708e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	607b      	str	r3, [r7, #4]
 800708c:	e009      	b.n	80070a2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800708e:	4b08      	ldr	r3, [pc, #32]	; (80070b0 <BSP_HSENSOR_Init+0x3c>)
 8007090:	4a06      	ldr	r2, [pc, #24]	; (80070ac <BSP_HSENSOR_Init+0x38>)
 8007092:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8007094:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <BSP_HSENSOR_Init+0x3c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	20be      	movs	r0, #190	; 0xbe
 800709c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80070a2:	687b      	ldr	r3, [r7, #4]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000008 	.word	0x20000008
 80070b0:	200002d8 	.word	0x200002d8

080070b4 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80070ba:	4b32      	ldr	r3, [pc, #200]	; (8007184 <BSP_QSPI_Init+0xd0>)
 80070bc:	4a32      	ldr	r2, [pc, #200]	; (8007188 <BSP_QSPI_Init+0xd4>)
 80070be:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80070c0:	4830      	ldr	r0, [pc, #192]	; (8007184 <BSP_QSPI_Init+0xd0>)
 80070c2:	f7fb f9fb 	bl	80024bc <HAL_QSPI_DeInit>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e054      	b.n	800717a <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80070d0:	f000 f964 	bl	800739c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 80070d4:	4b2b      	ldr	r3, [pc, #172]	; (8007184 <BSP_QSPI_Init+0xd0>)
 80070d6:	2202      	movs	r2, #2
 80070d8:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80070da:	4b2a      	ldr	r3, [pc, #168]	; (8007184 <BSP_QSPI_Init+0xd0>)
 80070dc:	2204      	movs	r2, #4
 80070de:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80070e0:	4b28      	ldr	r3, [pc, #160]	; (8007184 <BSP_QSPI_Init+0xd0>)
 80070e2:	2210      	movs	r2, #16
 80070e4:	60da      	str	r2, [r3, #12]
 80070e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80070ea:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	fa93 f3a3 	rbit	r3, r3
 80070f2:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 80070fe:	2320      	movs	r3, #32
 8007100:	e003      	b.n	800710a <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	fab3 f383 	clz	r3, r3
 8007108:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 800710a:	3b01      	subs	r3, #1
 800710c:	461a      	mov	r2, r3
 800710e:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <BSP_QSPI_Init+0xd0>)
 8007110:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8007112:	4b1c      	ldr	r3, [pc, #112]	; (8007184 <BSP_QSPI_Init+0xd0>)
 8007114:	2200      	movs	r2, #0
 8007116:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8007118:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <BSP_QSPI_Init+0xd0>)
 800711a:	2200      	movs	r2, #0
 800711c:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800711e:	4819      	ldr	r0, [pc, #100]	; (8007184 <BSP_QSPI_Init+0xd0>)
 8007120:	f7fb f956 	bl	80023d0 <HAL_QSPI_Init>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e025      	b.n	800717a <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 800712e:	4815      	ldr	r0, [pc, #84]	; (8007184 <BSP_QSPI_Init+0xd0>)
 8007130:	f000 f974 	bl	800741c <QSPI_ResetMemory>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 800713a:	2304      	movs	r3, #4
 800713c:	e01d      	b.n	800717a <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800713e:	2101      	movs	r1, #1
 8007140:	4810      	ldr	r0, [pc, #64]	; (8007184 <BSP_QSPI_Init+0xd0>)
 8007142:	f000 fa35 	bl	80075b0 <QSPI_QuadMode>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e014      	b.n	800717a <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8007150:	2101      	movs	r1, #1
 8007152:	480c      	ldr	r0, [pc, #48]	; (8007184 <BSP_QSPI_Init+0xd0>)
 8007154:	f000 fad4 	bl	8007700 <QSPI_HighPerfMode>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e00b      	b.n	800717a <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8007162:	4b08      	ldr	r3, [pc, #32]	; (8007184 <BSP_QSPI_Init+0xd0>)
 8007164:	2201      	movs	r2, #1
 8007166:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8007168:	4806      	ldr	r0, [pc, #24]	; (8007184 <BSP_QSPI_Init+0xd0>)
 800716a:	f7fb f931 	bl	80023d0 <HAL_QSPI_Init>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20010928 	.word	0x20010928
 8007188:	a0001000 	.word	0xa0001000

0800718c <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b092      	sub	sp, #72	; 0x48
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8007198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800719c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 800719e:	23eb      	movs	r3, #235	; 0xeb
 80071a0:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 80071a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 80071a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071ac:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 80071b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80071b6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80071b8:	2300      	movs	r3, #0
 80071ba:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 80071bc:	23aa      	movs	r3, #170	; 0xaa
 80071be:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 80071c0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80071c4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80071c6:	2304      	movs	r3, #4
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 80071ce:	2300      	movs	r3, #0
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 80071d2:	2300      	movs	r3, #0
 80071d4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 80071d6:	2300      	movs	r3, #0
 80071d8:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071da:	f107 0310 	add.w	r3, r7, #16
 80071de:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e2:	4619      	mov	r1, r3
 80071e4:	480b      	ldr	r0, [pc, #44]	; (8007214 <BSP_QSPI_Read+0x88>)
 80071e6:	f7fb f98d 	bl	8002504 <HAL_QSPI_Command>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e00b      	b.n	800720c <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f8:	68f9      	ldr	r1, [r7, #12]
 80071fa:	4806      	ldr	r0, [pc, #24]	; (8007214 <BSP_QSPI_Read+0x88>)
 80071fc:	f7fb fa77 	bl	80026ee <HAL_QSPI_Receive>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3748      	adds	r7, #72	; 0x48
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20010928 	.word	0x20010928

08007218 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b096      	sub	sp, #88	; 0x58
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800722c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800722e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d901      	bls.n	800723a <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4413      	add	r3, r2
 8007244:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 800724c:	2338      	movs	r3, #56	; 0x38
 800724e:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8007250:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007254:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8007256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800725a:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800725c:	2300      	movs	r3, #0
 800725e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8007260:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8007264:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800726a:	2300      	movs	r3, #0
 800726c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800726e:	2300      	movs	r3, #0
 8007270:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007272:	2300      	movs	r3, #0
 8007274:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8007276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007278:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 800727a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800727e:	4824      	ldr	r0, [pc, #144]	; (8007310 <BSP_QSPI_Write+0xf8>)
 8007280:	f000 f910 	bl	80074a4 <QSPI_WriteEnable>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e03b      	b.n	8007306 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800728e:	f107 0314 	add.w	r3, r7, #20
 8007292:	f241 3288 	movw	r2, #5000	; 0x1388
 8007296:	4619      	mov	r1, r3
 8007298:	481d      	ldr	r0, [pc, #116]	; (8007310 <BSP_QSPI_Write+0xf8>)
 800729a:	f7fb f933 	bl	8002504 <HAL_QSPI_Command>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e02e      	b.n	8007306 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80072a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ac:	68f9      	ldr	r1, [r7, #12]
 80072ae:	4818      	ldr	r0, [pc, #96]	; (8007310 <BSP_QSPI_Write+0xf8>)
 80072b0:	f7fb f986 	bl	80025c0 <HAL_QSPI_Transmit>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e023      	b.n	8007306 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80072be:	f241 3188 	movw	r1, #5000	; 0x1388
 80072c2:	4813      	ldr	r0, [pc, #76]	; (8007310 <BSP_QSPI_Write+0xf8>)
 80072c4:	f000 f93a 	bl	800753c <QSPI_AutoPollingMemReady>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e019      	b.n	8007306 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80072d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d6:	4413      	add	r3, r2
 80072d8:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072de:	4413      	add	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 80072e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80072e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d203      	bcs.n	80072f6 <BSP_QSPI_Write+0xde>
 80072ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	e001      	b.n	80072fa <BSP_QSPI_Write+0xe2>
 80072f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072fa:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 80072fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007300:	429a      	cmp	r2, r3
 8007302:	d3b8      	bcc.n	8007276 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3758      	adds	r7, #88	; 0x58
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20010928 	.word	0x20010928

08007314 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b090      	sub	sp, #64	; 0x40
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800731c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007320:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 8007322:	23d8      	movs	r3, #216	; 0xd8
 8007324:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8007326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800732c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007330:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007336:	2300      	movs	r3, #0
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800733a:	2300      	movs	r3, #0
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007342:	2300      	movs	r3, #0
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007346:	2300      	movs	r3, #0
 8007348:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800734a:	2300      	movs	r3, #0
 800734c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800734e:	4812      	ldr	r0, [pc, #72]	; (8007398 <BSP_QSPI_Erase_Block+0x84>)
 8007350:	f000 f8a8 	bl	80074a4 <QSPI_WriteEnable>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e017      	b.n	800738e <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800735e:	f107 0308 	add.w	r3, r7, #8
 8007362:	f241 3288 	movw	r2, #5000	; 0x1388
 8007366:	4619      	mov	r1, r3
 8007368:	480b      	ldr	r0, [pc, #44]	; (8007398 <BSP_QSPI_Erase_Block+0x84>)
 800736a:	f7fb f8cb 	bl	8002504 <HAL_QSPI_Command>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e00a      	b.n	800738e <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8007378:	f640 51ac 	movw	r1, #3500	; 0xdac
 800737c:	4806      	ldr	r0, [pc, #24]	; (8007398 <BSP_QSPI_Erase_Block+0x84>)
 800737e:	f000 f8dd 	bl	800753c <QSPI_AutoPollingMemReady>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e000      	b.n	800738e <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3740      	adds	r7, #64	; 0x40
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20010928 	.word	0x20010928

0800739c <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80073a2:	4b1c      	ldr	r3, [pc, #112]	; (8007414 <BSP_QSPI_MspInit+0x78>)
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a6:	4a1b      	ldr	r2, [pc, #108]	; (8007414 <BSP_QSPI_MspInit+0x78>)
 80073a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073ac:	6513      	str	r3, [r2, #80]	; 0x50
 80073ae:	4b19      	ldr	r3, [pc, #100]	; (8007414 <BSP_QSPI_MspInit+0x78>)
 80073b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b6:	60bb      	str	r3, [r7, #8]
 80073b8:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80073ba:	4b16      	ldr	r3, [pc, #88]	; (8007414 <BSP_QSPI_MspInit+0x78>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	4a15      	ldr	r2, [pc, #84]	; (8007414 <BSP_QSPI_MspInit+0x78>)
 80073c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c4:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80073c6:	4b13      	ldr	r3, [pc, #76]	; (8007414 <BSP_QSPI_MspInit+0x78>)
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	4a12      	ldr	r2, [pc, #72]	; (8007414 <BSP_QSPI_MspInit+0x78>)
 80073cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80073d2:	4b10      	ldr	r3, [pc, #64]	; (8007414 <BSP_QSPI_MspInit+0x78>)
 80073d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d6:	4a0f      	ldr	r2, [pc, #60]	; (8007414 <BSP_QSPI_MspInit+0x78>)
 80073d8:	f043 0310 	orr.w	r3, r3, #16
 80073dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073de:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <BSP_QSPI_MspInit+0x78>)
 80073e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e2:	f003 0310 	and.w	r3, r3, #16
 80073e6:	607b      	str	r3, [r7, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80073ea:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80073ee:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80073f0:	2302      	movs	r3, #2
 80073f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80073f8:	2303      	movs	r3, #3
 80073fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80073fc:	230a      	movs	r3, #10
 80073fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007400:	f107 030c 	add.w	r3, r7, #12
 8007404:	4619      	mov	r1, r3
 8007406:	4804      	ldr	r0, [pc, #16]	; (8007418 <BSP_QSPI_MspInit+0x7c>)
 8007408:	f7f9 ff28 	bl	800125c <HAL_GPIO_Init>
}
 800740c:	bf00      	nop
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40021000 	.word	0x40021000
 8007418:	48001000 	.word	0x48001000

0800741c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b090      	sub	sp, #64	; 0x40
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007428:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 800742a:	2366      	movs	r3, #102	; 0x66
 800742c:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800742e:	2300      	movs	r3, #0
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007432:	2300      	movs	r3, #0
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8007436:	2300      	movs	r3, #0
 8007438:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800743e:	2300      	movs	r3, #0
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007442:	2300      	movs	r3, #0
 8007444:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007446:	2300      	movs	r3, #0
 8007448:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800744a:	f107 0308 	add.w	r3, r7, #8
 800744e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007452:	4619      	mov	r1, r3
 8007454:	4812      	ldr	r0, [pc, #72]	; (80074a0 <QSPI_ResetMemory+0x84>)
 8007456:	f7fb f855 	bl	8002504 <HAL_QSPI_Command>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e019      	b.n	8007498 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8007464:	2399      	movs	r3, #153	; 0x99
 8007466:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007468:	f107 0308 	add.w	r3, r7, #8
 800746c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007470:	4619      	mov	r1, r3
 8007472:	480b      	ldr	r0, [pc, #44]	; (80074a0 <QSPI_ResetMemory+0x84>)
 8007474:	f7fb f846 	bl	8002504 <HAL_QSPI_Command>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e00a      	b.n	8007498 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007482:	f241 3188 	movw	r1, #5000	; 0x1388
 8007486:	4806      	ldr	r0, [pc, #24]	; (80074a0 <QSPI_ResetMemory+0x84>)
 8007488:	f000 f858 	bl	800753c <QSPI_AutoPollingMemReady>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e000      	b.n	8007498 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3740      	adds	r7, #64	; 0x40
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20010928 	.word	0x20010928

080074a4 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b096      	sub	sp, #88	; 0x58
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80074ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80074b2:	2306      	movs	r3, #6
 80074b4:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80074ba:	2300      	movs	r3, #0
 80074bc:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80074be:	2300      	movs	r3, #0
 80074c0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80074c6:	2300      	movs	r3, #0
 80074c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80074ca:	2300      	movs	r3, #0
 80074cc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80074ce:	2300      	movs	r3, #0
 80074d0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80074d2:	f107 0320 	add.w	r3, r7, #32
 80074d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074da:	4619      	mov	r1, r3
 80074dc:	4816      	ldr	r0, [pc, #88]	; (8007538 <QSPI_WriteEnable+0x94>)
 80074de:	f7fb f811 	bl	8002504 <HAL_QSPI_Command>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e020      	b.n	800752e <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 80074ec:	2302      	movs	r3, #2
 80074ee:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 80074f0:	2302      	movs	r3, #2
 80074f2:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80074f8:	2301      	movs	r3, #1
 80074fa:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80074fc:	2310      	movs	r3, #16
 80074fe:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8007500:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007504:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8007506:	2305      	movs	r3, #5
 8007508:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 800750a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800750e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007510:	f107 0208 	add.w	r2, r7, #8
 8007514:	f107 0120 	add.w	r1, r7, #32
 8007518:	f241 3388 	movw	r3, #5000	; 0x1388
 800751c:	4806      	ldr	r0, [pc, #24]	; (8007538 <QSPI_WriteEnable+0x94>)
 800751e:	f7fb f988 	bl	8002832 <HAL_QSPI_AutoPolling>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3758      	adds	r7, #88	; 0x58
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20010928 	.word	0x20010928

0800753c <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b096      	sub	sp, #88	; 0x58
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800754a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800754c:	2305      	movs	r3, #5
 800754e:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8007550:	2300      	movs	r3, #0
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007554:	2300      	movs	r3, #0
 8007556:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8007558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800755c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007562:	2300      	movs	r3, #0
 8007564:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007566:	2300      	movs	r3, #0
 8007568:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800756a:	2300      	movs	r3, #0
 800756c:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8007572:	2301      	movs	r3, #1
 8007574:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8007576:	2300      	movs	r3, #0
 8007578:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 800757a:	2301      	movs	r3, #1
 800757c:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800757e:	2310      	movs	r3, #16
 8007580:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8007582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007586:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8007588:	f107 0208 	add.w	r2, r7, #8
 800758c:	f107 0120 	add.w	r1, r7, #32
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	4806      	ldr	r0, [pc, #24]	; (80075ac <QSPI_AutoPollingMemReady+0x70>)
 8007594:	f7fb f94d 	bl	8002832 <HAL_QSPI_AutoPolling>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3758      	adds	r7, #88	; 0x58
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20010928 	.word	0x20010928

080075b0 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b092      	sub	sp, #72	; 0x48
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80075bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80075c2:	2305      	movs	r3, #5
 80075c4:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80075ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 80075d8:	2301      	movs	r3, #1
 80075da:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80075dc:	2300      	movs	r3, #0
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80075e0:	2300      	movs	r3, #0
 80075e2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80075e4:	2300      	movs	r3, #0
 80075e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80075e8:	f107 0310 	add.w	r3, r7, #16
 80075ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f0:	4619      	mov	r1, r3
 80075f2:	4842      	ldr	r0, [pc, #264]	; (80076fc <QSPI_QuadMode+0x14c>)
 80075f4:	f7fa ff86 	bl	8002504 <HAL_QSPI_Command>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e077      	b.n	80076f2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007602:	f107 030f 	add.w	r3, r7, #15
 8007606:	f241 3288 	movw	r2, #5000	; 0x1388
 800760a:	4619      	mov	r1, r3
 800760c:	483b      	ldr	r0, [pc, #236]	; (80076fc <QSPI_QuadMode+0x14c>)
 800760e:	f7fb f86e 	bl	80026ee <HAL_QSPI_Receive>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e06a      	b.n	80076f2 <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800761c:	4837      	ldr	r0, [pc, #220]	; (80076fc <QSPI_QuadMode+0x14c>)
 800761e:	f7ff ff41 	bl	80074a4 <QSPI_WriteEnable>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e062      	b.n	80076f2 <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d105      	bne.n	800763e <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007638:	b2db      	uxtb	r3, r3
 800763a:	73fb      	strb	r3, [r7, #15]
 800763c:	e004      	b.n	8007648 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007644:	b2db      	uxtb	r3, r3
 8007646:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8007648:	2301      	movs	r3, #1
 800764a:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800764c:	f107 0310 	add.w	r3, r7, #16
 8007650:	f241 3288 	movw	r2, #5000	; 0x1388
 8007654:	4619      	mov	r1, r3
 8007656:	4829      	ldr	r0, [pc, #164]	; (80076fc <QSPI_QuadMode+0x14c>)
 8007658:	f7fa ff54 	bl	8002504 <HAL_QSPI_Command>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e045      	b.n	80076f2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007666:	f107 030f 	add.w	r3, r7, #15
 800766a:	f241 3288 	movw	r2, #5000	; 0x1388
 800766e:	4619      	mov	r1, r3
 8007670:	4822      	ldr	r0, [pc, #136]	; (80076fc <QSPI_QuadMode+0x14c>)
 8007672:	f7fa ffa5 	bl	80025c0 <HAL_QSPI_Transmit>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e038      	b.n	80076f2 <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007680:	f241 3188 	movw	r1, #5000	; 0x1388
 8007684:	481d      	ldr	r0, [pc, #116]	; (80076fc <QSPI_QuadMode+0x14c>)
 8007686:	f7ff ff59 	bl	800753c <QSPI_AutoPollingMemReady>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e02e      	b.n	80076f2 <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8007694:	2305      	movs	r3, #5
 8007696:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007698:	f107 0310 	add.w	r3, r7, #16
 800769c:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a0:	4619      	mov	r1, r3
 80076a2:	4816      	ldr	r0, [pc, #88]	; (80076fc <QSPI_QuadMode+0x14c>)
 80076a4:	f7fa ff2e 	bl	8002504 <HAL_QSPI_Command>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e01f      	b.n	80076f2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076b2:	f107 030f 	add.w	r3, r7, #15
 80076b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ba:	4619      	mov	r1, r3
 80076bc:	480f      	ldr	r0, [pc, #60]	; (80076fc <QSPI_QuadMode+0x14c>)
 80076be:	f7fb f816 	bl	80026ee <HAL_QSPI_Receive>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e012      	b.n	80076f2 <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d102      	bne.n	80076dc <QSPI_QuadMode+0x12c>
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d007      	beq.n	80076ec <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3748      	adds	r7, #72	; 0x48
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20010928 	.word	0x20010928

08007700 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b092      	sub	sp, #72	; 0x48
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800770c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007710:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8007712:	2305      	movs	r3, #5
 8007714:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8007716:	2300      	movs	r3, #0
 8007718:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800771a:	2300      	movs	r3, #0
 800771c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800771e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007722:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8007728:	2301      	movs	r3, #1
 800772a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800772c:	2300      	movs	r3, #0
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007730:	2300      	movs	r3, #0
 8007732:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007734:	2300      	movs	r3, #0
 8007736:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007738:	f107 0310 	add.w	r3, r7, #16
 800773c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007740:	4619      	mov	r1, r3
 8007742:	4853      	ldr	r0, [pc, #332]	; (8007890 <QSPI_HighPerfMode+0x190>)
 8007744:	f7fa fede 	bl	8002504 <HAL_QSPI_Command>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e09a      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007752:	f107 030c 	add.w	r3, r7, #12
 8007756:	f241 3288 	movw	r2, #5000	; 0x1388
 800775a:	4619      	mov	r1, r3
 800775c:	484c      	ldr	r0, [pc, #304]	; (8007890 <QSPI_HighPerfMode+0x190>)
 800775e:	f7fa ffc6 	bl	80026ee <HAL_QSPI_Receive>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e08d      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800776c:	2315      	movs	r3, #21
 800776e:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8007770:	2302      	movs	r3, #2
 8007772:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007774:	f107 0310 	add.w	r3, r7, #16
 8007778:	f241 3288 	movw	r2, #5000	; 0x1388
 800777c:	4619      	mov	r1, r3
 800777e:	4844      	ldr	r0, [pc, #272]	; (8007890 <QSPI_HighPerfMode+0x190>)
 8007780:	f7fa fec0 	bl	8002504 <HAL_QSPI_Command>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e07c      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800778e:	f107 030c 	add.w	r3, r7, #12
 8007792:	3301      	adds	r3, #1
 8007794:	f241 3288 	movw	r2, #5000	; 0x1388
 8007798:	4619      	mov	r1, r3
 800779a:	483d      	ldr	r0, [pc, #244]	; (8007890 <QSPI_HighPerfMode+0x190>)
 800779c:	f7fa ffa7 	bl	80026ee <HAL_QSPI_Receive>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e06e      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80077aa:	4839      	ldr	r0, [pc, #228]	; (8007890 <QSPI_HighPerfMode+0x190>)
 80077ac:	f7ff fe7a 	bl	80074a4 <QSPI_WriteEnable>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e066      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d105      	bne.n	80077cc <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	f043 0302 	orr.w	r3, r3, #2
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	73bb      	strb	r3, [r7, #14]
 80077ca:	e004      	b.n	80077d6 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	f023 0302 	bic.w	r3, r3, #2
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80077d6:	2301      	movs	r3, #1
 80077d8:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 80077da:	2303      	movs	r3, #3
 80077dc:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80077de:	f107 0310 	add.w	r3, r7, #16
 80077e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e6:	4619      	mov	r1, r3
 80077e8:	4829      	ldr	r0, [pc, #164]	; (8007890 <QSPI_HighPerfMode+0x190>)
 80077ea:	f7fa fe8b 	bl	8002504 <HAL_QSPI_Command>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e047      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80077f8:	f107 030c 	add.w	r3, r7, #12
 80077fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007800:	4619      	mov	r1, r3
 8007802:	4823      	ldr	r0, [pc, #140]	; (8007890 <QSPI_HighPerfMode+0x190>)
 8007804:	f7fa fedc 	bl	80025c0 <HAL_QSPI_Transmit>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e03a      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007812:	f241 3188 	movw	r1, #5000	; 0x1388
 8007816:	481e      	ldr	r0, [pc, #120]	; (8007890 <QSPI_HighPerfMode+0x190>)
 8007818:	f7ff fe90 	bl	800753c <QSPI_AutoPollingMemReady>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e030      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8007826:	2315      	movs	r3, #21
 8007828:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 800782a:	2302      	movs	r3, #2
 800782c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800782e:	f107 0310 	add.w	r3, r7, #16
 8007832:	f241 3288 	movw	r2, #5000	; 0x1388
 8007836:	4619      	mov	r1, r3
 8007838:	4815      	ldr	r0, [pc, #84]	; (8007890 <QSPI_HighPerfMode+0x190>)
 800783a:	f7fa fe63 	bl	8002504 <HAL_QSPI_Command>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e01f      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007848:	f107 030c 	add.w	r3, r7, #12
 800784c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007850:	4619      	mov	r1, r3
 8007852:	480f      	ldr	r0, [pc, #60]	; (8007890 <QSPI_HighPerfMode+0x190>)
 8007854:	f7fa ff4b 	bl	80026ee <HAL_QSPI_Receive>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e012      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8007862:	7b7b      	ldrb	r3, [r7, #13]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d102      	bne.n	8007872 <QSPI_HighPerfMode+0x172>
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d007      	beq.n	8007882 <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8007872:	7b7b      	ldrb	r3, [r7, #13]
 8007874:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8007878:	2b00      	cmp	r3, #0
 800787a:	d004      	beq.n	8007886 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3748      	adds	r7, #72	; 0x48
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20010928 	.word	0x20010928

08007894 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800789e:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <BSP_TSENSOR_Init+0x30>)
 80078a0:	4a09      	ldr	r2, [pc, #36]	; (80078c8 <BSP_TSENSOR_Init+0x34>)
 80078a2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80078a4:	f7ff faee 	bl	8006e84 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80078a8:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <BSP_TSENSOR_Init+0x30>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2100      	movs	r1, #0
 80078b0:	20be      	movs	r0, #190	; 0xbe
 80078b2:	4798      	blx	r3

  ret = TSENSOR_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80078b8:	79fb      	ldrb	r3, [r7, #7]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	200002dc 	.word	0x200002dc
 80078c8:	20000014 	.word	0x20000014

080078cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078d2:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <HAL_MspInit+0x44>)
 80078d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d6:	4a0e      	ldr	r2, [pc, #56]	; (8007910 <HAL_MspInit+0x44>)
 80078d8:	f043 0301 	orr.w	r3, r3, #1
 80078dc:	6613      	str	r3, [r2, #96]	; 0x60
 80078de:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <HAL_MspInit+0x44>)
 80078e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	607b      	str	r3, [r7, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <HAL_MspInit+0x44>)
 80078ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ee:	4a08      	ldr	r2, [pc, #32]	; (8007910 <HAL_MspInit+0x44>)
 80078f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f4:	6593      	str	r3, [r2, #88]	; 0x58
 80078f6:	4b06      	ldr	r3, [pc, #24]	; (8007910 <HAL_MspInit+0x44>)
 80078f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40021000 	.word	0x40021000

08007914 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08a      	sub	sp, #40	; 0x28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800791c:	f107 0314 	add.w	r3, r7, #20
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	605a      	str	r2, [r3, #4]
 8007926:	609a      	str	r2, [r3, #8]
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a2b      	ldr	r2, [pc, #172]	; (80079e0 <HAL_DAC_MspInit+0xcc>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d14f      	bne.n	80079d6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007936:	4b2b      	ldr	r3, [pc, #172]	; (80079e4 <HAL_DAC_MspInit+0xd0>)
 8007938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793a:	4a2a      	ldr	r2, [pc, #168]	; (80079e4 <HAL_DAC_MspInit+0xd0>)
 800793c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007940:	6593      	str	r3, [r2, #88]	; 0x58
 8007942:	4b28      	ldr	r3, [pc, #160]	; (80079e4 <HAL_DAC_MspInit+0xd0>)
 8007944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800794a:	613b      	str	r3, [r7, #16]
 800794c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800794e:	4b25      	ldr	r3, [pc, #148]	; (80079e4 <HAL_DAC_MspInit+0xd0>)
 8007950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007952:	4a24      	ldr	r2, [pc, #144]	; (80079e4 <HAL_DAC_MspInit+0xd0>)
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800795a:	4b22      	ldr	r3, [pc, #136]	; (80079e4 <HAL_DAC_MspInit+0xd0>)
 800795c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007966:	2310      	movs	r3, #16
 8007968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800796a:	2303      	movs	r3, #3
 800796c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800796e:	2300      	movs	r3, #0
 8007970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007972:	f107 0314 	add.w	r3, r7, #20
 8007976:	4619      	mov	r1, r3
 8007978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800797c:	f7f9 fc6e 	bl	800125c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8007980:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 8007982:	4a1a      	ldr	r2, [pc, #104]	; (80079ec <HAL_DAC_MspInit+0xd8>)
 8007984:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8007986:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 8007988:	2206      	movs	r2, #6
 800798a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800798c:	4b16      	ldr	r3, [pc, #88]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 800798e:	2210      	movs	r2, #16
 8007990:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 8007994:	2200      	movs	r2, #0
 8007996:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007998:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 800799a:	2280      	movs	r2, #128	; 0x80
 800799c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800799e:	4b12      	ldr	r3, [pc, #72]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 80079a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079a4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80079a6:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 80079a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079ac:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 80079ae:	4b0e      	ldr	r3, [pc, #56]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80079b4:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80079ba:	480b      	ldr	r0, [pc, #44]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 80079bc:	f7f9 fa18 	bl	8000df0 <HAL_DMA_Init>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80079c6:	f7ff f965 	bl	8006c94 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a06      	ldr	r2, [pc, #24]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 80079ce:	609a      	str	r2, [r3, #8]
 80079d0:	4a05      	ldr	r2, [pc, #20]	; (80079e8 <HAL_DAC_MspInit+0xd4>)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80079d6:	bf00      	nop
 80079d8:	3728      	adds	r7, #40	; 0x28
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	40007400 	.word	0x40007400
 80079e4:	40021000 	.word	0x40021000
 80079e8:	20005a14 	.word	0x20005a14
 80079ec:	40020030 	.word	0x40020030

080079f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08a      	sub	sp, #40	; 0x28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079f8:	f107 0314 	add.w	r3, r7, #20
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	605a      	str	r2, [r3, #4]
 8007a02:	609a      	str	r2, [r3, #8]
 8007a04:	60da      	str	r2, [r3, #12]
 8007a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a17      	ldr	r2, [pc, #92]	; (8007a6c <HAL_I2C_MspInit+0x7c>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d128      	bne.n	8007a64 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a12:	4b17      	ldr	r3, [pc, #92]	; (8007a70 <HAL_I2C_MspInit+0x80>)
 8007a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a16:	4a16      	ldr	r2, [pc, #88]	; (8007a70 <HAL_I2C_MspInit+0x80>)
 8007a18:	f043 0302 	orr.w	r3, r3, #2
 8007a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a1e:	4b14      	ldr	r3, [pc, #80]	; (8007a70 <HAL_I2C_MspInit+0x80>)
 8007a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	613b      	str	r3, [r7, #16]
 8007a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a30:	2312      	movs	r3, #18
 8007a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a34:	2301      	movs	r3, #1
 8007a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a40:	f107 0314 	add.w	r3, r7, #20
 8007a44:	4619      	mov	r1, r3
 8007a46:	480b      	ldr	r0, [pc, #44]	; (8007a74 <HAL_I2C_MspInit+0x84>)
 8007a48:	f7f9 fc08 	bl	800125c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007a4c:	4b08      	ldr	r3, [pc, #32]	; (8007a70 <HAL_I2C_MspInit+0x80>)
 8007a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a50:	4a07      	ldr	r2, [pc, #28]	; (8007a70 <HAL_I2C_MspInit+0x80>)
 8007a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a56:	6593      	str	r3, [r2, #88]	; 0x58
 8007a58:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <HAL_I2C_MspInit+0x80>)
 8007a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007a64:	bf00      	nop
 8007a66:	3728      	adds	r7, #40	; 0x28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40005400 	.word	0x40005400
 8007a70:	40021000 	.word	0x40021000
 8007a74:	48000400 	.word	0x48000400

08007a78 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a0b      	ldr	r2, [pc, #44]	; (8007ab4 <HAL_I2C_MspDeInit+0x3c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d10f      	bne.n	8007aaa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <HAL_I2C_MspDeInit+0x40>)
 8007a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8e:	4a0a      	ldr	r2, [pc, #40]	; (8007ab8 <HAL_I2C_MspDeInit+0x40>)
 8007a90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a94:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8007a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a9a:	4808      	ldr	r0, [pc, #32]	; (8007abc <HAL_I2C_MspDeInit+0x44>)
 8007a9c:	f7f9 fd86 	bl	80015ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8007aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007aa4:	4805      	ldr	r0, [pc, #20]	; (8007abc <HAL_I2C_MspDeInit+0x44>)
 8007aa6:	f7f9 fd81 	bl	80015ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40005400 	.word	0x40005400
 8007ab8:	40021000 	.word	0x40021000
 8007abc:	48000400 	.word	0x48000400

08007ac0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08a      	sub	sp, #40	; 0x28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac8:	f107 0314 	add.w	r3, r7, #20
 8007acc:	2200      	movs	r2, #0
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	609a      	str	r2, [r3, #8]
 8007ad4:	60da      	str	r2, [r3, #12]
 8007ad6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a17      	ldr	r2, [pc, #92]	; (8007b3c <HAL_QSPI_MspInit+0x7c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d128      	bne.n	8007b34 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8007ae2:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <HAL_QSPI_MspInit+0x80>)
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae6:	4a16      	ldr	r2, [pc, #88]	; (8007b40 <HAL_QSPI_MspInit+0x80>)
 8007ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aec:	6513      	str	r3, [r2, #80]	; 0x50
 8007aee:	4b14      	ldr	r3, [pc, #80]	; (8007b40 <HAL_QSPI_MspInit+0x80>)
 8007af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007afa:	4b11      	ldr	r3, [pc, #68]	; (8007b40 <HAL_QSPI_MspInit+0x80>)
 8007afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afe:	4a10      	ldr	r2, [pc, #64]	; (8007b40 <HAL_QSPI_MspInit+0x80>)
 8007b00:	f043 0310 	orr.w	r3, r3, #16
 8007b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b06:	4b0e      	ldr	r3, [pc, #56]	; (8007b40 <HAL_QSPI_MspInit+0x80>)
 8007b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b0a:	f003 0310 	and.w	r3, r3, #16
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8007b12:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8007b16:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b18:	2302      	movs	r3, #2
 8007b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b20:	2303      	movs	r3, #3
 8007b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007b24:	230a      	movs	r3, #10
 8007b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b28:	f107 0314 	add.w	r3, r7, #20
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4805      	ldr	r0, [pc, #20]	; (8007b44 <HAL_QSPI_MspInit+0x84>)
 8007b30:	f7f9 fb94 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8007b34:	bf00      	nop
 8007b36:	3728      	adds	r7, #40	; 0x28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	a0001000 	.word	0xa0001000
 8007b40:	40021000 	.word	0x40021000
 8007b44:	48001000 	.word	0x48001000

08007b48 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a08      	ldr	r2, [pc, #32]	; (8007b78 <HAL_QSPI_MspDeInit+0x30>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d10a      	bne.n	8007b70 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8007b5a:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <HAL_QSPI_MspDeInit+0x34>)
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5e:	4a07      	ldr	r2, [pc, #28]	; (8007b7c <HAL_QSPI_MspDeInit+0x34>)
 8007b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b64:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8007b66:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8007b6a:	4805      	ldr	r0, [pc, #20]	; (8007b80 <HAL_QSPI_MspDeInit+0x38>)
 8007b6c:	f7f9 fd1e 	bl	80015ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	a0001000 	.word	0xa0001000
 8007b7c:	40021000 	.word	0x40021000
 8007b80:	48001000 	.word	0x48001000

08007b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b94:	d114      	bne.n	8007bc0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007b96:	4b15      	ldr	r3, [pc, #84]	; (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9a:	4a14      	ldr	r2, [pc, #80]	; (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007b9c:	f043 0301 	orr.w	r3, r3, #1
 8007ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	201c      	movs	r0, #28
 8007bb4:	f7f8 fe4d 	bl	8000852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007bb8:	201c      	movs	r0, #28
 8007bba:	f7f8 fe66 	bl	800088a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007bbe:	e010      	b.n	8007be2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <HAL_TIM_Base_MspInit+0x6c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d10b      	bne.n	8007be2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bca:	4b08      	ldr	r3, [pc, #32]	; (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bce:	4a07      	ldr	r2, [pc, #28]	; (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007bd0:	f043 0302 	orr.w	r3, r3, #2
 8007bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	60bb      	str	r3, [r7, #8]
 8007be0:	68bb      	ldr	r3, [r7, #8]
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	40021000 	.word	0x40021000
 8007bf0:	40000400 	.word	0x40000400

08007bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08a      	sub	sp, #40	; 0x28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bfc:	f107 0314 	add.w	r3, r7, #20
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	605a      	str	r2, [r3, #4]
 8007c06:	609a      	str	r2, [r3, #8]
 8007c08:	60da      	str	r2, [r3, #12]
 8007c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a17      	ldr	r2, [pc, #92]	; (8007c70 <HAL_UART_MspInit+0x7c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d127      	bne.n	8007c66 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c16:	4b17      	ldr	r3, [pc, #92]	; (8007c74 <HAL_UART_MspInit+0x80>)
 8007c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1a:	4a16      	ldr	r2, [pc, #88]	; (8007c74 <HAL_UART_MspInit+0x80>)
 8007c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c20:	6613      	str	r3, [r2, #96]	; 0x60
 8007c22:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <HAL_UART_MspInit+0x80>)
 8007c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c2a:	613b      	str	r3, [r7, #16]
 8007c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c2e:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <HAL_UART_MspInit+0x80>)
 8007c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c32:	4a10      	ldr	r2, [pc, #64]	; (8007c74 <HAL_UART_MspInit+0x80>)
 8007c34:	f043 0302 	orr.w	r3, r3, #2
 8007c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c3a:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <HAL_UART_MspInit+0x80>)
 8007c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c46:	23c0      	movs	r3, #192	; 0xc0
 8007c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c52:	2303      	movs	r3, #3
 8007c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007c56:	2307      	movs	r3, #7
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c5a:	f107 0314 	add.w	r3, r7, #20
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4805      	ldr	r0, [pc, #20]	; (8007c78 <HAL_UART_MspInit+0x84>)
 8007c62:	f7f9 fafb 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007c66:	bf00      	nop
 8007c68:	3728      	adds	r7, #40	; 0x28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	40013800 	.word	0x40013800
 8007c74:	40021000 	.word	0x40021000
 8007c78:	48000400 	.word	0x48000400

08007c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c80:	bf00      	nop
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c8e:	e7fe      	b.n	8007c8e <HardFault_Handler+0x4>

08007c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c94:	e7fe      	b.n	8007c94 <MemManage_Handler+0x4>

08007c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c96:	b480      	push	{r7}
 8007c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c9a:	e7fe      	b.n	8007c9a <BusFault_Handler+0x4>

08007c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ca0:	e7fe      	b.n	8007ca0 <UsageFault_Handler+0x4>

08007ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ca6:	bf00      	nop
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007cc2:	bf00      	nop
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007cd0:	f7f8 fca2 	bl	8000618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007cd4:	bf00      	nop
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8007cdc:	4802      	ldr	r0, [pc, #8]	; (8007ce8 <DMA1_Channel3_IRQHandler+0x10>)
 8007cde:	f7f9 f9dd 	bl	800109c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007ce2:	bf00      	nop
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20005a14 	.word	0x20005a14

08007cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007cf0:	4802      	ldr	r0, [pc, #8]	; (8007cfc <TIM2_IRQHandler+0x10>)
 8007cf2:	f7fc fbaf 	bl	8004454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007cf6:	bf00      	nop
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20005b48 	.word	0x20005b48

08007d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007d08:	4a14      	ldr	r2, [pc, #80]	; (8007d5c <_sbrk+0x5c>)
 8007d0a:	4b15      	ldr	r3, [pc, #84]	; (8007d60 <_sbrk+0x60>)
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007d14:	4b13      	ldr	r3, [pc, #76]	; (8007d64 <_sbrk+0x64>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d102      	bne.n	8007d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007d1c:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <_sbrk+0x64>)
 8007d1e:	4a12      	ldr	r2, [pc, #72]	; (8007d68 <_sbrk+0x68>)
 8007d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007d22:	4b10      	ldr	r3, [pc, #64]	; (8007d64 <_sbrk+0x64>)
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4413      	add	r3, r2
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d207      	bcs.n	8007d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007d30:	f000 f8c2 	bl	8007eb8 <__errno>
 8007d34:	4602      	mov	r2, r0
 8007d36:	230c      	movs	r3, #12
 8007d38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d3e:	e009      	b.n	8007d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007d40:	4b08      	ldr	r3, [pc, #32]	; (8007d64 <_sbrk+0x64>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007d46:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <_sbrk+0x64>)
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	4a05      	ldr	r2, [pc, #20]	; (8007d64 <_sbrk+0x64>)
 8007d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007d52:	68fb      	ldr	r3, [r7, #12]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20018000 	.word	0x20018000
 8007d60:	00000400 	.word	0x00000400
 8007d64:	200002e0 	.word	0x200002e0
 8007d68:	20010970 	.word	0x20010970

08007d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d70:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <SystemInit+0x64>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d76:	4a16      	ldr	r2, [pc, #88]	; (8007dd0 <SystemInit+0x64>)
 8007d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007d80:	4b14      	ldr	r3, [pc, #80]	; (8007dd4 <SystemInit+0x68>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a13      	ldr	r2, [pc, #76]	; (8007dd4 <SystemInit+0x68>)
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007d8c:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <SystemInit+0x68>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007d92:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <SystemInit+0x68>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a0f      	ldr	r2, [pc, #60]	; (8007dd4 <SystemInit+0x68>)
 8007d98:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007d9c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007da0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007da2:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <SystemInit+0x68>)
 8007da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007da8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007daa:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <SystemInit+0x68>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a09      	ldr	r2, [pc, #36]	; (8007dd4 <SystemInit+0x68>)
 8007db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007db4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007db6:	4b07      	ldr	r3, [pc, #28]	; (8007dd4 <SystemInit+0x68>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007dbc:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <SystemInit+0x64>)
 8007dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8007dc4:	bf00      	nop
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	e000ed00 	.word	0xe000ed00
 8007dd4:	40021000 	.word	0x40021000

08007dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007e10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007ddc:	f7ff ffc6 	bl	8007d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007de0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007de2:	e003      	b.n	8007dec <LoopCopyDataInit>

08007de4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007de4:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007de6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007de8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007dea:	3104      	adds	r1, #4

08007dec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007dec:	480a      	ldr	r0, [pc, #40]	; (8007e18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007dee:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8007df0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007df2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007df4:	d3f6      	bcc.n	8007de4 <CopyDataInit>
	ldr	r2, =_sbss
 8007df6:	4a0a      	ldr	r2, [pc, #40]	; (8007e20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007df8:	e002      	b.n	8007e00 <LoopFillZerobss>

08007dfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007dfa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007dfc:	f842 3b04 	str.w	r3, [r2], #4

08007e00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007e00:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <LoopForever+0x16>)
	cmp	r2, r3
 8007e02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007e04:	d3f9      	bcc.n	8007dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007e06:	f000 f85d 	bl	8007ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007e0a:	f7fd ff8d 	bl	8005d28 <main>

08007e0e <LoopForever>:

LoopForever:
    b LoopForever
 8007e0e:	e7fe      	b.n	8007e0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007e10:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007e14:	08009028 	.word	0x08009028
	ldr	r0, =_sdata
 8007e18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007e1c:	200000fc 	.word	0x200000fc
	ldr	r2, =_sbss
 8007e20:	200000fc 	.word	0x200000fc
	ldr	r3, = _ebss
 8007e24:	20010970 	.word	0x20010970

08007e28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007e28:	e7fe      	b.n	8007e28 <ADC1_2_IRQHandler>
	...

08007e2c <arm_sin_f32>:
 8007e2c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007eac <arm_sin_f32+0x80>
 8007e30:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007e34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007e40:	d504      	bpl.n	8007e4c <arm_sin_f32+0x20>
 8007e42:	ee17 3a90 	vmov	r3, s15
 8007e46:	3b01      	subs	r3, #1
 8007e48:	ee07 3a90 	vmov	s15, r3
 8007e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e50:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007eb0 <arm_sin_f32+0x84>
 8007e54:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007e58:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007e5c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007e60:	ee17 3a90 	vmov	r3, s15
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6a:	d21a      	bcs.n	8007ea2 <arm_sin_f32+0x76>
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e74:	1c59      	adds	r1, r3, #1
 8007e76:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007e7a:	4a0e      	ldr	r2, [pc, #56]	; (8007eb4 <arm_sin_f32+0x88>)
 8007e7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007e80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e84:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007e88:	ed93 7a00 	vldr	s14, [r3]
 8007e8c:	edd2 6a00 	vldr	s13, [r2]
 8007e90:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007e94:	ee20 0a26 	vmul.f32	s0, s0, s13
 8007e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e9c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007ea0:	4770      	bx	lr
 8007ea2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	e7e6      	b.n	8007e7a <arm_sin_f32+0x4e>
 8007eac:	3e22f983 	.word	0x3e22f983
 8007eb0:	44000000 	.word	0x44000000
 8007eb4:	080087e0 	.word	0x080087e0

08007eb8 <__errno>:
 8007eb8:	4b01      	ldr	r3, [pc, #4]	; (8007ec0 <__errno+0x8>)
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20000098 	.word	0x20000098

08007ec4 <__libc_init_array>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	4e0d      	ldr	r6, [pc, #52]	; (8007efc <__libc_init_array+0x38>)
 8007ec8:	4c0d      	ldr	r4, [pc, #52]	; (8007f00 <__libc_init_array+0x3c>)
 8007eca:	1ba4      	subs	r4, r4, r6
 8007ecc:	10a4      	asrs	r4, r4, #2
 8007ece:	2500      	movs	r5, #0
 8007ed0:	42a5      	cmp	r5, r4
 8007ed2:	d109      	bne.n	8007ee8 <__libc_init_array+0x24>
 8007ed4:	4e0b      	ldr	r6, [pc, #44]	; (8007f04 <__libc_init_array+0x40>)
 8007ed6:	4c0c      	ldr	r4, [pc, #48]	; (8007f08 <__libc_init_array+0x44>)
 8007ed8:	f000 fc26 	bl	8008728 <_init>
 8007edc:	1ba4      	subs	r4, r4, r6
 8007ede:	10a4      	asrs	r4, r4, #2
 8007ee0:	2500      	movs	r5, #0
 8007ee2:	42a5      	cmp	r5, r4
 8007ee4:	d105      	bne.n	8007ef2 <__libc_init_array+0x2e>
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}
 8007ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007eec:	4798      	blx	r3
 8007eee:	3501      	adds	r5, #1
 8007ef0:	e7ee      	b.n	8007ed0 <__libc_init_array+0xc>
 8007ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ef6:	4798      	blx	r3
 8007ef8:	3501      	adds	r5, #1
 8007efa:	e7f2      	b.n	8007ee2 <__libc_init_array+0x1e>
 8007efc:	08009020 	.word	0x08009020
 8007f00:	08009020 	.word	0x08009020
 8007f04:	08009020 	.word	0x08009020
 8007f08:	08009024 	.word	0x08009024

08007f0c <memset>:
 8007f0c:	4402      	add	r2, r0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d100      	bne.n	8007f16 <memset+0xa>
 8007f14:	4770      	bx	lr
 8007f16:	f803 1b01 	strb.w	r1, [r3], #1
 8007f1a:	e7f9      	b.n	8007f10 <memset+0x4>

08007f1c <siprintf>:
 8007f1c:	b40e      	push	{r1, r2, r3}
 8007f1e:	b500      	push	{lr}
 8007f20:	b09c      	sub	sp, #112	; 0x70
 8007f22:	ab1d      	add	r3, sp, #116	; 0x74
 8007f24:	9002      	str	r0, [sp, #8]
 8007f26:	9006      	str	r0, [sp, #24]
 8007f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f2c:	4809      	ldr	r0, [pc, #36]	; (8007f54 <siprintf+0x38>)
 8007f2e:	9107      	str	r1, [sp, #28]
 8007f30:	9104      	str	r1, [sp, #16]
 8007f32:	4909      	ldr	r1, [pc, #36]	; (8007f58 <siprintf+0x3c>)
 8007f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f38:	9105      	str	r1, [sp, #20]
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	a902      	add	r1, sp, #8
 8007f40:	f000 f866 	bl	8008010 <_svfiprintf_r>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	b01c      	add	sp, #112	; 0x70
 8007f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f50:	b003      	add	sp, #12
 8007f52:	4770      	bx	lr
 8007f54:	20000098 	.word	0x20000098
 8007f58:	ffff0208 	.word	0xffff0208

08007f5c <__ssputs_r>:
 8007f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f60:	688e      	ldr	r6, [r1, #8]
 8007f62:	429e      	cmp	r6, r3
 8007f64:	4682      	mov	sl, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	4690      	mov	r8, r2
 8007f6a:	4699      	mov	r9, r3
 8007f6c:	d837      	bhi.n	8007fde <__ssputs_r+0x82>
 8007f6e:	898a      	ldrh	r2, [r1, #12]
 8007f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f74:	d031      	beq.n	8007fda <__ssputs_r+0x7e>
 8007f76:	6825      	ldr	r5, [r4, #0]
 8007f78:	6909      	ldr	r1, [r1, #16]
 8007f7a:	1a6f      	subs	r7, r5, r1
 8007f7c:	6965      	ldr	r5, [r4, #20]
 8007f7e:	2302      	movs	r3, #2
 8007f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f84:	fb95 f5f3 	sdiv	r5, r5, r3
 8007f88:	f109 0301 	add.w	r3, r9, #1
 8007f8c:	443b      	add	r3, r7
 8007f8e:	429d      	cmp	r5, r3
 8007f90:	bf38      	it	cc
 8007f92:	461d      	movcc	r5, r3
 8007f94:	0553      	lsls	r3, r2, #21
 8007f96:	d530      	bpl.n	8007ffa <__ssputs_r+0x9e>
 8007f98:	4629      	mov	r1, r5
 8007f9a:	f000 fb2b 	bl	80085f4 <_malloc_r>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	b950      	cbnz	r0, 8007fb8 <__ssputs_r+0x5c>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	f8ca 3000 	str.w	r3, [sl]
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fae:	81a3      	strh	r3, [r4, #12]
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb8:	463a      	mov	r2, r7
 8007fba:	6921      	ldr	r1, [r4, #16]
 8007fbc:	f000 faa8 	bl	8008510 <memcpy>
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	6126      	str	r6, [r4, #16]
 8007fce:	6165      	str	r5, [r4, #20]
 8007fd0:	443e      	add	r6, r7
 8007fd2:	1bed      	subs	r5, r5, r7
 8007fd4:	6026      	str	r6, [r4, #0]
 8007fd6:	60a5      	str	r5, [r4, #8]
 8007fd8:	464e      	mov	r6, r9
 8007fda:	454e      	cmp	r6, r9
 8007fdc:	d900      	bls.n	8007fe0 <__ssputs_r+0x84>
 8007fde:	464e      	mov	r6, r9
 8007fe0:	4632      	mov	r2, r6
 8007fe2:	4641      	mov	r1, r8
 8007fe4:	6820      	ldr	r0, [r4, #0]
 8007fe6:	f000 fa9e 	bl	8008526 <memmove>
 8007fea:	68a3      	ldr	r3, [r4, #8]
 8007fec:	1b9b      	subs	r3, r3, r6
 8007fee:	60a3      	str	r3, [r4, #8]
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	441e      	add	r6, r3
 8007ff4:	6026      	str	r6, [r4, #0]
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	e7dc      	b.n	8007fb4 <__ssputs_r+0x58>
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	f000 fb54 	bl	80086a8 <_realloc_r>
 8008000:	4606      	mov	r6, r0
 8008002:	2800      	cmp	r0, #0
 8008004:	d1e2      	bne.n	8007fcc <__ssputs_r+0x70>
 8008006:	6921      	ldr	r1, [r4, #16]
 8008008:	4650      	mov	r0, sl
 800800a:	f000 faa5 	bl	8008558 <_free_r>
 800800e:	e7c8      	b.n	8007fa2 <__ssputs_r+0x46>

08008010 <_svfiprintf_r>:
 8008010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	461d      	mov	r5, r3
 8008016:	898b      	ldrh	r3, [r1, #12]
 8008018:	061f      	lsls	r7, r3, #24
 800801a:	b09d      	sub	sp, #116	; 0x74
 800801c:	4680      	mov	r8, r0
 800801e:	460c      	mov	r4, r1
 8008020:	4616      	mov	r6, r2
 8008022:	d50f      	bpl.n	8008044 <_svfiprintf_r+0x34>
 8008024:	690b      	ldr	r3, [r1, #16]
 8008026:	b96b      	cbnz	r3, 8008044 <_svfiprintf_r+0x34>
 8008028:	2140      	movs	r1, #64	; 0x40
 800802a:	f000 fae3 	bl	80085f4 <_malloc_r>
 800802e:	6020      	str	r0, [r4, #0]
 8008030:	6120      	str	r0, [r4, #16]
 8008032:	b928      	cbnz	r0, 8008040 <_svfiprintf_r+0x30>
 8008034:	230c      	movs	r3, #12
 8008036:	f8c8 3000 	str.w	r3, [r8]
 800803a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800803e:	e0c8      	b.n	80081d2 <_svfiprintf_r+0x1c2>
 8008040:	2340      	movs	r3, #64	; 0x40
 8008042:	6163      	str	r3, [r4, #20]
 8008044:	2300      	movs	r3, #0
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	2320      	movs	r3, #32
 800804a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800804e:	2330      	movs	r3, #48	; 0x30
 8008050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008054:	9503      	str	r5, [sp, #12]
 8008056:	f04f 0b01 	mov.w	fp, #1
 800805a:	4637      	mov	r7, r6
 800805c:	463d      	mov	r5, r7
 800805e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008062:	b10b      	cbz	r3, 8008068 <_svfiprintf_r+0x58>
 8008064:	2b25      	cmp	r3, #37	; 0x25
 8008066:	d13e      	bne.n	80080e6 <_svfiprintf_r+0xd6>
 8008068:	ebb7 0a06 	subs.w	sl, r7, r6
 800806c:	d00b      	beq.n	8008086 <_svfiprintf_r+0x76>
 800806e:	4653      	mov	r3, sl
 8008070:	4632      	mov	r2, r6
 8008072:	4621      	mov	r1, r4
 8008074:	4640      	mov	r0, r8
 8008076:	f7ff ff71 	bl	8007f5c <__ssputs_r>
 800807a:	3001      	adds	r0, #1
 800807c:	f000 80a4 	beq.w	80081c8 <_svfiprintf_r+0x1b8>
 8008080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008082:	4453      	add	r3, sl
 8008084:	9309      	str	r3, [sp, #36]	; 0x24
 8008086:	783b      	ldrb	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 809d 	beq.w	80081c8 <_svfiprintf_r+0x1b8>
 800808e:	2300      	movs	r3, #0
 8008090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008098:	9304      	str	r3, [sp, #16]
 800809a:	9307      	str	r3, [sp, #28]
 800809c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080a0:	931a      	str	r3, [sp, #104]	; 0x68
 80080a2:	462f      	mov	r7, r5
 80080a4:	2205      	movs	r2, #5
 80080a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80080aa:	4850      	ldr	r0, [pc, #320]	; (80081ec <_svfiprintf_r+0x1dc>)
 80080ac:	f7f8 f890 	bl	80001d0 <memchr>
 80080b0:	9b04      	ldr	r3, [sp, #16]
 80080b2:	b9d0      	cbnz	r0, 80080ea <_svfiprintf_r+0xda>
 80080b4:	06d9      	lsls	r1, r3, #27
 80080b6:	bf44      	itt	mi
 80080b8:	2220      	movmi	r2, #32
 80080ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080be:	071a      	lsls	r2, r3, #28
 80080c0:	bf44      	itt	mi
 80080c2:	222b      	movmi	r2, #43	; 0x2b
 80080c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080c8:	782a      	ldrb	r2, [r5, #0]
 80080ca:	2a2a      	cmp	r2, #42	; 0x2a
 80080cc:	d015      	beq.n	80080fa <_svfiprintf_r+0xea>
 80080ce:	9a07      	ldr	r2, [sp, #28]
 80080d0:	462f      	mov	r7, r5
 80080d2:	2000      	movs	r0, #0
 80080d4:	250a      	movs	r5, #10
 80080d6:	4639      	mov	r1, r7
 80080d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080dc:	3b30      	subs	r3, #48	; 0x30
 80080de:	2b09      	cmp	r3, #9
 80080e0:	d94d      	bls.n	800817e <_svfiprintf_r+0x16e>
 80080e2:	b1b8      	cbz	r0, 8008114 <_svfiprintf_r+0x104>
 80080e4:	e00f      	b.n	8008106 <_svfiprintf_r+0xf6>
 80080e6:	462f      	mov	r7, r5
 80080e8:	e7b8      	b.n	800805c <_svfiprintf_r+0x4c>
 80080ea:	4a40      	ldr	r2, [pc, #256]	; (80081ec <_svfiprintf_r+0x1dc>)
 80080ec:	1a80      	subs	r0, r0, r2
 80080ee:	fa0b f000 	lsl.w	r0, fp, r0
 80080f2:	4318      	orrs	r0, r3
 80080f4:	9004      	str	r0, [sp, #16]
 80080f6:	463d      	mov	r5, r7
 80080f8:	e7d3      	b.n	80080a2 <_svfiprintf_r+0x92>
 80080fa:	9a03      	ldr	r2, [sp, #12]
 80080fc:	1d11      	adds	r1, r2, #4
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	9103      	str	r1, [sp, #12]
 8008102:	2a00      	cmp	r2, #0
 8008104:	db01      	blt.n	800810a <_svfiprintf_r+0xfa>
 8008106:	9207      	str	r2, [sp, #28]
 8008108:	e004      	b.n	8008114 <_svfiprintf_r+0x104>
 800810a:	4252      	negs	r2, r2
 800810c:	f043 0302 	orr.w	r3, r3, #2
 8008110:	9207      	str	r2, [sp, #28]
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	783b      	ldrb	r3, [r7, #0]
 8008116:	2b2e      	cmp	r3, #46	; 0x2e
 8008118:	d10c      	bne.n	8008134 <_svfiprintf_r+0x124>
 800811a:	787b      	ldrb	r3, [r7, #1]
 800811c:	2b2a      	cmp	r3, #42	; 0x2a
 800811e:	d133      	bne.n	8008188 <_svfiprintf_r+0x178>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	1d1a      	adds	r2, r3, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	9203      	str	r2, [sp, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	bfb8      	it	lt
 800812c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008130:	3702      	adds	r7, #2
 8008132:	9305      	str	r3, [sp, #20]
 8008134:	4d2e      	ldr	r5, [pc, #184]	; (80081f0 <_svfiprintf_r+0x1e0>)
 8008136:	7839      	ldrb	r1, [r7, #0]
 8008138:	2203      	movs	r2, #3
 800813a:	4628      	mov	r0, r5
 800813c:	f7f8 f848 	bl	80001d0 <memchr>
 8008140:	b138      	cbz	r0, 8008152 <_svfiprintf_r+0x142>
 8008142:	2340      	movs	r3, #64	; 0x40
 8008144:	1b40      	subs	r0, r0, r5
 8008146:	fa03 f000 	lsl.w	r0, r3, r0
 800814a:	9b04      	ldr	r3, [sp, #16]
 800814c:	4303      	orrs	r3, r0
 800814e:	3701      	adds	r7, #1
 8008150:	9304      	str	r3, [sp, #16]
 8008152:	7839      	ldrb	r1, [r7, #0]
 8008154:	4827      	ldr	r0, [pc, #156]	; (80081f4 <_svfiprintf_r+0x1e4>)
 8008156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800815a:	2206      	movs	r2, #6
 800815c:	1c7e      	adds	r6, r7, #1
 800815e:	f7f8 f837 	bl	80001d0 <memchr>
 8008162:	2800      	cmp	r0, #0
 8008164:	d038      	beq.n	80081d8 <_svfiprintf_r+0x1c8>
 8008166:	4b24      	ldr	r3, [pc, #144]	; (80081f8 <_svfiprintf_r+0x1e8>)
 8008168:	bb13      	cbnz	r3, 80081b0 <_svfiprintf_r+0x1a0>
 800816a:	9b03      	ldr	r3, [sp, #12]
 800816c:	3307      	adds	r3, #7
 800816e:	f023 0307 	bic.w	r3, r3, #7
 8008172:	3308      	adds	r3, #8
 8008174:	9303      	str	r3, [sp, #12]
 8008176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008178:	444b      	add	r3, r9
 800817a:	9309      	str	r3, [sp, #36]	; 0x24
 800817c:	e76d      	b.n	800805a <_svfiprintf_r+0x4a>
 800817e:	fb05 3202 	mla	r2, r5, r2, r3
 8008182:	2001      	movs	r0, #1
 8008184:	460f      	mov	r7, r1
 8008186:	e7a6      	b.n	80080d6 <_svfiprintf_r+0xc6>
 8008188:	2300      	movs	r3, #0
 800818a:	3701      	adds	r7, #1
 800818c:	9305      	str	r3, [sp, #20]
 800818e:	4619      	mov	r1, r3
 8008190:	250a      	movs	r5, #10
 8008192:	4638      	mov	r0, r7
 8008194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008198:	3a30      	subs	r2, #48	; 0x30
 800819a:	2a09      	cmp	r2, #9
 800819c:	d903      	bls.n	80081a6 <_svfiprintf_r+0x196>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0c8      	beq.n	8008134 <_svfiprintf_r+0x124>
 80081a2:	9105      	str	r1, [sp, #20]
 80081a4:	e7c6      	b.n	8008134 <_svfiprintf_r+0x124>
 80081a6:	fb05 2101 	mla	r1, r5, r1, r2
 80081aa:	2301      	movs	r3, #1
 80081ac:	4607      	mov	r7, r0
 80081ae:	e7f0      	b.n	8008192 <_svfiprintf_r+0x182>
 80081b0:	ab03      	add	r3, sp, #12
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	4622      	mov	r2, r4
 80081b6:	4b11      	ldr	r3, [pc, #68]	; (80081fc <_svfiprintf_r+0x1ec>)
 80081b8:	a904      	add	r1, sp, #16
 80081ba:	4640      	mov	r0, r8
 80081bc:	f3af 8000 	nop.w
 80081c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80081c4:	4681      	mov	r9, r0
 80081c6:	d1d6      	bne.n	8008176 <_svfiprintf_r+0x166>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	065b      	lsls	r3, r3, #25
 80081cc:	f53f af35 	bmi.w	800803a <_svfiprintf_r+0x2a>
 80081d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081d2:	b01d      	add	sp, #116	; 0x74
 80081d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d8:	ab03      	add	r3, sp, #12
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	4622      	mov	r2, r4
 80081de:	4b07      	ldr	r3, [pc, #28]	; (80081fc <_svfiprintf_r+0x1ec>)
 80081e0:	a904      	add	r1, sp, #16
 80081e2:	4640      	mov	r0, r8
 80081e4:	f000 f882 	bl	80082ec <_printf_i>
 80081e8:	e7ea      	b.n	80081c0 <_svfiprintf_r+0x1b0>
 80081ea:	bf00      	nop
 80081ec:	08008fe4 	.word	0x08008fe4
 80081f0:	08008fea 	.word	0x08008fea
 80081f4:	08008fee 	.word	0x08008fee
 80081f8:	00000000 	.word	0x00000000
 80081fc:	08007f5d 	.word	0x08007f5d

08008200 <_printf_common>:
 8008200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	4691      	mov	r9, r2
 8008206:	461f      	mov	r7, r3
 8008208:	688a      	ldr	r2, [r1, #8]
 800820a:	690b      	ldr	r3, [r1, #16]
 800820c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008210:	4293      	cmp	r3, r2
 8008212:	bfb8      	it	lt
 8008214:	4613      	movlt	r3, r2
 8008216:	f8c9 3000 	str.w	r3, [r9]
 800821a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800821e:	4606      	mov	r6, r0
 8008220:	460c      	mov	r4, r1
 8008222:	b112      	cbz	r2, 800822a <_printf_common+0x2a>
 8008224:	3301      	adds	r3, #1
 8008226:	f8c9 3000 	str.w	r3, [r9]
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	0699      	lsls	r1, r3, #26
 800822e:	bf42      	ittt	mi
 8008230:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008234:	3302      	addmi	r3, #2
 8008236:	f8c9 3000 	strmi.w	r3, [r9]
 800823a:	6825      	ldr	r5, [r4, #0]
 800823c:	f015 0506 	ands.w	r5, r5, #6
 8008240:	d107      	bne.n	8008252 <_printf_common+0x52>
 8008242:	f104 0a19 	add.w	sl, r4, #25
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	f8d9 2000 	ldr.w	r2, [r9]
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	42ab      	cmp	r3, r5
 8008250:	dc28      	bgt.n	80082a4 <_printf_common+0xa4>
 8008252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	3300      	adds	r3, #0
 800825a:	bf18      	it	ne
 800825c:	2301      	movne	r3, #1
 800825e:	0692      	lsls	r2, r2, #26
 8008260:	d42d      	bmi.n	80082be <_printf_common+0xbe>
 8008262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008266:	4639      	mov	r1, r7
 8008268:	4630      	mov	r0, r6
 800826a:	47c0      	blx	r8
 800826c:	3001      	adds	r0, #1
 800826e:	d020      	beq.n	80082b2 <_printf_common+0xb2>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	68e5      	ldr	r5, [r4, #12]
 8008274:	f8d9 2000 	ldr.w	r2, [r9]
 8008278:	f003 0306 	and.w	r3, r3, #6
 800827c:	2b04      	cmp	r3, #4
 800827e:	bf08      	it	eq
 8008280:	1aad      	subeq	r5, r5, r2
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	6922      	ldr	r2, [r4, #16]
 8008286:	bf0c      	ite	eq
 8008288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800828c:	2500      	movne	r5, #0
 800828e:	4293      	cmp	r3, r2
 8008290:	bfc4      	itt	gt
 8008292:	1a9b      	subgt	r3, r3, r2
 8008294:	18ed      	addgt	r5, r5, r3
 8008296:	f04f 0900 	mov.w	r9, #0
 800829a:	341a      	adds	r4, #26
 800829c:	454d      	cmp	r5, r9
 800829e:	d11a      	bne.n	80082d6 <_printf_common+0xd6>
 80082a0:	2000      	movs	r0, #0
 80082a2:	e008      	b.n	80082b6 <_printf_common+0xb6>
 80082a4:	2301      	movs	r3, #1
 80082a6:	4652      	mov	r2, sl
 80082a8:	4639      	mov	r1, r7
 80082aa:	4630      	mov	r0, r6
 80082ac:	47c0      	blx	r8
 80082ae:	3001      	adds	r0, #1
 80082b0:	d103      	bne.n	80082ba <_printf_common+0xba>
 80082b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ba:	3501      	adds	r5, #1
 80082bc:	e7c3      	b.n	8008246 <_printf_common+0x46>
 80082be:	18e1      	adds	r1, r4, r3
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	2030      	movs	r0, #48	; 0x30
 80082c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082c8:	4422      	add	r2, r4
 80082ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082d2:	3302      	adds	r3, #2
 80082d4:	e7c5      	b.n	8008262 <_printf_common+0x62>
 80082d6:	2301      	movs	r3, #1
 80082d8:	4622      	mov	r2, r4
 80082da:	4639      	mov	r1, r7
 80082dc:	4630      	mov	r0, r6
 80082de:	47c0      	blx	r8
 80082e0:	3001      	adds	r0, #1
 80082e2:	d0e6      	beq.n	80082b2 <_printf_common+0xb2>
 80082e4:	f109 0901 	add.w	r9, r9, #1
 80082e8:	e7d8      	b.n	800829c <_printf_common+0x9c>
	...

080082ec <_printf_i>:
 80082ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80082f4:	460c      	mov	r4, r1
 80082f6:	7e09      	ldrb	r1, [r1, #24]
 80082f8:	b085      	sub	sp, #20
 80082fa:	296e      	cmp	r1, #110	; 0x6e
 80082fc:	4617      	mov	r7, r2
 80082fe:	4606      	mov	r6, r0
 8008300:	4698      	mov	r8, r3
 8008302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008304:	f000 80b3 	beq.w	800846e <_printf_i+0x182>
 8008308:	d822      	bhi.n	8008350 <_printf_i+0x64>
 800830a:	2963      	cmp	r1, #99	; 0x63
 800830c:	d036      	beq.n	800837c <_printf_i+0x90>
 800830e:	d80a      	bhi.n	8008326 <_printf_i+0x3a>
 8008310:	2900      	cmp	r1, #0
 8008312:	f000 80b9 	beq.w	8008488 <_printf_i+0x19c>
 8008316:	2958      	cmp	r1, #88	; 0x58
 8008318:	f000 8083 	beq.w	8008422 <_printf_i+0x136>
 800831c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008324:	e032      	b.n	800838c <_printf_i+0xa0>
 8008326:	2964      	cmp	r1, #100	; 0x64
 8008328:	d001      	beq.n	800832e <_printf_i+0x42>
 800832a:	2969      	cmp	r1, #105	; 0x69
 800832c:	d1f6      	bne.n	800831c <_printf_i+0x30>
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	6813      	ldr	r3, [r2, #0]
 8008332:	0605      	lsls	r5, r0, #24
 8008334:	f103 0104 	add.w	r1, r3, #4
 8008338:	d52a      	bpl.n	8008390 <_printf_i+0xa4>
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6011      	str	r1, [r2, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	da03      	bge.n	800834a <_printf_i+0x5e>
 8008342:	222d      	movs	r2, #45	; 0x2d
 8008344:	425b      	negs	r3, r3
 8008346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800834a:	486f      	ldr	r0, [pc, #444]	; (8008508 <_printf_i+0x21c>)
 800834c:	220a      	movs	r2, #10
 800834e:	e039      	b.n	80083c4 <_printf_i+0xd8>
 8008350:	2973      	cmp	r1, #115	; 0x73
 8008352:	f000 809d 	beq.w	8008490 <_printf_i+0x1a4>
 8008356:	d808      	bhi.n	800836a <_printf_i+0x7e>
 8008358:	296f      	cmp	r1, #111	; 0x6f
 800835a:	d020      	beq.n	800839e <_printf_i+0xb2>
 800835c:	2970      	cmp	r1, #112	; 0x70
 800835e:	d1dd      	bne.n	800831c <_printf_i+0x30>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	f043 0320 	orr.w	r3, r3, #32
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	e003      	b.n	8008372 <_printf_i+0x86>
 800836a:	2975      	cmp	r1, #117	; 0x75
 800836c:	d017      	beq.n	800839e <_printf_i+0xb2>
 800836e:	2978      	cmp	r1, #120	; 0x78
 8008370:	d1d4      	bne.n	800831c <_printf_i+0x30>
 8008372:	2378      	movs	r3, #120	; 0x78
 8008374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008378:	4864      	ldr	r0, [pc, #400]	; (800850c <_printf_i+0x220>)
 800837a:	e055      	b.n	8008428 <_printf_i+0x13c>
 800837c:	6813      	ldr	r3, [r2, #0]
 800837e:	1d19      	adds	r1, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6011      	str	r1, [r2, #0]
 8008384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800838c:	2301      	movs	r3, #1
 800838e:	e08c      	b.n	80084aa <_printf_i+0x1be>
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6011      	str	r1, [r2, #0]
 8008394:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008398:	bf18      	it	ne
 800839a:	b21b      	sxthne	r3, r3
 800839c:	e7cf      	b.n	800833e <_printf_i+0x52>
 800839e:	6813      	ldr	r3, [r2, #0]
 80083a0:	6825      	ldr	r5, [r4, #0]
 80083a2:	1d18      	adds	r0, r3, #4
 80083a4:	6010      	str	r0, [r2, #0]
 80083a6:	0628      	lsls	r0, r5, #24
 80083a8:	d501      	bpl.n	80083ae <_printf_i+0xc2>
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	e002      	b.n	80083b4 <_printf_i+0xc8>
 80083ae:	0668      	lsls	r0, r5, #25
 80083b0:	d5fb      	bpl.n	80083aa <_printf_i+0xbe>
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	4854      	ldr	r0, [pc, #336]	; (8008508 <_printf_i+0x21c>)
 80083b6:	296f      	cmp	r1, #111	; 0x6f
 80083b8:	bf14      	ite	ne
 80083ba:	220a      	movne	r2, #10
 80083bc:	2208      	moveq	r2, #8
 80083be:	2100      	movs	r1, #0
 80083c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083c4:	6865      	ldr	r5, [r4, #4]
 80083c6:	60a5      	str	r5, [r4, #8]
 80083c8:	2d00      	cmp	r5, #0
 80083ca:	f2c0 8095 	blt.w	80084f8 <_printf_i+0x20c>
 80083ce:	6821      	ldr	r1, [r4, #0]
 80083d0:	f021 0104 	bic.w	r1, r1, #4
 80083d4:	6021      	str	r1, [r4, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d13d      	bne.n	8008456 <_printf_i+0x16a>
 80083da:	2d00      	cmp	r5, #0
 80083dc:	f040 808e 	bne.w	80084fc <_printf_i+0x210>
 80083e0:	4665      	mov	r5, ip
 80083e2:	2a08      	cmp	r2, #8
 80083e4:	d10b      	bne.n	80083fe <_printf_i+0x112>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	07db      	lsls	r3, r3, #31
 80083ea:	d508      	bpl.n	80083fe <_printf_i+0x112>
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	6862      	ldr	r2, [r4, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	bfde      	ittt	le
 80083f4:	2330      	movle	r3, #48	; 0x30
 80083f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80083fe:	ebac 0305 	sub.w	r3, ip, r5
 8008402:	6123      	str	r3, [r4, #16]
 8008404:	f8cd 8000 	str.w	r8, [sp]
 8008408:	463b      	mov	r3, r7
 800840a:	aa03      	add	r2, sp, #12
 800840c:	4621      	mov	r1, r4
 800840e:	4630      	mov	r0, r6
 8008410:	f7ff fef6 	bl	8008200 <_printf_common>
 8008414:	3001      	adds	r0, #1
 8008416:	d14d      	bne.n	80084b4 <_printf_i+0x1c8>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800841c:	b005      	add	sp, #20
 800841e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008422:	4839      	ldr	r0, [pc, #228]	; (8008508 <_printf_i+0x21c>)
 8008424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008428:	6813      	ldr	r3, [r2, #0]
 800842a:	6821      	ldr	r1, [r4, #0]
 800842c:	1d1d      	adds	r5, r3, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6015      	str	r5, [r2, #0]
 8008432:	060a      	lsls	r2, r1, #24
 8008434:	d50b      	bpl.n	800844e <_printf_i+0x162>
 8008436:	07ca      	lsls	r2, r1, #31
 8008438:	bf44      	itt	mi
 800843a:	f041 0120 	orrmi.w	r1, r1, #32
 800843e:	6021      	strmi	r1, [r4, #0]
 8008440:	b91b      	cbnz	r3, 800844a <_printf_i+0x15e>
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	f022 0220 	bic.w	r2, r2, #32
 8008448:	6022      	str	r2, [r4, #0]
 800844a:	2210      	movs	r2, #16
 800844c:	e7b7      	b.n	80083be <_printf_i+0xd2>
 800844e:	064d      	lsls	r5, r1, #25
 8008450:	bf48      	it	mi
 8008452:	b29b      	uxthmi	r3, r3
 8008454:	e7ef      	b.n	8008436 <_printf_i+0x14a>
 8008456:	4665      	mov	r5, ip
 8008458:	fbb3 f1f2 	udiv	r1, r3, r2
 800845c:	fb02 3311 	mls	r3, r2, r1, r3
 8008460:	5cc3      	ldrb	r3, [r0, r3]
 8008462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008466:	460b      	mov	r3, r1
 8008468:	2900      	cmp	r1, #0
 800846a:	d1f5      	bne.n	8008458 <_printf_i+0x16c>
 800846c:	e7b9      	b.n	80083e2 <_printf_i+0xf6>
 800846e:	6813      	ldr	r3, [r2, #0]
 8008470:	6825      	ldr	r5, [r4, #0]
 8008472:	6961      	ldr	r1, [r4, #20]
 8008474:	1d18      	adds	r0, r3, #4
 8008476:	6010      	str	r0, [r2, #0]
 8008478:	0628      	lsls	r0, r5, #24
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	d501      	bpl.n	8008482 <_printf_i+0x196>
 800847e:	6019      	str	r1, [r3, #0]
 8008480:	e002      	b.n	8008488 <_printf_i+0x19c>
 8008482:	066a      	lsls	r2, r5, #25
 8008484:	d5fb      	bpl.n	800847e <_printf_i+0x192>
 8008486:	8019      	strh	r1, [r3, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	4665      	mov	r5, ip
 800848e:	e7b9      	b.n	8008404 <_printf_i+0x118>
 8008490:	6813      	ldr	r3, [r2, #0]
 8008492:	1d19      	adds	r1, r3, #4
 8008494:	6011      	str	r1, [r2, #0]
 8008496:	681d      	ldr	r5, [r3, #0]
 8008498:	6862      	ldr	r2, [r4, #4]
 800849a:	2100      	movs	r1, #0
 800849c:	4628      	mov	r0, r5
 800849e:	f7f7 fe97 	bl	80001d0 <memchr>
 80084a2:	b108      	cbz	r0, 80084a8 <_printf_i+0x1bc>
 80084a4:	1b40      	subs	r0, r0, r5
 80084a6:	6060      	str	r0, [r4, #4]
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	6123      	str	r3, [r4, #16]
 80084ac:	2300      	movs	r3, #0
 80084ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b2:	e7a7      	b.n	8008404 <_printf_i+0x118>
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	462a      	mov	r2, r5
 80084b8:	4639      	mov	r1, r7
 80084ba:	4630      	mov	r0, r6
 80084bc:	47c0      	blx	r8
 80084be:	3001      	adds	r0, #1
 80084c0:	d0aa      	beq.n	8008418 <_printf_i+0x12c>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	079b      	lsls	r3, r3, #30
 80084c6:	d413      	bmi.n	80084f0 <_printf_i+0x204>
 80084c8:	68e0      	ldr	r0, [r4, #12]
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	4298      	cmp	r0, r3
 80084ce:	bfb8      	it	lt
 80084d0:	4618      	movlt	r0, r3
 80084d2:	e7a3      	b.n	800841c <_printf_i+0x130>
 80084d4:	2301      	movs	r3, #1
 80084d6:	464a      	mov	r2, r9
 80084d8:	4639      	mov	r1, r7
 80084da:	4630      	mov	r0, r6
 80084dc:	47c0      	blx	r8
 80084de:	3001      	adds	r0, #1
 80084e0:	d09a      	beq.n	8008418 <_printf_i+0x12c>
 80084e2:	3501      	adds	r5, #1
 80084e4:	68e3      	ldr	r3, [r4, #12]
 80084e6:	9a03      	ldr	r2, [sp, #12]
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	42ab      	cmp	r3, r5
 80084ec:	dcf2      	bgt.n	80084d4 <_printf_i+0x1e8>
 80084ee:	e7eb      	b.n	80084c8 <_printf_i+0x1dc>
 80084f0:	2500      	movs	r5, #0
 80084f2:	f104 0919 	add.w	r9, r4, #25
 80084f6:	e7f5      	b.n	80084e4 <_printf_i+0x1f8>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1ac      	bne.n	8008456 <_printf_i+0x16a>
 80084fc:	7803      	ldrb	r3, [r0, #0]
 80084fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008502:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008506:	e76c      	b.n	80083e2 <_printf_i+0xf6>
 8008508:	08008ff5 	.word	0x08008ff5
 800850c:	08009006 	.word	0x08009006

08008510 <memcpy>:
 8008510:	b510      	push	{r4, lr}
 8008512:	1e43      	subs	r3, r0, #1
 8008514:	440a      	add	r2, r1
 8008516:	4291      	cmp	r1, r2
 8008518:	d100      	bne.n	800851c <memcpy+0xc>
 800851a:	bd10      	pop	{r4, pc}
 800851c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008520:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008524:	e7f7      	b.n	8008516 <memcpy+0x6>

08008526 <memmove>:
 8008526:	4288      	cmp	r0, r1
 8008528:	b510      	push	{r4, lr}
 800852a:	eb01 0302 	add.w	r3, r1, r2
 800852e:	d807      	bhi.n	8008540 <memmove+0x1a>
 8008530:	1e42      	subs	r2, r0, #1
 8008532:	4299      	cmp	r1, r3
 8008534:	d00a      	beq.n	800854c <memmove+0x26>
 8008536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800853a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800853e:	e7f8      	b.n	8008532 <memmove+0xc>
 8008540:	4283      	cmp	r3, r0
 8008542:	d9f5      	bls.n	8008530 <memmove+0xa>
 8008544:	1881      	adds	r1, r0, r2
 8008546:	1ad2      	subs	r2, r2, r3
 8008548:	42d3      	cmn	r3, r2
 800854a:	d100      	bne.n	800854e <memmove+0x28>
 800854c:	bd10      	pop	{r4, pc}
 800854e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008552:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008556:	e7f7      	b.n	8008548 <memmove+0x22>

08008558 <_free_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4605      	mov	r5, r0
 800855c:	2900      	cmp	r1, #0
 800855e:	d045      	beq.n	80085ec <_free_r+0x94>
 8008560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008564:	1f0c      	subs	r4, r1, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfb8      	it	lt
 800856a:	18e4      	addlt	r4, r4, r3
 800856c:	f000 f8d2 	bl	8008714 <__malloc_lock>
 8008570:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <_free_r+0x98>)
 8008572:	6813      	ldr	r3, [r2, #0]
 8008574:	4610      	mov	r0, r2
 8008576:	b933      	cbnz	r3, 8008586 <_free_r+0x2e>
 8008578:	6063      	str	r3, [r4, #4]
 800857a:	6014      	str	r4, [r2, #0]
 800857c:	4628      	mov	r0, r5
 800857e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008582:	f000 b8c8 	b.w	8008716 <__malloc_unlock>
 8008586:	42a3      	cmp	r3, r4
 8008588:	d90c      	bls.n	80085a4 <_free_r+0x4c>
 800858a:	6821      	ldr	r1, [r4, #0]
 800858c:	1862      	adds	r2, r4, r1
 800858e:	4293      	cmp	r3, r2
 8008590:	bf04      	itt	eq
 8008592:	681a      	ldreq	r2, [r3, #0]
 8008594:	685b      	ldreq	r3, [r3, #4]
 8008596:	6063      	str	r3, [r4, #4]
 8008598:	bf04      	itt	eq
 800859a:	1852      	addeq	r2, r2, r1
 800859c:	6022      	streq	r2, [r4, #0]
 800859e:	6004      	str	r4, [r0, #0]
 80085a0:	e7ec      	b.n	800857c <_free_r+0x24>
 80085a2:	4613      	mov	r3, r2
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	b10a      	cbz	r2, 80085ac <_free_r+0x54>
 80085a8:	42a2      	cmp	r2, r4
 80085aa:	d9fa      	bls.n	80085a2 <_free_r+0x4a>
 80085ac:	6819      	ldr	r1, [r3, #0]
 80085ae:	1858      	adds	r0, r3, r1
 80085b0:	42a0      	cmp	r0, r4
 80085b2:	d10b      	bne.n	80085cc <_free_r+0x74>
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	4401      	add	r1, r0
 80085b8:	1858      	adds	r0, r3, r1
 80085ba:	4282      	cmp	r2, r0
 80085bc:	6019      	str	r1, [r3, #0]
 80085be:	d1dd      	bne.n	800857c <_free_r+0x24>
 80085c0:	6810      	ldr	r0, [r2, #0]
 80085c2:	6852      	ldr	r2, [r2, #4]
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	4401      	add	r1, r0
 80085c8:	6019      	str	r1, [r3, #0]
 80085ca:	e7d7      	b.n	800857c <_free_r+0x24>
 80085cc:	d902      	bls.n	80085d4 <_free_r+0x7c>
 80085ce:	230c      	movs	r3, #12
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	e7d3      	b.n	800857c <_free_r+0x24>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	1821      	adds	r1, r4, r0
 80085d8:	428a      	cmp	r2, r1
 80085da:	bf04      	itt	eq
 80085dc:	6811      	ldreq	r1, [r2, #0]
 80085de:	6852      	ldreq	r2, [r2, #4]
 80085e0:	6062      	str	r2, [r4, #4]
 80085e2:	bf04      	itt	eq
 80085e4:	1809      	addeq	r1, r1, r0
 80085e6:	6021      	streq	r1, [r4, #0]
 80085e8:	605c      	str	r4, [r3, #4]
 80085ea:	e7c7      	b.n	800857c <_free_r+0x24>
 80085ec:	bd38      	pop	{r3, r4, r5, pc}
 80085ee:	bf00      	nop
 80085f0:	200002e4 	.word	0x200002e4

080085f4 <_malloc_r>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	1ccd      	adds	r5, r1, #3
 80085f8:	f025 0503 	bic.w	r5, r5, #3
 80085fc:	3508      	adds	r5, #8
 80085fe:	2d0c      	cmp	r5, #12
 8008600:	bf38      	it	cc
 8008602:	250c      	movcc	r5, #12
 8008604:	2d00      	cmp	r5, #0
 8008606:	4606      	mov	r6, r0
 8008608:	db01      	blt.n	800860e <_malloc_r+0x1a>
 800860a:	42a9      	cmp	r1, r5
 800860c:	d903      	bls.n	8008616 <_malloc_r+0x22>
 800860e:	230c      	movs	r3, #12
 8008610:	6033      	str	r3, [r6, #0]
 8008612:	2000      	movs	r0, #0
 8008614:	bd70      	pop	{r4, r5, r6, pc}
 8008616:	f000 f87d 	bl	8008714 <__malloc_lock>
 800861a:	4a21      	ldr	r2, [pc, #132]	; (80086a0 <_malloc_r+0xac>)
 800861c:	6814      	ldr	r4, [r2, #0]
 800861e:	4621      	mov	r1, r4
 8008620:	b991      	cbnz	r1, 8008648 <_malloc_r+0x54>
 8008622:	4c20      	ldr	r4, [pc, #128]	; (80086a4 <_malloc_r+0xb0>)
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	b91b      	cbnz	r3, 8008630 <_malloc_r+0x3c>
 8008628:	4630      	mov	r0, r6
 800862a:	f000 f863 	bl	80086f4 <_sbrk_r>
 800862e:	6020      	str	r0, [r4, #0]
 8008630:	4629      	mov	r1, r5
 8008632:	4630      	mov	r0, r6
 8008634:	f000 f85e 	bl	80086f4 <_sbrk_r>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d124      	bne.n	8008686 <_malloc_r+0x92>
 800863c:	230c      	movs	r3, #12
 800863e:	6033      	str	r3, [r6, #0]
 8008640:	4630      	mov	r0, r6
 8008642:	f000 f868 	bl	8008716 <__malloc_unlock>
 8008646:	e7e4      	b.n	8008612 <_malloc_r+0x1e>
 8008648:	680b      	ldr	r3, [r1, #0]
 800864a:	1b5b      	subs	r3, r3, r5
 800864c:	d418      	bmi.n	8008680 <_malloc_r+0x8c>
 800864e:	2b0b      	cmp	r3, #11
 8008650:	d90f      	bls.n	8008672 <_malloc_r+0x7e>
 8008652:	600b      	str	r3, [r1, #0]
 8008654:	50cd      	str	r5, [r1, r3]
 8008656:	18cc      	adds	r4, r1, r3
 8008658:	4630      	mov	r0, r6
 800865a:	f000 f85c 	bl	8008716 <__malloc_unlock>
 800865e:	f104 000b 	add.w	r0, r4, #11
 8008662:	1d23      	adds	r3, r4, #4
 8008664:	f020 0007 	bic.w	r0, r0, #7
 8008668:	1ac3      	subs	r3, r0, r3
 800866a:	d0d3      	beq.n	8008614 <_malloc_r+0x20>
 800866c:	425a      	negs	r2, r3
 800866e:	50e2      	str	r2, [r4, r3]
 8008670:	e7d0      	b.n	8008614 <_malloc_r+0x20>
 8008672:	428c      	cmp	r4, r1
 8008674:	684b      	ldr	r3, [r1, #4]
 8008676:	bf16      	itet	ne
 8008678:	6063      	strne	r3, [r4, #4]
 800867a:	6013      	streq	r3, [r2, #0]
 800867c:	460c      	movne	r4, r1
 800867e:	e7eb      	b.n	8008658 <_malloc_r+0x64>
 8008680:	460c      	mov	r4, r1
 8008682:	6849      	ldr	r1, [r1, #4]
 8008684:	e7cc      	b.n	8008620 <_malloc_r+0x2c>
 8008686:	1cc4      	adds	r4, r0, #3
 8008688:	f024 0403 	bic.w	r4, r4, #3
 800868c:	42a0      	cmp	r0, r4
 800868e:	d005      	beq.n	800869c <_malloc_r+0xa8>
 8008690:	1a21      	subs	r1, r4, r0
 8008692:	4630      	mov	r0, r6
 8008694:	f000 f82e 	bl	80086f4 <_sbrk_r>
 8008698:	3001      	adds	r0, #1
 800869a:	d0cf      	beq.n	800863c <_malloc_r+0x48>
 800869c:	6025      	str	r5, [r4, #0]
 800869e:	e7db      	b.n	8008658 <_malloc_r+0x64>
 80086a0:	200002e4 	.word	0x200002e4
 80086a4:	200002e8 	.word	0x200002e8

080086a8 <_realloc_r>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	4607      	mov	r7, r0
 80086ac:	4614      	mov	r4, r2
 80086ae:	460e      	mov	r6, r1
 80086b0:	b921      	cbnz	r1, 80086bc <_realloc_r+0x14>
 80086b2:	4611      	mov	r1, r2
 80086b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086b8:	f7ff bf9c 	b.w	80085f4 <_malloc_r>
 80086bc:	b922      	cbnz	r2, 80086c8 <_realloc_r+0x20>
 80086be:	f7ff ff4b 	bl	8008558 <_free_r>
 80086c2:	4625      	mov	r5, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c8:	f000 f826 	bl	8008718 <_malloc_usable_size_r>
 80086cc:	42a0      	cmp	r0, r4
 80086ce:	d20f      	bcs.n	80086f0 <_realloc_r+0x48>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4638      	mov	r0, r7
 80086d4:	f7ff ff8e 	bl	80085f4 <_malloc_r>
 80086d8:	4605      	mov	r5, r0
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0f2      	beq.n	80086c4 <_realloc_r+0x1c>
 80086de:	4631      	mov	r1, r6
 80086e0:	4622      	mov	r2, r4
 80086e2:	f7ff ff15 	bl	8008510 <memcpy>
 80086e6:	4631      	mov	r1, r6
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff ff35 	bl	8008558 <_free_r>
 80086ee:	e7e9      	b.n	80086c4 <_realloc_r+0x1c>
 80086f0:	4635      	mov	r5, r6
 80086f2:	e7e7      	b.n	80086c4 <_realloc_r+0x1c>

080086f4 <_sbrk_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4c06      	ldr	r4, [pc, #24]	; (8008710 <_sbrk_r+0x1c>)
 80086f8:	2300      	movs	r3, #0
 80086fa:	4605      	mov	r5, r0
 80086fc:	4608      	mov	r0, r1
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	f7ff fafe 	bl	8007d00 <_sbrk>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	d102      	bne.n	800870e <_sbrk_r+0x1a>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	b103      	cbz	r3, 800870e <_sbrk_r+0x1a>
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	2001096c 	.word	0x2001096c

08008714 <__malloc_lock>:
 8008714:	4770      	bx	lr

08008716 <__malloc_unlock>:
 8008716:	4770      	bx	lr

08008718 <_malloc_usable_size_r>:
 8008718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800871c:	1f18      	subs	r0, r3, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfbc      	itt	lt
 8008722:	580b      	ldrlt	r3, [r1, r0]
 8008724:	18c0      	addlt	r0, r0, r3
 8008726:	4770      	bx	lr

08008728 <_init>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	bf00      	nop
 800872c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872e:	bc08      	pop	{r3}
 8008730:	469e      	mov	lr, r3
 8008732:	4770      	bx	lr

08008734 <_fini>:
 8008734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008736:	bf00      	nop
 8008738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873a:	bc08      	pop	{r3}
 800873c:	469e      	mov	lr, r3
 800873e:	4770      	bx	lr
